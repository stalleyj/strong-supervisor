{
    "": {
        "count": 9041,
        "size": 2386072
    },
    "\t": {
        "count": 1,
        "size": 32
    },
    "\n": {
        "count": 1,
        "size": 32
    },
    "\n ": {
        "count": 1,
        "size": 32
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=(void 0);\nvar d=(void 0);\nvar e=(void 0);\nfunction Export(g){\ng.next=d;\nd=g;\n};\nfunction Import(g){\ng.next=c;\nc=g;\n};\nfunction ImportFromExperimental(g){\ng.next=e;\ne=g;\n};\nfunction SetFunctionName(g,h,i){\nif((typeof(h)==='symbol')){\nh=\"[\"+%SymbolDescription(h)+\"]\";\n}\nif((i===(void 0))){\n%FunctionSetName(g,h);\n}else{\n%FunctionSetName(g,i+\" \"+h);\n}\n}\nfunction InstallConstants(j,k){\n%CheckIsBootstrapping();\n%OptimizeObjectForAddingMultipleProperties(j,k.length>>1);\nvar l=2|4|1;\nfor(var m=0;m<k.length;m+=2){\nvar h=k[m];\nvar n=k[m+1];\n%AddNamedProperty(j,h,n,l);\n}\n%ToFastProperties(j);\n}\nfunction InstallFunctions(j,l,o){\n%CheckIsBootstrapping();\n%OptimizeObjectForAddingMultipleProperties(j,o.length>>1);\nfor(var m=0;m<o.length;m+=2){\nvar p=o[m];\nvar g=o[m+1];\nSetFunctionName(g,p);\n%FunctionRemovePrototype(g);\n%AddNamedProperty(j,p,g,l);\n%SetNativeFlag(g);\n}\n%ToFastProperties(j);\n}\nfunction InstallGetter(j,h,q,l){\n%CheckIsBootstrapping();\nif(typeof l==\"un": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Array;\nvar d=a.ArrayBuffer;\nvar e=a.DataView;\nvar g=a.Object;\nvar h=a.Uint8Array;\n\nvar i=a.Int8Array;\n\nvar j=a.Uint16Array;\n\nvar k=a.Int16Array;\n\nvar l=a.Uint32Array;\n\nvar m=a.Int32Array;\n\nvar n=a.Float32Array;\n\nvar o=a.Float64Array;\n\nvar p=a.Uint8ClampedArray;\n\n\nvar q;\nvar r;\nb.Import(function(t){\nq=t.MathMax;\nr=t.MathMin;\n});\nvar u=b.InternalArray;\nfunction Uint8ArrayConstructByArrayBuffer(v,w,x,y){\nif(!(x===(void 0))){\nx=\n$toPositiveInteger(x,139);\n}\nif(!(y===(void 0))){\ny=$toPositiveInteger(y,139);\n}\nvar z=%_ArrayBufferGetByteLength(w);\nvar A;\nif((x===(void 0))){\nA=0;\n}else{\nA=x;\nif(A % 1!==0){\nthrow MakeRangeError(138,\n\"start offset\",\"Uint8Array\",1);\n}\nif(A>z){\nthrow MakeRangeError(140);\n}\n}\nvar B;\nvar C;\nif((y===(void 0))){\nif(z % 1!==0){\nthrow MakeRangeError(138,\n\"byte length\",\"Uint8Array\",1);\n}\nB=z-A;\nC=B/1;\n}else{\nvar C=y;\nB=C*1;\n}\nif((A+B>z)\n||(C>%_MaxSmi())){\nthrow MakeRangeError(139);\n}\n%_TypedArrayInitialize(v,1,w,A,B,true);\n}\nfuncti": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.ArrayBuffer;\nvar d=a.Object;\nvar e;\nvar g;\nb.Import(function(h){\ne=h.MathMax;\ng=h.MathMin;\n});\nfunction ArrayBufferConstructor(i){\nif(%_IsConstructCall()){\nvar j=$toPositiveInteger(i,125);\n%ArrayBufferInitialize(this,j,false);\n}else{\nthrow MakeTypeError(20,\"ArrayBuffer\");\n}\n}\nfunction ArrayBufferGetByteLen(){\nif(!(%_ClassOf(this)==='ArrayBuffer')){\nthrow MakeTypeError(33,\n'ArrayBuffer.prototype.byteLength',this);\n}\nreturn %_ArrayBufferGetByteLength(this);\n}\nfunction ArrayBufferSlice(k,l){\nif(!(%_ClassOf(this)==='ArrayBuffer')){\nthrow MakeTypeError(33,\n'ArrayBuffer.prototype.slice',this);\n}\nvar m=(%_IsSmi(%IS_VAR(k))?k:%NumberToInteger($toNumber(k)));\nif(!(l===(void 0))){\nl=(%_IsSmi(%IS_VAR(l))?l:%NumberToInteger($toNumber(l)));\n}\nvar n;\nvar o=%_ArrayBufferGetByteLength(this);\nif(m<0){\nn=e(o+m,0);\n}else{\nn=g(m,o);\n}\nvar p=(l===(void 0))?o:l;\nvar q;\nif(p<0){\nq=e(o+p,0);\n}else{\nq=g(p,o);\n}\nif(q<n){\nq=n;\n}\nvar r=q-n;\nvar t=new c(r);\n%ArrayBufferSlice": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Boolean;\nvar d=a.Date;\nvar e=a.Number;\nvar g=a.RegExp;\nvar h=a.String;\nvar i=b.ObjectDefineProperties;\nvar j=b.ObjectDefineProperty;\nvar k=b.SetFunctionName;\nvar l;\nvar m;\nvar n;\nvar o;\nvar p;\nvar q;\nvar r;\nvar t;\nvar u;\nvar v;\nvar w;\nvar x;\nvar y;\nb.Import(function(z){\nl=z.ArrayIndexOf;\nm=z.ArrayJoin;\nn=z.IsFinite;\no=z.IsNaN;\np=z.MathFloor;\nq=z.RegExpTest;\nr=z.StringIndexOf;\nt=z.StringLastIndexOf;\nu=z.StringMatch;\nv=z.StringReplace;\nw=z.StringSplit;\nx=z.StringSubstr;\ny=z.StringSubstring;\n});\nvar A={};\n%AddNamedProperty(a,\"Intl\",A,2);\nvar B={\n'collator':(void 0),\n'numberformat':(void 0),\n'dateformat':(void 0),\n'breakiterator':(void 0)\n};\nvar C=(void 0);\nvar D=(void 0);\nfunction GetUnicodeExtensionRE(){\nif(((void 0)===(void 0))){\nD=new g('-u(-[a-z0-9]{2,8})+','g');\n}\nreturn D;\n}\nvar E=(void 0);\nfunction GetAnyExtensionRE(){\nif((E===(void 0))){\nE=new g('-[a-z0-9]{1}-.*','g');\n}\nreturn E;\n}\nvar F=(void 0);\nfunction GetQuotedStringRE(){\nif((F===(void": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Function;\nvar d;\nb.Import(function(e){\nd=e.NewFunctionString;\n});\nfunction GeneratorObjectNext(g){\nif(!(%_ClassOf(this)==='Generator')){\nthrow MakeTypeError(33,\n'[Generator].prototype.next',this);\n}\nvar h=%GeneratorGetContinuation(this);\nif(h>0){\nif((%_DebugIsActive()!=0))%DebugPrepareStepInIfStepping(this);\ntry{\nreturn %_GeneratorNext(this,g);\n}catch(e){\n%GeneratorClose(this);\nthrow e;\n}\n}else if(h==0){\nreturn{value:void 0,done:true};\n}else{\nthrow MakeTypeError(31);\n}\n}\nfunction GeneratorObjectThrow(i){\nif(!(%_ClassOf(this)==='Generator')){\nthrow MakeTypeError(33,\n'[Generator].prototype.throw',this);\n}\nvar h=%GeneratorGetContinuation(this);\nif(h>0){\ntry{\nreturn %_GeneratorThrow(this,i);\n}catch(e){\n%GeneratorClose(this);\nthrow e;\n}\n}else if(h==0){\nthrow i;\n}else{\nthrow MakeTypeError(31);\n}\n}\nfunction GeneratorFunctionConstructor(j){\nvar k=d(arguments,'function*');\nvar l=%GlobalProxy(GeneratorFunctionConstructor);\nvar m=%_CallFunction(l,%CompileSt": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Object;\nvar d;\nb.Import(function(e){\nd=e.OwnPropertyKeys;\n});\nfunction ObjectAssign(f,g){\nvar h=((%_IsSpecObject(%IS_VAR(f)))?f:$toObject(f));\nvar i=%_ArgumentsLength();\nif(i<2)return h;\nfor(var j=1;j<i;++j){\nvar k=%_Arguments(j);\nif((k==null)){\ncontinue;\n}\nvar e=((%_IsSpecObject(%IS_VAR(k)))?k:$toObject(k));\nvar l=d(e);\nvar m=l.length;\nfor(var n=0;n<m;++n){\nvar o=l[n];\nif(%IsPropertyEnumerable(e,o)){\nvar p=e[o];\nh[o]=p;\n}\n}\n}\nreturn h;\n}\nb.InstallFunctions(c,2,[\n\"assign\",ObjectAssign\n]);\n})\n\n": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Object;\nvar d=a.Array;\nvar e=b.InternalArray;\nfunction HexValueOf(g){\nif(g>=48&&g<=57)return g-48;\nif(g>=65&&g<=70)return g-55;\nif(g>=97&&g<=102)return g-87;\nreturn-1;\n}\nfunction isAlphaNumeric(h){\nif(97<=h&&h<=122)return true;\nif(65<=h&&h<=90)return true;\nif(48<=h&&h<=57)return true;\nreturn false;\n}\nvar i=0;\nfunction URIAddEncodedOctetToBuffer(j,k,l){\nk[l++]=37;\nk[l++]=i[j>>4];\nk[l++]=i[j&0x0F];\nreturn l;\n}\nfunction URIEncodeOctets(m,k,l){\nif(i===0){\ni=[48,49,50,51,52,53,54,55,56,57,\n65,66,67,68,69,70];\n}\nl=URIAddEncodedOctetToBuffer(m[0],k,l);\nif(m[1])l=URIAddEncodedOctetToBuffer(m[1],k,l);\nif(m[2])l=URIAddEncodedOctetToBuffer(m[2],k,l);\nif(m[3])l=URIAddEncodedOctetToBuffer(m[3],k,l);\nreturn l;\n}\nfunction URIEncodeSingle(h,k,l){\nvar n=(h>>12)&0xF;\nvar o=(h>>6)&63;\nvar p=h&63;\nvar m=new d(3);\nif(h<=0x007F){\nm[0]=h;\n}else if(h<=0x07FF){\nm[0]=o+192;\nm[1]=p+128;\n}else{\nm[0]=n+224;\nm[1]=o+128;\nm[2]=p+128;\n}\nreturn URIEncodeOctets(m,k,l);\n}\nfunction ": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Object;\nvar d=a.WeakMap;\nvar e=a.WeakSet;\nfunction WeakMapConstructor(g){\nif(!%_IsConstructCall()){\nthrow MakeTypeError(20,\"WeakMap\");\n}\n%WeakCollectionInitialize(this);\nif(!(g==null)){\nvar h=this.set;\nif(!(%_ClassOf(h)==='Function')){\nthrow MakeTypeError(78,'set',this);\n}\nfor(var i of g){\nif(!(%_IsSpecObject(i))){\nthrow MakeTypeError(39,i);\n}\n%_CallFunction(this,i[0],i[1],h);\n}\n}\n}\nfunction WeakMapGet(j){\nif(!(%_ClassOf(this)==='WeakMap')){\nthrow MakeTypeError(33,\n'WeakMap.prototype.get',this);\n}\nif(!(%_IsSpecObject(j)))return(void 0);\nvar k=$getExistingHash(j);\nif((k===(void 0)))return(void 0);\nreturn %WeakCollectionGet(this,j,k);\n}\nfunction WeakMapSet(j,l){\nif(!(%_ClassOf(this)==='WeakMap')){\nthrow MakeTypeError(33,\n'WeakMap.prototype.set',this);\n}\nif(!(%_IsSpecObject(j)))throw MakeTypeError(134);\nreturn %WeakCollectionSet(this,j,l,$getHash(j));\n}\nfunction WeakMapHas(j){\nif(!(%_ClassOf(this)==='WeakMap')){\nthrow MakeTypeError(33,\n'WeakMap.prot": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.String;\nvar d;\nb.Import(function(e){\nd=e.ArrayIteratorCreateResultObject;\n});\nvar g=\n(%CreateGlobalPrivateSymbol(\"StringIterator#iteratedString\"));\nvar h=(%CreateGlobalPrivateSymbol(\"StringIterator#next\"));\nfunction StringIterator(){}\nfunction CreateStringIterator(i){\nvar j=((typeof(%IS_VAR(i))==='string')?i:$nonStringToString(i));\nvar k=new StringIterator;\n(k[g]=j);\n(k[h]=0);\nreturn k;\n}\nfunction StringIteratorNext(){\nvar k=$toObject(this);\nif(!(!(k[h]===(void 0)))){\nthrow MakeTypeError(33,\n'String Iterator.prototype.next');\n}\nvar j=(k[g]);\nif((j===(void 0))){\nreturn d((void 0),true);\n}\nvar l=(k[h]);\nvar m=(j.length>>>0);\nif(l>=m){\n(k[g]=(void 0));\nreturn d((void 0),true);\n}\nvar n=%_StringCharCodeAt(j,l);\nvar o=%_StringCharFromCode(n);\nl++;\nif(n>=0xD800&&n<=0xDBFF&&l<m){\nvar p=%_StringCharCodeAt(j,l);\nif(p>=0xDC00&&p<=0xDFFF){\no+=%_StringCharFromCode(p);\nl++;\n}\n}\n(k[h]=l);\nreturn d(o,false);\n}\nfunction StringPrototypeIterator(){\nreturn CreateStr": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Uint8Array;\n\nvar d=a.Int8Array;\n\nvar e=a.Uint16Array;\n\nvar g=a.Int16Array;\n\nvar h=a.Uint32Array;\n\nvar i=a.Int32Array;\n\nvar j=a.Float32Array;\n\nvar k=a.Float64Array;\n\nvar l=a.Uint8ClampedArray;\n\n\nvar m=a.Array;\n\nvar n;\nvar o;\nvar p;\nvar q;\nvar r;\nvar t;\nvar u;\nvar v;\nvar w;\nvar x;\nvar y;\nvar z;\nvar A;\nvar B;\nvar C;\nvar D;\nvar E;\nvar F;\nvar G;\nvar H;\nb.Import(function(I){\nn=I.ArrayFrom;\no=I.ArrayToString;\np=I.InnerArrayCopyWithin;\nq=I.InnerArrayEvery;\nr=I.InnerArrayFill;\nt=I.InnerArrayFilter;\nu=I.InnerArrayFind;\nv=I.InnerArrayFindIndex;\nw=I.InnerArrayForEach;\nx=I.InnerArrayIndexOf;\ny=I.InnerArrayJoin;\nz=I.InnerArrayLastIndexOf;\nA=I.InnerArrayMap;\nInnerArrayReduce=I.InnerArrayReduce;\nInnerArrayReduceRight=I.InnerArrayReduceRight;\nB=I.InnerArrayReverse;\nC=I.InnerArraySome;\nD=I.InnerArraySort;\nE=I.InnerArrayToLocaleString;\nF=I.IsNaN;\nG=I.MathMax;\nH=I.MathMin;\n});\nfunction ConstructTypedArray(J,K){\nif(!%IsConstructor(J)||(J.prototype===(void 0))||\n!%Has": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n%CheckIsBootstrapping();\nvar c=a.RegExp;\nvar d=a.String;\nvar e=b.InternalArray;\nvar g=b.InternalPackedArray;\nvar h;\nvar i;\nvar j;\nvar k;\nvar l;\nvar m;\nvar n;\nb.Import(function(o){\nh=o.ArrayIndexOf;\ni=o.ArrayJoin;\nj=o.MathMax;\nk=o.MathMin;\nl=o.RegExpExec;\nm=o.RegExpExecNoTests;\nn=o.RegExpLastMatchInfo;\n});\nfunction StringConstructor(p){\nif(%_ArgumentsLength()==0)p='';\nif(%_IsConstructCall()){\n%_SetValueOf(this,((typeof(%IS_VAR(p))==='string')?p:$nonStringToString(p)));\n}else{\nreturn(typeof(p)==='symbol')?\n%_CallFunction(p,$symbolToString):((typeof(%IS_VAR(p))==='string')?p:$nonStringToString(p));\n}\n}\nfunction StringToString(){\nif(!(typeof(this)==='string')&&!(%_ClassOf(this)==='String')){\nthrow MakeTypeError(55,'String.prototype.toString');\n}\nreturn %_ValueOf(this);\n}\nfunction StringValueOf(){\nif(!(typeof(this)==='string')&&!(%_ClassOf(this)==='String')){\nthrow MakeTypeError(55,'String.prototype.valueOf');\n}\nreturn %_ValueOf(this);\n}\nfunction StringCharAtJS(q){\nif((this==null)&&!(%_IsUndetecta": {
        "count": 1,
        "size": 40
    },
    "\n(function(a,b){\n'use strict';\n%CheckIsBootstrapping();\nvar c=a.Array;\nvar d=a.Symbol;\nvar e;\nvar g;\nvar h;\nvar i;\nvar j;\nvar k;\nb.Import(function(l){\ne=l.GetIterator;\ng=l.GetMethod;\nh=l.MathMax;\ni=l.MathMin;\nj=l.ObjectIsFrozen;\nk=l.ObjectDefineProperty;\n});\nfunction InnerArrayCopyWithin(m,n,o,p,q){\nm=(%_IsSmi(%IS_VAR(m))?m:%NumberToInteger($toNumber(m)));\nvar r;\nif(m<0){\nr=h(q+m,0);\n}else{\nr=i(m,q);\n}\nn=(%_IsSmi(%IS_VAR(n))?n:%NumberToInteger($toNumber(n)));\nvar l;\nif(n<0){\nl=h(q+n,0);\n}else{\nl=i(n,q);\n}\no=(o===(void 0))?q:(%_IsSmi(%IS_VAR(o))?o:%NumberToInteger($toNumber(o)));\nvar t;\nif(o<0){\nt=h(q+o,0);\n}else{\nt=i(o,q);\n}\nvar u=i(t-l,q-r);\nvar v=1;\nif(l<r&&r<(l+u)){\nv=-1;\nl=l+u-1;\nr=r+u-1;\n}\nwhile(u>0){\nif(l in p){\np[r]=p[l];\n}else{\ndelete p[r];\n}\nl=l+v;\nr=r+v;\nu--;\n}\nreturn p;\n}\nfunction ArrayCopyWithin(m,n,o){\nif((this==null)&&!(%_IsUndetectableObject(this)))throw MakeTypeError(14,\"Array.prototype.copyWithin\");\nvar p=((%_IsSpecObject(%IS_VAR(this)))?this:$toObject(this));\nvar q=$toLength(p.length);\nretur": {
        "count": 1,
        "size": 40
    },
    "\nvar $arrayConcat;\nvar $arrayPush;\nvar $arrayPop;\nvar $arrayShift;\nvar $arraySlice;\nvar $arraySplice;\nvar $arrayUnshift;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Array;\nvar d=b.InternalArray;\nvar e=b.InternalPackedArray;\nvar g;\nvar h;\nvar i;\nvar j;\nvar k;\nvar l;\nb.Import(function(m){\ng=m.Delete;\nh=m.MathMin;\ni=m.ObjectHasOwnProperty;\nj=m.ObjectIsFrozen;\nk=m.ObjectIsSealed;\nl=m.ObjectToString;\n});\nvar n=new d();\nfunction GetSortedArrayKeys(o,p){\nvar q=new d();\nif((typeof(p)==='number')){\nvar r=p;\nfor(var t=0;t<r;++t){\nvar u=o[t];\nif(!(u===(void 0))||t in o){\nq.push(t);\n}\n}\n}else{\nvar v=p.length;\nfor(var w=0;w<v;++w){\nvar x=p[w];\nif(!(x===(void 0))){\nvar u=o[x];\nif(!(u===(void 0))||x in o){\nq.push(x);\n}\n}\n}\n%_CallFunction(q,function(y,z){return y-z;},ArraySort);\n}\nreturn q;\n}\nfunction SparseJoinWithSeparatorJS(o,A,B,C){\nvar q=GetSortedArrayKeys(o,%GetArrayKeys(o,A));\nvar D=0;\nvar E=new d(q.length*2);\nvar F=-1;\nfor(var t=0;t<q.length;t++){\nvar x=q[t];\nif(x!=F){\nvar u=o[x];\nif(!(typeof(u)===": {
        "count": 1,
        "size": 40
    },
    "\nvar $arrayValues;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Array;\nvar d=a.Uint8Array;\n\nvar e=a.Int8Array;\n\nvar g=a.Uint16Array;\n\nvar h=a.Int16Array;\n\nvar i=a.Uint32Array;\n\nvar j=a.Int32Array;\n\nvar k=a.Float32Array;\n\nvar l=a.Float64Array;\n\nvar m=a.Uint8ClampedArray;\n\n\nvar n=(%CreateGlobalPrivateSymbol(\"ArrayIterator#object\"));\nvar o=(%CreateGlobalPrivateSymbol(\"ArrayIterator#next\"));\nvar p=(%CreateGlobalPrivateSymbol(\"ArrayIterator#kind\"));\nfunction ArrayIterator(){}\nfunction CreateArrayIterator(q,r){\nvar t=$toObject(q);\nvar u=new ArrayIterator;\n(u[n]=t);\n(u[o]=0);\n(u[p]=r);\nreturn u;\n}\nfunction CreateIteratorResultObject(v,w){\nreturn{value:v,done:w};\n}\nfunction ArrayIteratorIterator(){\nreturn this;\n}\nfunction ArrayIteratorNext(){\nvar u=$toObject(this);\nif(!(!(u[o]===(void 0)))){\nthrow MakeTypeError(33,\n'Array Iterator.prototype.next',this);\n}\nvar q=(u[n]);\nif((q===(void 0))){\nreturn CreateIteratorResultObject((void 0),true);\n}\nvar x=(u[o]);\nvar y=(u[p]);\nvar z=(q.length>>>0);\nif(x>=z){\n": {
        "count": 1,
        "size": 40
    },
    "\nvar $createDate;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Date;\nvar d=b.InternalArray;\nvar e;\nvar g;\nvar h;\nb.Import(function(i){\ne=i.IsFinite;\ng=i.MathAbs;\nh=i.MathFloor;\n});\nvar j=$NaN;\nvar k;\nfunction LocalTimezone(l){\nif((!%_IsSmi(%IS_VAR(l))&&!(l==l)))return\"\";\nCheckDateCacheCurrent();\nif(l==j){\nreturn k;\n}\nvar m=%DateLocalTimezone(l);\nj=l;\nk=m;\nreturn m;\n}\nfunction UTC(n){\nif((!%_IsSmi(%IS_VAR(n))&&!(n==n)))return n;\nreturn %DateToUTC(n);\n}\nfunction MakeTime(o,p,q,r){\nif(!e(o))return $NaN;\nif(!e(p))return $NaN;\nif(!e(q))return $NaN;\nif(!e(r))return $NaN;\nreturn(%_IsSmi(%IS_VAR(o))?o:%NumberToInteger($toNumber(o)))*3600000\n+(%_IsSmi(%IS_VAR(p))?p:%NumberToInteger($toNumber(p)))*60000\n+(%_IsSmi(%IS_VAR(q))?q:%NumberToInteger($toNumber(q)))*1000\n+(%_IsSmi(%IS_VAR(r))?r:%NumberToInteger($toNumber(r)));\n}\nfunction TimeInYear(t){\nreturn DaysInYear(t)*86400000;\n}\nfunction MakeDay(t,u,v){\nif(!e(t)||!e(u)||!e(v))return $NaN;\nt=(%_IsSmi(%IS_VAR(t))?t:%NumberToIntegerMapMinusZero($toNumber(t": {
        "count": 1,
        "size": 40
    },
    "\nvar $errorToString;\nvar $getStackTraceLine;\nvar $messageGetPositionInLine;\nvar $messageGetLineNumber;\nvar $messageGetSourceLine;\nvar $noSideEffectToString;\nvar $stackOverflowBoilerplate;\nvar $stackTraceSymbol;\nvar $toDetailString;\nvar $Error;\nvar $EvalError;\nvar $RangeError;\nvar $ReferenceError;\nvar $SyntaxError;\nvar $TypeError;\nvar $URIError;\nvar MakeError;\nvar MakeEvalError;\nvar MakeRangeError;\nvar MakeReferenceError;\nvar MakeSyntaxError;\nvar MakeTypeError;\nvar MakeURIError;\n(function(a,b){\n%CheckIsBootstrapping();\nvar c=a.Object;\nvar d=b.InternalArray;\nvar e=b.ObjectDefineProperty;\nvar g;\nvar h;\nvar i;\nvar j;\nvar k;\nb.Import(function(l){\ng=l.ArrayJoin;\nh=l.ObjectToString;\ni=l.StringCharAt;\nj=l.StringIndexOf;\nk=l.StringSubstring;\n});\nvar m;\nvar n;\nvar o;\nvar p;\nvar q;\nvar r;\nvar t;\nfunction NoSideEffectsObjectToString(){\nif((this===(void 0))&&!(%_IsUndetectableObject(this)))return\"[object Undefined]\";\nif((this===null))return\"[object Null]\";\nreturn\"[object \"+%_ClassOf(((%_IsSpecObject(%IS_VAR(this)))?this:$": {
        "count": 1,
        "size": 40
    },
    "\nvar $functionSourceString;\nvar $globalEval;\nvar $objectDefineOwnProperty;\nvar $objectGetOwnPropertyDescriptor;\nvar $toCompletePropertyDescriptor;\n(function(a,b){\n%CheckIsBootstrapping();\nvar c=a.Array;\nvar d=a.Boolean;\nvar e=a.Function;\nvar g=a.Number;\nvar h=a.Object;\nvar i=b.InternalArray;\nvar j;\nvar k;\nvar l;\nvar m;\nvar n;\nb.Import(function(o){\nj=o.MathAbs;\nn=o.StringIndexOf;\n});\nb.ImportFromExperimental(function(o){\nk=o.ProxyDelegateCallAndConstruct;\nl=o.ProxyDerivedHasOwnTrap;\nm=o.ProxyDerivedKeysTrap;\n});\nfunction GlobalIsNaN(p){\np=((typeof(%IS_VAR(p))==='number')?p:$nonNumberToNumber(p));\nreturn(!%_IsSmi(%IS_VAR(p))&&!(p==p));\n}\nfunction GlobalIsFinite(p){\np=((typeof(%IS_VAR(p))==='number')?p:$nonNumberToNumber(p));\nreturn(%_IsSmi(%IS_VAR(p))||((p==p)&&(p!=1/0)&&(p!=-1/0)));\n}\nfunction GlobalParseInt(q,r){\nif((r===(void 0))||r===10||r===0){\nif(%_IsSmi(q))return q;\nif((typeof(q)==='number')&&\n((0.01<q&&q<1e9)||\n(-1e9<q&&q<-0.01))){\nreturn q|0;\n}\nq=((typeof(%IS_VAR(q))==='string')?q:$nonStringToString(q)": {
        "count": 1,
        "size": 40
    },
    "\nvar $getHash;\nvar $getExistingHash;\nvar $mapSet;\nvar $mapHas;\nvar $mapDelete;\nvar $setAdd;\nvar $setHas;\nvar $setDelete;\nvar $mapFromArray;\nvar $setFromArray;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Map;\nvar d=a.Object;\nvar e=a.Set;\nvar g;\nb.Import(function(h){\ng=h.IntRandom;\n});\nvar i;\nb.Import(function(h){\ni=h.NumberIsNaN;\n});\nfunction HashToEntry(j,k,l){\nvar m=(k&((l)-1));\nreturn((%_FixedArrayGet(j,(3+(m))|0)));\n}\n%SetForceInlineFlag(HashToEntry);\nfunction SetFindEntry(j,l,n,k){\nvar o=HashToEntry(j,k,l);\nif(o===-1)return o;\nvar p=((%_FixedArrayGet(j,((3+(l)+((o)<<1)))|0)));\nif(n===p)return o;\nvar q=i(n);\nwhile(true){\nif(q&&i(p)){\nreturn o;\n}\no=((%_FixedArrayGet(j,((3+(l)+((o)<<1))+1)|0)));\nif(o===-1)return o;\np=((%_FixedArrayGet(j,((3+(l)+((o)<<1)))|0)));\nif(n===p)return o;\n}\nreturn-1;\n}\n%SetForceInlineFlag(SetFindEntry);\nfunction MapFindEntry(j,l,n,k){\nvar o=HashToEntry(j,k,l);\nif(o===-1)return o;\nvar p=((%_FixedArrayGet(j,((3+(l)+((o)*3)))|0)));\nif(n===p)return o;\nvar q=i(n);\nwhile": {
        "count": 1,
        "size": 40
    },
    "\nvar $getTemplateCallSite;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Map;\nvar d=b.InternalArray;\nvar e=new c;\nvar g=c.prototype.get;\nvar h=c.prototype.set;\nfunction SameCallSiteElements(i,j){\nvar k=i.length;\nvar j=j.raw;\nif(k!==j.length)return false;\nfor(var l=0;l<k;++l){\nif(i[l]!==j[l])return false;\n}\nreturn true;\n}\nfunction GetCachedCallSite(m,n){\nvar o=%_CallFunction(e,n,g);\nif((o===(void 0)))return;\nvar k=o.length;\nfor(var l=0;l<k;++l){\nif(SameCallSiteElements(m,o[l]))return o[l];\n}\n}\nfunction SetCachedCallSite(m,n){\nvar o=%_CallFunction(e,n,g);\nvar p;\nif((o===(void 0))){\np=new d(1);\np[0]=m;\n%_CallFunction(e,n,p,h);\n}else{\no.push(m);\n}\nreturn m;\n}\n$getTemplateCallSite=function(m,i,n){\nvar q=GetCachedCallSite(i,n);\nif(!(q===(void 0)))return q;\n%AddNamedProperty(m,\"raw\",%ObjectFreeze(i),\n1|2|4);\nreturn SetCachedCallSite(%ObjectFreeze(m),n);\n}\n})\n\n": {
        "count": 1,
        "size": 40
    },
    "\nvar $iteratorPrototype;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Object;\nfunction IteratorPrototypeIterator(){\nreturn this;\n}\nb.SetFunctionName(IteratorPrototypeIterator,symbolIterator);\n%AddNamedProperty($iteratorPrototype,symbolIterator,\nIteratorPrototypeIterator,2);\n})\n\n": {
        "count": 1,
        "size": 40
    },
    "\nvar $jsonSerializeAdapter;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.JSON;\nvar d=b.InternalArray;\nvar e;\nvar g;\nvar h;\nb.Import(function(i){\ne=i.MathMax;\ng=i.MathMin;\nh=i.ObjectHasOwnProperty;\n});\nfunction Revive(j,k,l){\nvar m=j[k];\nif((%_IsObject(m))){\nif((%_IsArray(m))){\nvar n=m.length;\nfor(var o=0;o<n;o++){\nvar p=Revive(m,%_NumberToString(o),l);\nm[o]=p;\n}\n}else{\nfor(var q in m){\nif((%_CallFunction(m,q,h))){\nvar p=Revive(m,q,l);\nif((p===(void 0))){\ndelete m[q];\n}else{\nm[q]=p;\n}\n}\n}\n}\n}\nreturn %_CallFunction(j,k,m,l);\n}\nfunction JSONParse(r,l){\nvar t=%ParseJson(((typeof(%IS_VAR(r))==='string')?r:$nonStringToString(r)));\nif((%_ClassOf(l)==='Function')){\nreturn Revive({'':t},'',l);\n}else{\nreturn t;\n}\n}\nfunction SerializeArray(u,v,w,x,y){\nif(!%PushIfAbsent(w,u))throw MakeTypeError(17);\nvar z=x;\nx+=y;\nvar A=new d();\nvar B=u.length;\nfor(var o=0;o<B;o++){\nvar C=JSONSerialize(%_NumberToString(o),u,v,w,\nx,y);\nif((C===(void 0))){\nC=\"null\";\n}\nA.push(C);\n}\nvar D;\nif(y==\"\"){\nD=\"[\"+A.join(\",\")+\"]\";\n": {
        "count": 1,
        "size": 40
    },
    "\nvar $mapEntries;\nvar $mapIteratorNext;\nvar $setIteratorNext;\nvar $setValues;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Map;\nvar d=a.Set;\nfunction SetIteratorConstructor(e,g){\n%SetIteratorInitialize(this,e,g);\n}\nfunction SetIteratorNextJS(){\nif(!(%_ClassOf(this)==='Set Iterator')){\nthrow MakeTypeError(33,\n'Set Iterator.prototype.next',this);\n}\nvar h=[(void 0),(void 0)];\nvar i={value:h,done:false};\nswitch(%SetIteratorNext(this,h)){\ncase 0:\ni.value=(void 0);\ni.done=true;\nbreak;\ncase 2:\ni.value=h[0];\nbreak;\ncase 3:\nh[1]=h[0];\nbreak;\n}\nreturn i;\n}\nfunction SetEntries(){\nif(!(%_ClassOf(this)==='Set')){\nthrow MakeTypeError(33,\n'Set.prototype.entries',this);\n}\nreturn new SetIterator(this,3);\n}\nfunction SetValues(){\nif(!(%_ClassOf(this)==='Set')){\nthrow MakeTypeError(33,\n'Set.prototype.values',this);\n}\nreturn new SetIterator(this,2);\n}\n%SetCode(SetIterator,SetIteratorConstructor);\n%FunctionSetPrototype(SetIterator,{__proto__:$iteratorPrototype});\n%FunctionSetInstanceClassName(SetIterator,'Set Ite": {
        "count": 1,
        "size": 40
    },
    "\nvar $observeNotifyChange;\nvar $observeEnqueueSpliceRecord;\nvar $observeBeginPerformSplice;\nvar $observeEndPerformSplice;\nvar $observeNativeObjectObserve;\nvar $observeNativeObjectGetNotifier;\nvar $observeNativeObjectNotifierPerformChange;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Array;\nvar d=a.Object;\nvar e=b.InternalArray;\nvar g;\nvar h;\nb.Import(function(i){\ng=i.ObjectFreeze;\nh=i.ObjectIsFrozen;\n});\nvar j;\nvar k={};\nfunction GetObservationStateJS(){\nif((j===(void 0))){\nj=%GetObservationState();\n}\nif((j.callbackInfoMap===(void 0))){\nj.callbackInfoMap=%ObservationWeakMapCreate();\nj.objectInfoMap=%ObservationWeakMapCreate();\nj.notifierObjectInfoMap=%ObservationWeakMapCreate();\nj.pendingObservers=null;\nj.nextCallbackPriority=0;\nj.lastMicrotaskId=0;\n}\nreturn j;\n}\nfunction GetPendingObservers(){\nreturn GetObservationStateJS().pendingObservers;\n}\nfunction SetPendingObservers(l){\nGetObservationStateJS().pendingObservers=l;\n}\nfunction GetNextCallbackPriority(){\nreturn GetObservationStateJS().nex": {
        "count": 1,
        "size": 40
    },
    "\nvar $promiseCreate;\nvar $promiseResolve;\nvar $promiseReject;\nvar $promiseChain;\nvar $promiseCatch;\nvar $promiseThen;\nvar $promiseHasUserDefinedRejectHandler;\nvar $promiseStatus;\nvar $promiseValue;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=b.InternalArray;\nvar d=(%CreateGlobalPrivateSymbol(\"Promise#status\"));\nvar e=(%CreateGlobalPrivateSymbol(\"Promise#value\"));\nvar g=(%CreateGlobalPrivateSymbol(\"Promise#onResolve\"));\nvar h=(%CreateGlobalPrivateSymbol(\"Promise#onReject\"));\nvar i=(%CreateGlobalPrivateSymbol(\"Promise#raw\"));\nvar j=%PromiseHasHandlerSymbol();\nvar k=0;\nvar l=function Promise(m){\nif(m===i)return;\nif(!%_IsConstructCall())throw MakeTypeError(51,this);\nif(!(%_ClassOf(m)==='Function'))\nthrow MakeTypeError(97,m);\nvar n=PromiseInit(this);\ntry{\n%DebugPushPromise(n,Promise);\nm(function(o){PromiseResolve(n,o)},\nfunction(p){PromiseReject(n,p)});\n}catch(e){\nPromiseReject(n,e);\n}finally{\n%DebugPopPromise();\n}\n}\nfunction PromiseSet(n,q,r,t,u){\n(n[d]=q);\n(n[e]=r);\n(n[g]=t);\n(n[h]=u);\nif((%_Deb": {
        "count": 1,
        "size": 40
    },
    "\nvar $regexpLastMatchInfoOverride;\nvar harmony_regexps=false;\nvar harmony_unicode_regexps=false;\n(function(a,b){\n%CheckIsBootstrapping();\nvar c=a.RegExp;\nvar d=b.InternalPackedArray;\nvar e=new d(\n2,\n\"\",\n(void 0),\n0,\n0\n);\n$regexpLastMatchInfoOverride=null;\nfunction DoConstructRegExp(g,h,i){\nif((%_IsRegExp(h))){\nif(!(i===(void 0)))throw MakeTypeError(94);\ni=(h.global?'g':'')\n+(h.ignoreCase?'i':'')\n+(h.multiline?'m':'');\nif(harmony_unicode_regexps)\ni+=(h.unicode?'u':'');\nif(harmony_regexps)\ni+=(h.sticky?'y':'');\nh=h.source;\n}\nh=(h===(void 0))?'':$toString(h);\ni=(i===(void 0))?'':$toString(i);\n%RegExpInitializeAndCompile(g,h,i);\n}\nfunction RegExpConstructor(h,i){\nif(%_IsConstructCall()){\nDoConstructRegExp(this,h,i);\n}else{\nif((%_IsRegExp(h))&&(i===(void 0))){\nreturn h;\n}\nreturn new c(h,i);\n}\n}\nfunction RegExpCompileJS(h,i){\nif(this==c.prototype){\nthrow MakeTypeError(33,\n'RegExp.prototype.compile',this);\n}\nif((h===(void 0))&&%_ArgumentsLength()!=0){\nDoConstructRegExp(this,'undefined',i);\n}else{\nDoConstructRegExp(t": {
        "count": 1,
        "size": 40
    },
    "\nvar $symbolToString;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Object;\nvar d=a.Symbol;\nvar e;\nb.Import(function(g){\ne=g.ObjectGetOwnPropertyKeys;\n});\nfunction SymbolConstructor(h){\nif(%_IsConstructCall())throw MakeTypeError(52,\"Symbol\");\nreturn %CreateSymbol((h===(void 0))?h:$toString(h));\n}\nfunction SymbolToString(){\nif(!((typeof(this)==='symbol')||(%_ClassOf(this)==='Symbol'))){\nthrow MakeTypeError(33,\n\"Symbol.prototype.toString\",this);\n}\nvar i=%SymbolDescription(%_ValueOf(this));\nreturn\"Symbol(\"+((i===(void 0))?\"\":i)+\")\";\n}\nfunction SymbolValueOf(){\nif(!((typeof(this)==='symbol')||(%_ClassOf(this)==='Symbol'))){\nthrow MakeTypeError(33,\n\"Symbol.prototype.valueOf\",this);\n}\nreturn %_ValueOf(this);\n}\nfunction SymbolFor(j){\nj=((typeof(%IS_VAR(j))==='string')?j:$nonStringToString(j));\nvar k=%SymbolRegistry();\nif((k.for[j]===(void 0))){\nvar l=%CreateSymbol(j);\nk.for[j]=l;\nk.keyFor[l]=j;\n}\nreturn k.for[j];\n}\nfunction SymbolKeyFor(l){\nif(!(typeof(l)==='symbol'))throw MakeTypeError(109,l);\nretu": {
        "count": 1,
        "size": 40
    },
    "\nvar EQUALS;\nvar STRICT_EQUALS;\nvar COMPARE;\nvar COMPARE_STRONG;\nvar ADD;\nvar ADD_STRONG;\nvar STRING_ADD_LEFT;\nvar STRING_ADD_LEFT_STRONG;\nvar STRING_ADD_RIGHT;\nvar STRING_ADD_RIGHT_STRONG;\nvar SUB;\nvar SUB_STRONG;\nvar MUL;\nvar MUL_STRONG;\nvar DIV;\nvar DIV_STRONG;\nvar MOD;\nvar MOD_STRONG;\nvar BIT_OR;\nvar BIT_OR_STRONG;\nvar BIT_AND;\nvar BIT_AND_STRONG;\nvar BIT_XOR;\nvar BIT_XOR_STRONG;\nvar SHL;\nvar SHL_STRONG;\nvar SAR;\nvar SAR_STRONG;\nvar SHR;\nvar SHR_STRONG;\nvar DELETE;\nvar IN;\nvar INSTANCE_OF;\nvar CALL_NON_FUNCTION;\nvar CALL_NON_FUNCTION_AS_CONSTRUCTOR;\nvar CALL_FUNCTION_PROXY;\nvar CALL_FUNCTION_PROXY_AS_CONSTRUCTOR;\nvar CONCAT_ITERABLE_TO_ARRAY;\nvar APPLY_PREPARE;\nvar REFLECT_APPLY_PREPARE;\nvar REFLECT_CONSTRUCT_PREPARE;\nvar STACK_OVERFLOW;\nvar TO_OBJECT;\nvar TO_NUMBER;\nvar TO_STRING;\nvar TO_NAME;\nvar StringLengthTFStub;\nvar StringAddTFStub;\nvar MathFloorStub;\nvar $defaultNumber;\nvar $defaultString;\nvar $NaN;\nvar $nonNumberToNumber;\nvar $nonStringToString;\nvar $sameValue;\nvar $sameValueZero;\nvar $toBoolean;\n": {
        "count": 1,
        "size": 40
    },
    "\nvar kMath;\nvar rempio2result;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Math;\nvar d;\nvar e;\nb.Import(function(g){\nd=g.MathAbs;\ne=g.MathExp;\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction KernelTan(h,i,j){\nvar k;\nvar l;\nvar m=%_DoubleHi(h);\nvar n=m&0x7fffffff;\nif(n<0x3e300000){\nif(((n|%_DoubleLo(h))|(j+1))==0){\nreturn 1/d(h);\n}else{\nif(j==1){\nreturn h;\n}else{\nvar l=h+i;\nvar k=%_ConstructDouble(%_DoubleHi(l),0);\nvar o=i-(k-h);\nvar p=-1/l;\nvar q=%_ConstructDouble(%_DoubleHi(p),0);\nvar r=1+q*k;\nreturn q+p*(r+q*o);\n}\n}\n}\nif(n>=0x3fe59428){\nif(h<0){\nh=-h;\ni=-i;\n}\nk=kMath[32]-h;\nl=kMath[33]-i;\nh=k+l;\ni=0;\n}\nk=h*h;\nl=k*k;\nvar t=kMath[19+1]\n+l*(kMath[19+3]\n+l*(kMath[19+5]\n+\nl*(kMath[19+7]\n+l*(kMath[19+9]\n+l*kMath[19+11]\n))));\nvar o=k*(kMath[19+2]\n+l*(kMath[19+4]\n+l*(kMath[19+6]\n+\nl*(kMath[19+8]\n+l*(kMath[19+10]\n+l*kMath[19+12]\n)))));\nvar r=k*h;\nt=i+k*(r*(t+o)+i);\nt=t+kMath[19+0]\n*r;\nl=h+t;\nif(n>=0x3fe59428){\nreturn(1-((m>>30)&2))*\n(j-2.0*(h-(l*l/(l+j)-t)));\n}\nif(j==1){\nreturn l;\n}else{\nk=%_ConstructDouble(%_D": {
        "count": 1,
        "size": 40
    },
    "\nvar rngstate;\n(function(a,b){\n\"use strict\";\n%CheckIsBootstrapping();\nvar c=a.Object;\nvar d=b.InternalArray;\nfunction MathAbs(e){\ne=+e;\nreturn(e>0)?e:0-e;\n}\nfunction MathAcosJS(e){\nreturn %_MathAcos(+e);\n}\nfunction MathAsinJS(e){\nreturn %_MathAsin(+e);\n}\nfunction MathAtanJS(e){\nreturn %_MathAtan(+e);\n}\nfunction MathAtan2JS(g,e){\ng=+g;\ne=+e;\nreturn %_MathAtan2(g,e);\n}\nfunction MathCeil(e){\nreturn-%_MathFloor(-e);\n}\nfunction MathExp(e){\nreturn %MathExpRT(((typeof(%IS_VAR(e))==='number')?e:$nonNumberToNumber(e)));\n}\nfunction MathFloorJS(e){\nreturn %_MathFloor(+e);\n}\nfunction MathLog(e){\nreturn %_MathLogRT(((typeof(%IS_VAR(e))==='number')?e:$nonNumberToNumber(e)));\n}\nfunction MathMax(h,i){\nvar j=%_ArgumentsLength();\nif(j==2){\nh=((typeof(%IS_VAR(h))==='number')?h:$nonNumberToNumber(h));\ni=((typeof(%IS_VAR(i))==='number')?i:$nonNumberToNumber(i));\nif(i>h)return i;\nif(h>i)return h;\nif(h==i){\nreturn(h===0&&%_IsMinusZero(h))?i:h;\n}\nreturn $NaN;\n}\nvar k=-(1/0);\nfor(var l=0;l<j;l++){\nvar m=%_Arguments(l);\nm=((typeof(%IS": {
        "count": 1,
        "size": 40
    },
    "\n});": {
        "count": 1,
        "size": 32
    },
    "\r": {
        "count": 1,
        "size": 32
    },
    "\r\n": {
        "count": 1,
        "size": 32
    },
    "\u001b[0m": {
        "count": 1,
        "size": 32
    },
    "\u001b[3": {
        "count": 1,
        "size": 32
    },
    " ": {
        "count": 2,
        "size": 64
    },
    "  \u001b[3": {
        "count": 1,
        "size": 32
    },
    "  \u001b[31;1mstrong-control-channel:channel \u001b[0msend msg: %s\u001b[31m +0ms\u001b[0m": {
        "count": 1,
        "size": 96
    },
    "          ": {
        "count": 1,
        "size": 40
    },
    "    at ": {
        "count": 1,
        "size": 32
    },
    " +": {
        "count": 1,
        "size": 32
    },
    " - Local (": {
        "count": 1,
        "size": 40
    },
    " CLOSE": {
        "count": 1,
        "size": 32
    },
    " COMMA": {
        "count": 1,
        "size": 32
    },
    " OPEN": {
        "count": 1,
        "size": 32
    },
    " PERIOD": {
        "count": 1,
        "size": 32
    },
    " SLASH": {
        "count": 1,
        "size": 32
    },
    " [Function": {
        "count": 1,
        "size": 40
    },
    " bytes.": {
        "count": 1,
        "size": 32
    },
    " for module ": {
        "count": 1,
        "size": 40
    },
    " from ": {
        "count": 1,
        "size": 32
    },
    " in ": {
        "count": 1,
        "size": 32
    },
    " invalid": {
        "count": 1,
        "size": 32
    },
    " parent: ": {
        "count": 1,
        "size": 40
    },
    " set ID to: ": {
        "count": 1,
        "size": 40
    },
    " \u2192 ": {
        "count": 1,
        "size": 32
    },
    "!": {
        "count": 1,
        "size": 32
    },
    "\"": {
        "count": 2,
        "size": 104
    },
    "\". Do you have a `package.json` file? ": {
        "count": 1,
        "size": 64
    },
    "#": {
        "count": 1,
        "size": 32
    },
    "# Node Application Metrics\nNode Application Metrics monitoring and profiling agent\n\nNode Application Metrics instruments the Node.js runtime for performance monitoring, providing the monitoring data via an API. \nAdditionally the data can be visualized in an Eclipse IDE using the [IBM Monitoring and Diagnostics Tools - Health Center][1] client.\n\nSee https://www.ibm.com/developerworks/java/jdk/tools/healthcenter/ for more details.\n\nNode Application Metrics provides the following built-in data collection sources:\n\n Source             | Description\n:-------------------|:-------------------------------------------\n Environment        | Machine and runtime environment information\n CPU                | Process and system CPU\n Memory             | Process and system memory usage\n GC                 | Node/V8 garbage collection statistics\n Event Loop         | Event loop latency information\n Function profiling | Node/V8 function profiling (disabled by default)\n HTTP               | HTTP request calls made of the appli": {
        "count": 1,
        "size": 31544
    },
    "# strong-cluster-control\n\nnode cluster API wrapper and extensions\n\nIt is an extension of the node cluster module, not a replacement.\n\n- runs `size` workers (optionally), and monitors them for unexpected death\n- soft shutdown as well as hard termination of workers\n- throttles worker restart rate if they are exiting abnormally\n\nIt can be added to an existing application using the node cluster module without\nmodifying how that application is currently starting up or using cluster, and\nstill make use of additional features.\n\nThis is a component of the StrongLoop process manager, see http://strong-pm.io.\n\n\n## Install\n\n    npm install --save strong-cluster-control\n\n\n## Example\n\nTo instantiate cluster-control:\n\n```javascript\nvar cluster = require('cluster');\nvar control = require('strong-cluster-control');\n\n// global setup here...\n\ncontrol.start({\n    size: control.CPUS\n}).on('error', function(er) {\n    console.error(er);\n});\n\nif(cluster.isWorker) {\n    // do work here...\n}\n```\n\n\n## API\n\nSee http://apidocs.strongloo": {
        "count": 1,
        "size": 1424
    },
    "# strong-control-channel\n\nRun-time control channel for node applications.\n\nEnables a node application to be controlled via node IPC, node cluster\nmessaging, and a local domain named socket.\n\n## Install\n\n    npm install strong-control-channel\n\n## Examples\n\nSee [strong-supervisor](http://github.com/strongloop/strong-supervisor), and\n[strong-pm](http://github.com/strongloop/strong-pm).\n": {
        "count": 1,
        "size": 416
    },
    "# strong-debugger\n\nDevTools Remote Debugging Protocol provider for Node.js and io.js.\n\n**Coming soon to [StrongLoop Arc](https://strongloop.com/node-js/arc/).**\n\nFollow [StrongLoop Blog](https://strongloop.com/strongblog/) and/or subscribe\nto [StrongLoop's Newsletter](https://strongloop.com/newsletter-registration/)\nto get notified when the debugger is available.\n\n": {
        "count": 1,
        "size": 392
    },
    "#<": {
        "count": 1,
        "size": 32
    },
    "#CPUSource\nstartCPU@#1463608397994@#0.000833209@#0.0149978\n": {
        "count": 1,
        "size": 88
    },
    "#EnvironmentSource\nenvironment.TMUX=/tmp/tmux-1001/default,9045,0\nenvironment.LANGUAGE=en_CA:en\nenvironment.PAM_KWALLET5_LOGIN=/tmp/kwallet5_sam.socket\nenvironment.USER=sam\nenvironment.OCI_HOME=/usr/local/lib/instantclient_12_1\nenvironment.SKIP_VAGRANT=y\nenvironment.XDG_SEAT=seat0\nenvironment.SSH_AGENT_PID=4608\nenvironment.XDG_SESSION_TYPE=x11\nenvironment.DEBUG=strong*\nenvironment.OCI_LIB_DIR=/usr/local/lib/instantclient_12_1\nenvironment.SHLVL=2\nenvironment.HOME=/home/sam\nenvironment.OLDPWD=/home/sam/w/sn/strong-supervisor\nenvironment.DESKTOP_SESSION=/usr/share/xsessions/xubuntu\nenvironment.NVM_BIN=/home/sam/.nvm/versions/node/v4.2.1/bin\nenvironment.NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist\nenvironment.XDG_SESSION_COOKIE=e33ee876a2cc1a7763fe875600000005-1463581515.351796-1576033104\nenvironment.OCI_INC_DIR=/usr/local/lib/instantclient_12_1/sdk/include\nenvironment.GTK_MODULES=gail:atk-bridge\nenvironment.QT_LINUX_ACCESSIBILITY_ALWAYS_ON=1\nenvironment.XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat0\nenviro": {
        "count": 1,
        "size": 4480
    },
    "#EnvironmentSource\nruntime.version=v4.2.1\nappmetrics.version=1.0.12-dev.201605181020\nagentcore.version=\nruntime.name=Node.js\nheap.size.limit=1535115264\nmax.semi.space.size=16777216\nmax.old.space.size=1468006400\nmax.heap.size=1501560832\ncommand.line.arguments=\n": {
        "count": 1,
        "size": 288
    },
    "$": {
        "count": 1,
        "size": 32
    },
    "$&": {
        "count": 1,
        "size": 32
    },
    "$'": {
        "count": 1,
        "size": 32
    },
    "$*": {
        "count": 1,
        "size": 32
    },
    "$+": {
        "count": 1,
        "size": 32
    },
    "$1": {
        "count": 1,
        "size": 32
    },
    "$1$2$3": {
        "count": 1,
        "size": 32
    },
    "$1.*?": {
        "count": 1,
        "size": 32
    },
    "$1^": {
        "count": 1,
        "size": 32
    },
    "$1~": {
        "count": 1,
        "size": 32
    },
    "$2": {
        "count": 1,
        "size": 32
    },
    "$3": {
        "count": 1,
        "size": 32
    },
    "$4": {
        "count": 1,
        "size": 32
    },
    "$5": {
        "count": 1,
        "size": 32
    },
    "$6": {
        "count": 1,
        "size": 32
    },
    "$7": {
        "count": 1,
        "size": 32
    },
    "$8": {
        "count": 1,
        "size": 32
    },
    "$9": {
        "count": 1,
        "size": 32
    },
    "$Error": {
        "count": 1,
        "size": 32
    },
    "$EvalError": {
        "count": 1,
        "size": 40
    },
    "$NaN": {
        "count": 1,
        "size": 32
    },
    "$RangeError": {
        "count": 1,
        "size": 40
    },
    "$ReferenceError": {
        "count": 1,
        "size": 40
    },
    "$SyntaxError": {
        "count": 1,
        "size": 40
    },
    "$TypeError": {
        "count": 1,
        "size": 40
    },
    "$URIError": {
        "count": 1,
        "size": 40
    },
    "$_": {
        "count": 1,
        "size": 32
    },
    "$`": {
        "count": 1,
        "size": 32
    },
    "$arrayConcat": {
        "count": 1,
        "size": 40
    },
    "$arrayPop": {
        "count": 1,
        "size": 40
    },
    "$arrayPush": {
        "count": 1,
        "size": 40
    },
    "$arrayShift": {
        "count": 1,
        "size": 40
    },
    "$arraySlice": {
        "count": 1,
        "size": 40
    },
    "$arraySplice": {
        "count": 1,
        "size": 40
    },
    "$arrayUnshift": {
        "count": 1,
        "size": 40
    },
    "$arrayValues": {
        "count": 1,
        "size": 40
    },
    "$concatIterableToArray": {
        "count": 1,
        "size": 48
    },
    "$createDate": {
        "count": 1,
        "size": 40
    },
    "$defaultNumber": {
        "count": 1,
        "size": 40
    },
    "$defaultString": {
        "count": 1,
        "size": 40
    },
    "$errorToString": {
        "count": 1,
        "size": 40
    },
    "$functionSourceString": {
        "count": 1,
        "size": 48
    },
    "$getExistingHash": {
        "count": 1,
        "size": 40
    },
    "$getHash": {
        "count": 1,
        "size": 32
    },
    "$getMaxListeners": {
        "count": 3,
        "size": 256
    },
    "$getStackTraceLine": {
        "count": 1,
        "size": 48
    },
    "$getTemplateCallSite": {
        "count": 1,
        "size": 48
    },
    "$globalEval": {
        "count": 1,
        "size": 40
    },
    "$iteratorPrototype": {
        "count": 1,
        "size": 48
    },
    "$jsonSerializeAdapter": {
        "count": 1,
        "size": 48
    },
    "$mapDelete": {
        "count": 1,
        "size": 40
    },
    "$mapEntries": {
        "count": 1,
        "size": 40
    },
    "$mapFromArray": {
        "count": 1,
        "size": 40
    },
    "$mapGet": {
        "count": 1,
        "size": 32
    },
    "$mapHas": {
        "count": 1,
        "size": 32
    },
    "$mapIteratorNext": {
        "count": 1,
        "size": 40
    },
    "$mapSet": {
        "count": 1,
        "size": 32
    },
    "$messageGetLineNumber": {
        "count": 1,
        "size": 48
    },
    "$messageGetPositionInLine": {
        "count": 1,
        "size": 56
    },
    "$messageGetSourceLine": {
        "count": 1,
        "size": 48
    },
    "$noSideEffectToString": {
        "count": 1,
        "size": 48
    },
    "$nonNumberToNumber": {
        "count": 1,
        "size": 48
    },
    "$nonStringToString": {
        "count": 1,
        "size": 48
    },
    "$objectDefineOwnProperty": {
        "count": 1,
        "size": 48
    },
    "$objectGetOwnPropertyDescriptor": {
        "count": 1,
        "size": 56
    },
    "$observeBeginPerformSplice": {
        "count": 1,
        "size": 56
    },
    "$observeEndPerformSplice": {
        "count": 1,
        "size": 48
    },
    "$observeEnqueueSpliceRecord": {
        "count": 1,
        "size": 56
    },
    "$observeNativeObjectGetNotifier": {
        "count": 1,
        "size": 56
    },
    "$observeNativeObjectNotifierPerformChange": {
        "count": 1,
        "size": 72
    },
    "$observeNativeObjectObserve": {
        "count": 1,
        "size": 56
    },
    "$observeNotifyChange": {
        "count": 1,
        "size": 48
    },
    "$promiseCatch": {
        "count": 1,
        "size": 40
    },
    "$promiseChain": {
        "count": 1,
        "size": 40
    },
    "$promiseCreate": {
        "count": 1,
        "size": 40
    },
    "$promiseHasUserDefinedRejectHandler": {
        "count": 1,
        "size": 64
    },
    "$promiseReject": {
        "count": 1,
        "size": 40
    },
    "$promiseResolve": {
        "count": 1,
        "size": 40
    },
    "$promiseStatus": {
        "count": 1,
        "size": 40
    },
    "$promiseThen": {
        "count": 1,
        "size": 40
    },
    "$promiseValue": {
        "count": 1,
        "size": 40
    },
    "$regexpLastMatchInfoOverride": {
        "count": 1,
        "size": 56
    },
    "$sameValue": {
        "count": 1,
        "size": 40
    },
    "$sameValueZero": {
        "count": 1,
        "size": 40
    },
    "$setAdd": {
        "count": 1,
        "size": 32
    },
    "$setDelete": {
        "count": 1,
        "size": 40
    },
    "$setFromArray": {
        "count": 1,
        "size": 40
    },
    "$setHas": {
        "count": 1,
        "size": 32
    },
    "$setIteratorNext": {
        "count": 1,
        "size": 40
    },
    "$setValues": {
        "count": 1,
        "size": 40
    },
    "$stackOverflowBoilerplate": {
        "count": 1,
        "size": 56
    },
    "$stackTraceSymbol": {
        "count": 1,
        "size": 48
    },
    "$symbolToString": {
        "count": 1,
        "size": 40
    },
    "$toBoolean": {
        "count": 1,
        "size": 40
    },
    "$toCompletePropertyDescriptor": {
        "count": 1,
        "size": 56
    },
    "$toDetailString": {
        "count": 1,
        "size": 40
    },
    "$toInt32": {
        "count": 1,
        "size": 32
    },
    "$toInteger": {
        "count": 1,
        "size": 40
    },
    "$toLength": {
        "count": 1,
        "size": 40
    },
    "$toName": {
        "count": 1,
        "size": 32
    },
    "$toNumber": {
        "count": 1,
        "size": 40
    },
    "$toObject": {
        "count": 1,
        "size": 40
    },
    "$toPositiveInteger": {
        "count": 1,
        "size": 48
    },
    "$toPrimitive": {
        "count": 1,
        "size": 40
    },
    "$toString": {
        "count": 1,
        "size": 40
    },
    "$toUint32": {
        "count": 1,
        "size": 40
    },
    "%": {
        "count": 1,
        "size": 32
    },
    "%%": {
        "count": 1,
        "size": 32
    },
    "%([a-z%])": {
        "count": 18,
        "size": 1264
    },
    "%00": {
        "count": 1,
        "size": 32
    },
    "%01": {
        "count": 1,
        "size": 32
    },
    "%02": {
        "count": 1,
        "size": 32
    },
    "%03": {
        "count": 1,
        "size": 32
    },
    "%04": {
        "count": 1,
        "size": 32
    },
    "%05": {
        "count": 1,
        "size": 32
    },
    "%06": {
        "count": 1,
        "size": 32
    },
    "%07": {
        "count": 1,
        "size": 32
    },
    "%08": {
        "count": 1,
        "size": 32
    },
    "%09": {
        "count": 1,
        "size": 32
    },
    "%0A": {
        "count": 1,
        "size": 32
    },
    "%0B": {
        "count": 1,
        "size": 32
    },
    "%0C": {
        "count": 1,
        "size": 32
    },
    "%0D": {
        "count": 1,
        "size": 32
    },
    "%0E": {
        "count": 1,
        "size": 32
    },
    "%0F": {
        "count": 1,
        "size": 32
    },
    "%10": {
        "count": 1,
        "size": 32
    },
    "%11": {
        "count": 1,
        "size": 32
    },
    "%12": {
        "count": 1,
        "size": 32
    },
    "%13": {
        "count": 1,
        "size": 32
    },
    "%14": {
        "count": 1,
        "size": 32
    },
    "%15": {
        "count": 1,
        "size": 32
    },
    "%16": {
        "count": 1,
        "size": 32
    },
    "%17": {
        "count": 1,
        "size": 32
    },
    "%18": {
        "count": 1,
        "size": 32
    },
    "%19": {
        "count": 1,
        "size": 32
    },
    "%1A": {
        "count": 1,
        "size": 32
    },
    "%1B": {
        "count": 1,
        "size": 32
    },
    "%1C": {
        "count": 1,
        "size": 32
    },
    "%1D": {
        "count": 1,
        "size": 32
    },
    "%1E": {
        "count": 1,
        "size": 32
    },
    "%1F": {
        "count": 1,
        "size": 32
    },
    "%20": {
        "count": 1,
        "size": 32
    },
    "%21": {
        "count": 1,
        "size": 32
    },
    "%22": {
        "count": 1,
        "size": 32
    },
    "%23": {
        "count": 2,
        "size": 64
    },
    "%24": {
        "count": 1,
        "size": 32
    },
    "%25": {
        "count": 1,
        "size": 32
    },
    "%26": {
        "count": 1,
        "size": 32
    },
    "%27": {
        "count": 1,
        "size": 32
    },
    "%28": {
        "count": 1,
        "size": 32
    },
    "%29": {
        "count": 1,
        "size": 32
    },
    "%2A": {
        "count": 1,
        "size": 32
    },
    "%2B": {
        "count": 1,
        "size": 32
    },
    "%2C": {
        "count": 1,
        "size": 32
    },
    "%2D": {
        "count": 1,
        "size": 32
    },
    "%2E": {
        "count": 1,
        "size": 32
    },
    "%2F": {
        "count": 1,
        "size": 32
    },
    "%30": {
        "count": 1,
        "size": 32
    },
    "%31": {
        "count": 1,
        "size": 32
    },
    "%32": {
        "count": 1,
        "size": 32
    },
    "%33": {
        "count": 1,
        "size": 32
    },
    "%34": {
        "count": 1,
        "size": 32
    },
    "%35": {
        "count": 1,
        "size": 32
    },
    "%36": {
        "count": 1,
        "size": 32
    },
    "%37": {
        "count": 1,
        "size": 32
    },
    "%38": {
        "count": 1,
        "size": 32
    },
    "%39": {
        "count": 1,
        "size": 32
    },
    "%3A": {
        "count": 2,
        "size": 64
    },
    "%3B": {
        "count": 1,
        "size": 32
    },
    "%3C": {
        "count": 1,
        "size": 32
    },
    "%3D": {
        "count": 1,
        "size": 32
    },
    "%3E": {
        "count": 1,
        "size": 32
    },
    "%3F": {
        "count": 1,
        "size": 32
    },
    "%40": {
        "count": 1,
        "size": 32
    },
    "%41": {
        "count": 1,
        "size": 32
    },
    "%42": {
        "count": 1,
        "size": 32
    },
    "%43": {
        "count": 1,
        "size": 32
    },
    "%44": {
        "count": 1,
        "size": 32
    },
    "%45": {
        "count": 1,
        "size": 32
    },
    "%46": {
        "count": 1,
        "size": 32
    },
    "%47": {
        "count": 1,
        "size": 32
    },
    "%48": {
        "count": 1,
        "size": 32
    },
    "%49": {
        "count": 1,
        "size": 32
    },
    "%4A": {
        "count": 1,
        "size": 32
    },
    "%4B": {
        "count": 1,
        "size": 32
    },
    "%4C": {
        "count": 1,
        "size": 32
    },
    "%4D": {
        "count": 1,
        "size": 32
    },
    "%4E": {
        "count": 1,
        "size": 32
    },
    "%4F": {
        "count": 1,
        "size": 32
    },
    "%5": {
        "count": 1,
        "size": 32
    },
    "%50": {
        "count": 1,
        "size": 32
    },
    "%51": {
        "count": 1,
        "size": 32
    },
    "%52": {
        "count": 1,
        "size": 32
    },
    "%53": {
        "count": 1,
        "size": 32
    },
    "%54": {
        "count": 1,
        "size": 32
    },
    "%55": {
        "count": 1,
        "size": 32
    },
    "%56": {
        "count": 1,
        "size": 32
    },
    "%57": {
        "count": 1,
        "size": 32
    },
    "%58": {
        "count": 1,
        "size": 32
    },
    "%59": {
        "count": 1,
        "size": 32
    },
    "%5A": {
        "count": 1,
        "size": 32
    },
    "%5B": {
        "count": 1,
        "size": 32
    },
    "%5C": {
        "count": 1,
        "size": 32
    },
    "%5D": {
        "count": 1,
        "size": 32
    },
    "%5E": {
        "count": 1,
        "size": 32
    },
    "%5F": {
        "count": 1,
        "size": 32
    },
    "%60": {
        "count": 1,
        "size": 32
    },
    "%61": {
        "count": 1,
        "size": 32
    },
    "%62": {
        "count": 1,
        "size": 32
    },
    "%63": {
        "count": 1,
        "size": 32
    },
    "%64": {
        "count": 1,
        "size": 32
    },
    "%65": {
        "count": 1,
        "size": 32
    },
    "%66": {
        "count": 1,
        "size": 32
    },
    "%67": {
        "count": 1,
        "size": 32
    },
    "%68": {
        "count": 1,
        "size": 32
    },
    "%69": {
        "count": 1,
        "size": 32
    },
    "%6A": {
        "count": 1,
        "size": 32
    },
    "%6B": {
        "count": 1,
        "size": 32
    },
    "%6C": {
        "count": 1,
        "size": 32
    },
    "%6D": {
        "count": 1,
        "size": 32
    },
    "%6E": {
        "count": 1,
        "size": 32
    },
    "%6F": {
        "count": 1,
        "size": 32
    },
    "%70": {
        "count": 1,
        "size": 32
    },
    "%71": {
        "count": 1,
        "size": 32
    },
    "%72": {
        "count": 1,
        "size": 32
    },
    "%73": {
        "count": 1,
        "size": 32
    },
    "%74": {
        "count": 1,
        "size": 32
    },
    "%75": {
        "count": 1,
        "size": 32
    },
    "%76": {
        "count": 1,
        "size": 32
    },
    "%77": {
        "count": 1,
        "size": 32
    },
    "%78": {
        "count": 1,
        "size": 32
    },
    "%79": {
        "count": 1,
        "size": 32
    },
    "%7A": {
        "count": 1,
        "size": 32
    },
    "%7B": {
        "count": 1,
        "size": 32
    },
    "%7C": {
        "count": 1,
        "size": 32
    },
    "%7D": {
        "count": 1,
        "size": 32
    },
    "%7E": {
        "count": 1,
        "size": 32
    },
    "%7F": {
        "count": 1,
        "size": 32
    },
    "%80": {
        "count": 1,
        "size": 32
    },
    "%81": {
        "count": 1,
        "size": 32
    },
    "%82": {
        "count": 1,
        "size": 32
    },
    "%83": {
        "count": 1,
        "size": 32
    },
    "%84": {
        "count": 1,
        "size": 32
    },
    "%85": {
        "count": 1,
        "size": 32
    },
    "%86": {
        "count": 1,
        "size": 32
    },
    "%87": {
        "count": 1,
        "size": 32
    },
    "%88": {
        "count": 1,
        "size": 32
    },
    "%89": {
        "count": 1,
        "size": 32
    },
    "%8A": {
        "count": 1,
        "size": 32
    },
    "%8B": {
        "count": 1,
        "size": 32
    },
    "%8C": {
        "count": 1,
        "size": 32
    },
    "%8D": {
        "count": 1,
        "size": 32
    },
    "%8E": {
        "count": 1,
        "size": 32
    },
    "%8F": {
        "count": 1,
        "size": 32
    },
    "%90": {
        "count": 1,
        "size": 32
    },
    "%91": {
        "count": 1,
        "size": 32
    },
    "%92": {
        "count": 1,
        "size": 32
    },
    "%93": {
        "count": 1,
        "size": 32
    },
    "%94": {
        "count": 1,
        "size": 32
    },
    "%95": {
        "count": 1,
        "size": 32
    },
    "%96": {
        "count": 1,
        "size": 32
    },
    "%97": {
        "count": 1,
        "size": 32
    },
    "%98": {
        "count": 1,
        "size": 32
    },
    "%99": {
        "count": 1,
        "size": 32
    },
    "%9A": {
        "count": 1,
        "size": 32
    },
    "%9B": {
        "count": 1,
        "size": 32
    },
    "%9C": {
        "count": 1,
        "size": 32
    },
    "%9D": {
        "count": 1,
        "size": 32
    },
    "%9E": {
        "count": 1,
        "size": 32
    },
    "%9F": {
        "count": 1,
        "size": 32
    },
    "%A0": {
        "count": 1,
        "size": 32
    },
    "%A1": {
        "count": 1,
        "size": 32
    },
    "%A2": {
        "count": 1,
        "size": 32
    },
    "%A3": {
        "count": 1,
        "size": 32
    },
    "%A4": {
        "count": 1,
        "size": 32
    },
    "%A5": {
        "count": 1,
        "size": 32
    },
    "%A6": {
        "count": 1,
        "size": 32
    },
    "%A7": {
        "count": 1,
        "size": 32
    },
    "%A8": {
        "count": 1,
        "size": 32
    },
    "%A9": {
        "count": 1,
        "size": 32
    },
    "%AA": {
        "count": 1,
        "size": 32
    },
    "%AB": {
        "count": 1,
        "size": 32
    },
    "%AC": {
        "count": 1,
        "size": 32
    },
    "%AD": {
        "count": 1,
        "size": 32
    },
    "%AE": {
        "count": 1,
        "size": 32
    },
    "%AF": {
        "count": 1,
        "size": 32
    },
    "%B0": {
        "count": 1,
        "size": 32
    },
    "%B1": {
        "count": 1,
        "size": 32
    },
    "%B2": {
        "count": 1,
        "size": 32
    },
    "%B3": {
        "count": 1,
        "size": 32
    },
    "%B4": {
        "count": 1,
        "size": 32
    },
    "%B5": {
        "count": 1,
        "size": 32
    },
    "%B6": {
        "count": 1,
        "size": 32
    },
    "%B7": {
        "count": 1,
        "size": 32
    },
    "%B8": {
        "count": 1,
        "size": 32
    },
    "%B9": {
        "count": 1,
        "size": 32
    },
    "%BA": {
        "count": 1,
        "size": 32
    },
    "%BB": {
        "count": 1,
        "size": 32
    },
    "%BC": {
        "count": 1,
        "size": 32
    },
    "%BD": {
        "count": 1,
        "size": 32
    },
    "%BE": {
        "count": 1,
        "size": 32
    },
    "%BF": {
        "count": 1,
        "size": 32
    },
    "%C0": {
        "count": 1,
        "size": 32
    },
    "%C1": {
        "count": 1,
        "size": 32
    },
    "%C2": {
        "count": 1,
        "size": 32
    },
    "%C3": {
        "count": 1,
        "size": 32
    },
    "%C4": {
        "count": 1,
        "size": 32
    },
    "%C5": {
        "count": 1,
        "size": 32
    },
    "%C6": {
        "count": 1,
        "size": 32
    },
    "%C7": {
        "count": 1,
        "size": 32
    },
    "%C8": {
        "count": 1,
        "size": 32
    },
    "%C9": {
        "count": 1,
        "size": 32
    },
    "%CA": {
        "count": 1,
        "size": 32
    },
    "%CB": {
        "count": 1,
        "size": 32
    },
    "%CC": {
        "count": 1,
        "size": 32
    },
    "%CD": {
        "count": 1,
        "size": 32
    },
    "%CE": {
        "count": 1,
        "size": 32
    },
    "%CF": {
        "count": 1,
        "size": 32
    },
    "%D0": {
        "count": 1,
        "size": 32
    },
    "%D1": {
        "count": 1,
        "size": 32
    },
    "%D2": {
        "count": 1,
        "size": 32
    },
    "%D3": {
        "count": 1,
        "size": 32
    },
    "%D4": {
        "count": 1,
        "size": 32
    },
    "%D5": {
        "count": 1,
        "size": 32
    },
    "%D6": {
        "count": 1,
        "size": 32
    },
    "%D7": {
        "count": 1,
        "size": 32
    },
    "%D8": {
        "count": 1,
        "size": 32
    },
    "%D9": {
        "count": 1,
        "size": 32
    },
    "%DA": {
        "count": 1,
        "size": 32
    },
    "%DB": {
        "count": 1,
        "size": 32
    },
    "%DC": {
        "count": 1,
        "size": 32
    },
    "%DD": {
        "count": 1,
        "size": 32
    },
    "%DE": {
        "count": 1,
        "size": 32
    },
    "%DF": {
        "count": 1,
        "size": 32
    },
    "%E0": {
        "count": 1,
        "size": 32
    },
    "%E1": {
        "count": 1,
        "size": 32
    },
    "%E2": {
        "count": 1,
        "size": 32
    },
    "%E3": {
        "count": 1,
        "size": 32
    },
    "%E4": {
        "count": 1,
        "size": 32
    },
    "%E5": {
        "count": 1,
        "size": 32
    },
    "%E6": {
        "count": 1,
        "size": 32
    },
    "%E7": {
        "count": 1,
        "size": 32
    },
    "%E8": {
        "count": 1,
        "size": 32
    },
    "%E9": {
        "count": 1,
        "size": 32
    },
    "%EA": {
        "count": 1,
        "size": 32
    },
    "%EB": {
        "count": 1,
        "size": 32
    },
    "%EC": {
        "count": 1,
        "size": 32
    },
    "%ED": {
        "count": 1,
        "size": 32
    },
    "%EE": {
        "count": 1,
        "size": 32
    },
    "%EF": {
        "count": 1,
        "size": 32
    },
    "%F0": {
        "count": 1,
        "size": 32
    },
    "%F1": {
        "count": 1,
        "size": 32
    },
    "%F2": {
        "count": 1,
        "size": 32
    },
    "%F3": {
        "count": 1,
        "size": 32
    },
    "%F4": {
        "count": 1,
        "size": 32
    },
    "%F5": {
        "count": 1,
        "size": 32
    },
    "%F6": {
        "count": 1,
        "size": 32
    },
    "%F7": {
        "count": 1,
        "size": 32
    },
    "%F8": {
        "count": 1,
        "size": 32
    },
    "%F9": {
        "count": 1,
        "size": 32
    },
    "%FA": {
        "count": 1,
        "size": 32
    },
    "%FB": {
        "count": 1,
        "size": 32
    },
    "%FC": {
        "count": 1,
        "size": 32
    },
    "%FD": {
        "count": 1,
        "size": 32
    },
    "%FE": {
        "count": 1,
        "size": 32
    },
    "%FF": {
        "count": 1,
        "size": 32
    },
    "%MAIN%": {
        "count": 2,
        "size": 104
    },
    "%[^%]": {
        "count": 2,
        "size": 104
    },
    "%[sdj%]": {
        "count": 3,
        "size": 176
    },
    "%a.%h.%w": {
        "count": 1,
        "size": 32
    },
    "%cell_value": {
        "count": 1,
        "size": 40
    },
    "%d": {
        "count": 1,
        "size": 32
    },
    "%d days": {
        "count": 1,
        "size": 32
    },
    "%d hours": {
        "count": 1,
        "size": 32
    },
    "%d minutes": {
        "count": 1,
        "size": 40
    },
    "%d months": {
        "count": 1,
        "size": 40
    },
    "%d years": {
        "count": 1,
        "size": 32
    },
    "%j": {
        "count": 1,
        "size": 32
    },
    "%o": {
        "count": 1,
        "size": 32
    },
    "%s": {
        "count": 1,
        "size": 32
    },
    "%s %s": {
        "count": 1,
        "size": 32
    },
    "%s ago": {
        "count": 1,
        "size": 32
    },
    "%s field must be an object": {
        "count": 1,
        "size": 56
    },
    "%s is also the name of a node core module.": {
        "count": 1,
        "size": 72
    },
    "%s metrics already configured": {
        "count": 1,
        "size": 56
    },
    "%s should probably be %s.": {
        "count": 1,
        "size": 56
    },
    "%s%s": {
        "count": 1,
        "size": 32
    },
    "%s: %dms": {
        "count": 1,
        "size": 32
    },
    "&": {
        "count": 1,
        "size": 32
    },
    "&#39;": {
        "count": 1,
        "size": 32
    },
    "&#96;": {
        "count": 1,
        "size": 32
    },
    "&(?:amp|lt|gt|quot|#39|#96);": {
        "count": 4,
        "size": 272
    },
    "&amp;": {
        "count": 1,
        "size": 32
    },
    "&gt;": {
        "count": 1,
        "size": 32
    },
    "&lt;": {
        "count": 1,
        "size": 32
    },
    "&quot;": {
        "count": 1,
        "size": 32
    },
    "'": {
        "count": 3,
        "size": 176
    },
    "'description' field should be a string": {
        "count": 1,
        "size": 64
    },
    "'repositories' (plural) Not supported. Please pick one as the 'repository' field": {
        "count": 1,
        "size": 104
    },
    "'use strict';\n\n// Re-export process as a native module\nmodule.exports = process;\n": {
        "count": 1,
        "size": 112
    },
    "'use strict';\n\n// This is a free list to avoid creating so many of the same object.\nexports.FreeList = function(name, max, constructor) {\n  this.name = name;\n  this.constructor = constructor;\n  this.max = max;\n  this.list = [];\n};\n\n\nexports.FreeList.prototype.alloc = function() {\n  return this.list.length ? this.list.shift() :\n                            this.constructor.apply(this, arguments);\n};\n\n\nexports.FreeList.prototype.free = function(obj) {\n  if (this.list.length < this.max) {\n    this.list.push(obj);\n    return true;\n  }\n  return false;\n};\n": {
        "count": 1,
        "size": 584
    },
    "'use strict';\n\n// WARNING: THIS MODULE IS PENDING DEPRECATION.\n//\n// No new pull requests targeting this module will be accepted\n// unless they address existing, critical bugs.\n\nconst util = require('util');\nconst EventEmitter = require('events');\nconst inherits = util.inherits;\n\n// communicate with events module, but don't require that\n// module to have to load this one, since this module has\n// a few side effects.\nEventEmitter.usingDomains = true;\n\n// overwrite process.domain with a getter/setter that will allow for more\n// effective optimizations\nvar _domain = [null];\nObject.defineProperty(process, 'domain', {\n  enumerable: true,\n  get: function() {\n    return _domain[0];\n  },\n  set: function(arg) {\n    return _domain[0] = arg;\n  }\n});\n\n// let the process know we're using domains\nconst _domain_flag = process._setupDomainUse(_domain);\n\nexports.Domain = Domain;\n\nexports.create = exports.createDomain = function() {\n  return new Domain();\n};\n\n// it's possible to enter one domain while already inside\n// another": {
        "count": 1,
        "size": 7640
    },
    "'use strict';\n\nconst Buffer = require('buffer').Buffer;\n\nfunction assertEncoding(encoding) {\n  // Do not cache `Buffer.isEncoding`, some modules monkey-patch it to support\n  // additional encodings\n  if (encoding && !Buffer.isEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nconst StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents ": {
        "count": 1,
        "size": 7048
    },
    "'use strict';\n\nconst Buffer = require('buffer').Buffer;\nconst Transform = require('_stream_transform');\nconst binding = process.binding('zlib');\nconst util = require('util');\nconst assert = require('assert').ok;\nconst kMaxLength = require('buffer').kMaxLength;\nconst kRangeErrorMessage = 'Cannot create final Buffer. ' +\n    'It would be larger than 0x' + kMaxLength.toString(16) + ' bytes.';\n\n// zlib doesn't provide these, so kludge them in following the same\n// const naming scheme zlib uses.\nbinding.Z_MIN_WINDOWBITS = 8;\nbinding.Z_MAX_WINDOWBITS = 15;\nbinding.Z_DEFAULT_WINDOWBITS = 15;\n\n// fewer than 64 bytes per chunk is stupid.\n// technically it could work with as few as 8, but even 64 bytes\n// is absurdly low.  Usually a MB or more is best.\nbinding.Z_MIN_CHUNK = 64;\nbinding.Z_MAX_CHUNK = Infinity;\nbinding.Z_DEFAULT_CHUNK = (16 * 1024);\n\nbinding.Z_MIN_MEMLEVEL = 1;\nbinding.Z_MAX_MEMLEVEL = 9;\nbinding.Z_DEFAULT_MEMLEVEL = 8;\n\nbinding.Z_MIN_LEVEL = -1;\nbinding.Z_MAX_LEVEL = 9;\nbinding.Z_DEFAULT_LEVEL = binding": {
        "count": 1,
        "size": 16512
    },
    "'use strict';\n\nconst EventEmitter = require('events');\nconst assert = require('assert');\nconst dgram = require('dgram');\nconst fork = require('child_process').fork;\nconst net = require('net');\nconst util = require('util');\nconst SCHED_NONE = 1;\nconst SCHED_RR = 2;\n\nconst uv = process.binding('uv');\n\nconst cluster = new EventEmitter();\nmodule.exports = cluster;\ncluster.Worker = Worker;\ncluster.isWorker = ('NODE_UNIQUE_ID' in process.env);\ncluster.isMaster = (cluster.isWorker === false);\n\n\nfunction Worker(options) {\n  if (!(this instanceof Worker))\n    return new Worker(options);\n\n  EventEmitter.call(this);\n\n  if (options === null || typeof options !== 'object')\n    options = {};\n\n  this.suicide = undefined;\n  this.state = options.state || 'none';\n  this.id = options.id | 0;\n\n  if (options.process) {\n    this.process = options.process;\n    this.process.on('error', this.emit.bind(this, 'error'));\n    this.process.on('message', this.emit.bind(this, 'message'));\n  }\n}\nutil.inherits(Worker, EventEmitter);\n\nWorker.p": {
        "count": 1,
        "size": 21040
    },
    "'use strict';\n\nconst EventEmitter = require('events');\nconst stream = require('stream');\nconst timers = require('timers');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst assert = require('assert');\nconst cares = process.binding('cares_wrap');\nconst uv = process.binding('uv');\n\nconst Buffer = require('buffer').Buffer;\nconst TTYWrap = process.binding('tty_wrap');\nconst TCP = process.binding('tcp_wrap').TCP;\nconst Pipe = process.binding('pipe_wrap').Pipe;\nconst TCPConnectWrap = process.binding('tcp_wrap').TCPConnectWrap;\nconst PipeConnectWrap = process.binding('pipe_wrap').PipeConnectWrap;\nconst ShutdownWrap = process.binding('stream_wrap').ShutdownWrap;\nconst WriteWrap = process.binding('stream_wrap').WriteWrap;\n\n\nvar cluster;\nconst errnoException = util._errnoException;\nconst exceptionWithHostPort = util._exceptionWithHostPort;\n\nfunction noop() {}\n\nfunction createHandle(fd) {\n  var type = TTYWrap.guessHandleType(fd);\n  if (type === 'PIPE') return new Pipe();\n  if (type === '": {
        "count": 1,
        "size": 40256
    },
    "'use strict';\n\nconst FreeList = require('internal/freelist').FreeList;\nconst HTTPParser = process.binding('http_parser').HTTPParser;\n\nconst incoming = require('_http_incoming');\nconst IncomingMessage = incoming.IncomingMessage;\nconst readStart = incoming.readStart;\nconst readStop = incoming.readStop;\n\nconst debug = require('util').debuglog('http');\nexports.debug = debug;\n\nexports.CRLF = '\\r\\n';\nexports.chunkExpression = /chunk/i;\nexports.continueExpression = /100-continue/i;\nexports.methods = HTTPParser.methods;\n\nconst kOnHeaders = HTTPParser.kOnHeaders | 0;\nconst kOnHeadersComplete = HTTPParser.kOnHeadersComplete | 0;\nconst kOnBody = HTTPParser.kOnBody | 0;\nconst kOnMessageComplete = HTTPParser.kOnMessageComplete | 0;\n\n// Only called in the slow case where slow means\n// that the request headers were either fragmented\n// across multiple TCP packets or too large to be\n// processed in a single run. This method is also\n// called to process trailing HTTP headers.\nfunction parserOnHeaders(headers, url) {\n  // Once": {
        "count": 1,
        "size": 5576
    },
    "'use strict';\n\nconst Interface = require('readline').Interface;\nconst REPL = require('repl');\nconst path = require('path');\nconst fs = require('fs');\nconst os = require('os');\nconst debug = require('util').debuglog('repl');\n\nmodule.exports = Object.create(REPL);\nmodule.exports.createInternalRepl = createRepl;\n\n// XXX(chrisdickinson): The 15ms debounce value is somewhat arbitrary.\n// The debounce is to guard against code pasted into the REPL.\nconst kDebounceHistoryMS = 15;\n\n// XXX(chrisdickinson): hack to make sure that the internal debugger\n// uses the original repl.\nfunction replStart() {\n  return REPL.start.apply(REPL, arguments);\n}\n\nfunction createRepl(env, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = null;\n  }\n  opts = opts || {\n    ignoreUndefined: false,\n    terminal: process.stdout.isTTY,\n    useGlobal: true\n  };\n\n  if (parseInt(env.NODE_NO_READLINE)) {\n    opts.terminal = false;\n  }\n  // the \"dumb\" special terminal, as defined by terminfo, doesn't support\n  // ANSI colour ": {
        "count": 1,
        "size": 5280
    },
    "'use strict';\n\nconst NativeModule = require('native_module');\nconst util = require('util');\nconst internalModule = require('internal/module');\nconst internalUtil = require('internal/util');\nconst runInThisContext = require('vm').runInThisContext;\nconst assert = require('assert').ok;\nconst fs = require('fs');\nconst path = require('path');\nconst internalModuleReadFile = process.binding('fs').internalModuleReadFile;\nconst internalModuleStat = process.binding('fs').internalModuleStat;\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  if (parent && parent.children) {\n    parent.children.push(this);\n  }\n\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n}\nmodule.exports = Module;\n\nModule._cache = {};\nModule.": {
        "count": 1,
        "size": 14960
    },
    "'use strict';\n\nconst StringDecoder = require('string_decoder').StringDecoder;\nconst Buffer = require('buffer').Buffer;\nconst EventEmitter = require('events');\nconst net = require('net');\nconst dgram = require('dgram');\nconst util = require('util');\nconst constants = require('constants');\nconst assert = require('assert');\n\nconst Process = process.binding('process_wrap').Process;\nconst WriteWrap = process.binding('stream_wrap').WriteWrap;\nconst uv = process.binding('uv');\nconst Pipe = process.binding('pipe_wrap').Pipe;\nconst TTY = process.binding('tty_wrap').TTY;\nconst TCP = process.binding('tcp_wrap').TCP;\nconst UDP = process.binding('udp_wrap').UDP;\nconst SocketList = require('internal/socket_list');\n\nconst errnoException = util._errnoException;\nconst SocketListSend = SocketList.SocketListSend;\nconst SocketListReceive = SocketList.SocketListReceive;\n\nmodule.exports = {\n  ChildProcess,\n  setupChannel,\n  _validateStdio,\n  getSocketList\n};\n\n// this object contain function to convert TCP objects to native handle ": {
        "count": 1,
        "size": 22104
    },
    "'use strict';\n\nconst Timer = process.binding('timer_wrap').Timer;\nconst L = require('_linklist');\nconst assert = require('assert').ok;\nconst util = require('util');\nconst debug = util.debuglog('timer');\nconst kOnTimeout = Timer.kOnTimeout | 0;\n\n// Timeout values > TIMEOUT_MAX are set to 1.\nconst TIMEOUT_MAX = 2147483647; // 2^31-1\n\n// IDLE TIMEOUTS\n//\n// Because often many sockets will have the same idle timeout we will not\n// use one timeout watcher per item. It is too much overhead.  Instead\n// we'll use a single watcher for all sockets with the same timeout value\n// and a linked list. This technique is described in the libev manual:\n// http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Be_smart_about_timeouts\n\n// Object containing all lists, timers\n// key = time in milliseconds\n// value = list\nvar lists = {};\n\n\n// call this whenever the item is active (not idle)\n// it will reset its timeout.\n// the main function - creates lists on demand and the watchers associated\n// with them.\nexports.active = function": {
        "count": 1,
        "size": 15152
    },
    "'use strict';\n\nconst assert = require('assert').ok;\nconst Stream = require('stream');\nconst timers = require('timers');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst Buffer = require('buffer').Buffer;\nconst common = require('_http_common');\n\nconst CRLF = common.CRLF;\nconst chunkExpression = common.chunkExpression;\nconst debug = common.debug;\n\nconst connectionExpression = /^Connection$/i;\nconst transferEncodingExpression = /^Transfer-Encoding$/i;\nconst closeExpression = /close/i;\nconst contentLengthExpression = /^Content-Length$/i;\nconst dateExpression = /^Date$/i;\nconst expectExpression = /^Expect$/i;\nconst trailerExpression = /^Trailer$/i;\n\nconst automaticHeaders = {\n  connection: true,\n  'content-length': true,\n  'transfer-encoding': true,\n  date: true\n};\n\n\nvar dateCache;\nfunction utcDate() {\n  if (!dateCache) {\n    var d = new Date();\n    dateCache = d.toUTCString();\n    timers.enroll(utcDate, 1000 - d.getMilliseconds());\n    timers._unrefActive(utcDate);\n  }\n  return d": {
        "count": 1,
        "size": 18904
    },
    "'use strict';\n\nconst assert = require('assert');\nconst Buffer = require('buffer').Buffer;\nconst util = require('util');\nconst EventEmitter = require('events');\nconst constants = require('constants');\n\nconst UDP = process.binding('udp_wrap').UDP;\nconst SendWrap = process.binding('udp_wrap').SendWrap;\n\nconst BIND_STATE_UNBOUND = 0;\nconst BIND_STATE_BINDING = 1;\nconst BIND_STATE_BOUND = 2;\n\n// lazily loaded\nvar cluster = null;\nvar dns = null;\n\nconst errnoException = util._errnoException;\nconst exceptionWithHostPort = util._exceptionWithHostPort;\n\nfunction lookup(address, family, callback) {\n  if (!dns)\n    dns = require('dns');\n\n  return dns.lookup(address, family, callback);\n}\n\n\nfunction lookup4(address, callback) {\n  return lookup(address || '0.0.0.0', 4, callback);\n}\n\n\nfunction lookup6(address, callback) {\n  return lookup(address || '::0', 6, callback);\n}\n\n\nfunction newHandle(type) {\n  if (type == 'udp4') {\n    var handle = new UDP();\n    handle.lookup = lookup4;\n    return handle;\n  }\n\n  if (type == 'udp6') ": {
        "count": 1,
        "size": 12176
    },
    "'use strict';\n\nconst assert = require('assert');\nconst EventEmitter = require('events');\nconst stream = require('stream');\nconst tls = require('tls');\nconst util = require('util');\nconst common = require('_tls_common');\nconst debug = util.debuglog('tls-legacy');\nconst Buffer = require('buffer').Buffer;\nconst Timer = process.binding('timer_wrap').Timer;\nvar Connection = null;\ntry {\n  Connection = process.binding('crypto').Connection;\n} catch (e) {\n  throw new Error('node.js not compiled with openssl crypto support.');\n}\n\nfunction SlabBuffer() {\n  this.create();\n}\n\n\nSlabBuffer.prototype.create = function create() {\n  this.isFull = false;\n  this.pool = new Buffer(tls.SLAB_BUFFER_SIZE);\n  this.offset = 0;\n  this.remaining = this.pool.length;\n};\n\n\nSlabBuffer.prototype.use = function use(context, fn, size) {\n  if (this.remaining === 0) {\n    this.isFull = true;\n    return 0;\n  }\n\n  var actualSize = this.remaining;\n\n  if (size !== null) actualSize = Math.min(size, actualSize);\n\n  var bytes = fn.call(context, this.po": {
        "count": 1,
        "size": 22544
    },
    "'use strict';\n\nconst assert = require('assert');\nconst crypto = require('crypto');\nconst net = require('net');\nconst tls = require('tls');\nconst util = require('util');\nconst common = require('_tls_common');\nconst StreamWrap = require('_stream_wrap').StreamWrap;\nconst Buffer = require('buffer').Buffer;\nconst Duplex = require('stream').Duplex;\nconst debug = util.debuglog('tls');\nconst Timer = process.binding('timer_wrap').Timer;\nconst tls_wrap = process.binding('tls_wrap');\nconst TCP = process.binding('tcp_wrap').TCP;\nconst Pipe = process.binding('pipe_wrap').Pipe;\n\nfunction onhandshakestart() {\n  debug('onhandshakestart');\n\n  var self = this;\n  var ssl = self._handle;\n  var now = Timer.now();\n\n  assert(now >= ssl.lastHandshakeTime);\n\n  if ((now - ssl.lastHandshakeTime) >= tls.CLIENT_RENEG_WINDOW * 1000) {\n    ssl.handshakes = 0;\n  }\n\n  var first = (ssl.lastHandshakeTime === 0);\n  ssl.lastHandshakeTime = now;\n  if (first) return;\n\n  if (++ssl.handshakes > tls.CLIENT_RENEG_LIMIT) {\n    // Defer the error event ": {
        "count": 1,
        "size": 28224
    },
    "'use strict';\n\nconst assert = require('assert');\nconst net = require('net');\nconst util = require('util');\nconst Buffer = require('buffer').Buffer;\nconst Transform = require('stream').Transform;\n\nexports.start = function start() {\n  var agent = new Agent();\n\n  // Do not let `agent.listen()` request listening from cluster master\n  const cluster = require('cluster');\n  cluster.isWorker = false;\n  cluster.isMaster = true;\n\n  agent.on('error', function(err) {\n    process._rawDebug(err.stack || err);\n  });\n\n  agent.listen(process._debugAPI.port, function() {\n    var addr = this.address();\n    process._rawDebug('Debugger listening on port %d', addr.port);\n    process._debugAPI.notifyListen();\n  });\n\n  // Just to spin-off events\n  // TODO(indutny): Figure out why node.cc isn't doing this\n  setImmediate(function() {\n  });\n\n  process._debugAPI.onclose = function() {\n    // We don't care about it, but it prevents loop from cleaning up gently\n    // NOTE: removeAllListeners won't work, as it doesn't call `removeListener": {
        "count": 1,
        "size": 4560
    },
    "'use strict';\n\nconst assert = require('assert');\nconst util = require('util');\nconst Socket = require('net').Socket;\nconst JSStream = process.binding('js_stream').JSStream;\nconst uv = process.binding('uv');\nconst debug = util.debuglog('stream_wrap');\n\nfunction StreamWrap(stream) {\n  const handle = new JSStream();\n\n  this.stream = stream;\n\n  this._list = null;\n\n  const self = this;\n  handle.close = function(cb) {\n    debug('close');\n    self.doClose(cb);\n  };\n  handle.isAlive = function() {\n    return self.isAlive();\n  };\n  handle.isClosing = function() {\n    return self.isClosing();\n  };\n  handle.onreadstart = function() {\n    return self.readStart();\n  };\n  handle.onreadstop = function() {\n    return self.readStop();\n  };\n  handle.onshutdown = function(req) {\n    return self.doShutdown(req);\n  };\n  handle.onwrite = function(req, bufs) {\n    return self.doWrite(req, bufs);\n  };\n\n  this.stream.pause();\n  this.stream.on('error', function(err) {\n    self.emit('error', err);\n  });\n  this.stream.on('data', functio": {
        "count": 1,
        "size": 4600
    },
    "'use strict';\n\nconst binding = process.binding('contextify');\nconst Script = binding.ContextifyScript;\n\n// The binding provides a few useful primitives:\n// - ContextifyScript(code, { filename = \"evalmachine.anonymous\",\n//                            displayErrors = true } = {})\n//   with methods:\n//   - runInThisContext({ displayErrors = true } = {})\n//   - runInContext(sandbox, { displayErrors = true, timeout = undefined } = {})\n// - makeContext(sandbox)\n// - isContext(sandbox)\n// From this we build the entire documented API.\n\nScript.prototype.runInNewContext = function(sandbox, options) {\n  var context = exports.createContext(sandbox);\n  return this.runInContext(context, options);\n};\n\nexports.Script = Script;\n\nexports.createScript = function(code, options) {\n  return new Script(code, options);\n};\n\nexports.createContext = function(sandbox) {\n  if (sandbox === undefined) {\n    sandbox = {};\n  } else if (binding.isContext(sandbox)) {\n    return sandbox;\n  }\n\n  binding.makeContext(sandbox);\n  return sandbox;\n};\n": {
        "count": 1,
        "size": 1656
    },
    "'use strict';\n\nconst binding = process.binding('os');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst isWindows = process.platform === 'win32';\n\nexports.hostname = binding.getHostname;\nexports.loadavg = binding.getLoadAvg;\nexports.uptime = binding.getUptime;\nexports.freemem = binding.getFreeMem;\nexports.totalmem = binding.getTotalMem;\nexports.cpus = binding.getCPUs;\nexports.type = binding.getOSType;\nexports.release = binding.getOSRelease;\nexports.networkInterfaces = binding.getInterfaceAddresses;\nexports.homedir = binding.getHomeDirectory;\n\n\nexports.arch = function() {\n  return process.arch;\n};\n\nexports.platform = function() {\n  return process.platform;\n};\n\nconst trailingSlashRe = isWindows ? /[^:]\\\\$/\n                                  : /.\\/$/;\n\nexports.tmpdir = function() {\n  var path;\n  if (isWindows) {\n    path = process.env.TEMP ||\n           process.env.TMP ||\n           (process.env.SystemRoot || process.env.windir) + '\\\\temp';\n  } else {\n    path = process.env.TMPDIR": {
        "count": 1,
        "size": 1624
    },
    "'use strict';\n\nconst constants = require('constants');\nconst tls = require('tls');\n\n// Lazily loaded\nvar crypto = null;\n\nconst binding = process.binding('crypto');\nconst NativeSecureContext = binding.SecureContext;\n\nfunction SecureContext(secureProtocol, flags, context) {\n  if (!(this instanceof SecureContext)) {\n    return new SecureContext(secureProtocol, flags, context);\n  }\n\n  if (context) {\n    this.context = context;\n  } else {\n    this.context = new NativeSecureContext();\n\n    if (secureProtocol) {\n      this.context.init(secureProtocol);\n    } else {\n      this.context.init();\n    }\n  }\n\n  if (flags) this.context.setOptions(flags);\n}\n\nexports.SecureContext = SecureContext;\n\n\nexports.createSecureContext = function createSecureContext(options, context) {\n  if (!options) options = {};\n\n  var secureOptions = options.secureOptions;\n  if (options.honorCipherOrder)\n    secureOptions |= constants.SSL_OP_CIPHER_SERVER_PREFERENCE;\n\n  var c = new SecureContext(options.secureProtocol, secureOptions, context);\n\n  ": {
        "count": 1,
        "size": 4328
    },
    "'use strict';\n\nconst net = require('net');\nconst url = require('url');\nconst util = require('util');\nconst binding = process.binding('crypto');\nconst Buffer = require('buffer').Buffer;\nconst constants = require('constants');\n\n// Allow {CLIENT_RENEG_LIMIT} client-initiated session renegotiations\n// every {CLIENT_RENEG_WINDOW} seconds. An error event is emitted if more\n// renegotations are seen. The settings are applied to all remote client\n// connections.\nexports.CLIENT_RENEG_LIMIT = 3;\nexports.CLIENT_RENEG_WINDOW = 600;\n\nexports.SLAB_BUFFER_SIZE = 10 * 1024 * 1024;\n\nexports.DEFAULT_CIPHERS = constants.defaultCipherList;\n\nexports.DEFAULT_ECDH_CURVE = 'prime256v1';\n\nexports.getCiphers = function() {\n  const names = binding.getSSLCiphers();\n  // Drop all-caps names in favor of their lowercase aliases,\n  var ctx = {};\n  names.forEach(function(name) {\n    if (/^[0-9A-Z\\-]+$/.test(name)) name = name.toLowerCase();\n    ctx[name] = true;\n  });\n  return Object.getOwnPropertyNames(ctx).sort();\n};\n\n// Convert protocols ": {
        "count": 1,
        "size": 7232
    },
    "'use strict';\n\nconst net = require('net');\nconst util = require('util');\n\nconst cares = process.binding('cares_wrap');\nconst uv = process.binding('uv');\n\nconst GetAddrInfoReqWrap = cares.GetAddrInfoReqWrap;\nconst GetNameInfoReqWrap = cares.GetNameInfoReqWrap;\nconst QueryReqWrap = cares.QueryReqWrap;\n\nconst isIp = net.isIP;\n\n\nfunction errnoException(err, syscall, hostname) {\n  // FIXME(bnoordhuis) Remove this backwards compatibility shite and pass\n  // the true error to the user. ENOTFOUND is not even a proper POSIX error!\n  if (err === uv.UV_EAI_MEMORY ||\n      err === uv.UV_EAI_NODATA ||\n      err === uv.UV_EAI_NONAME) {\n    err = 'ENOTFOUND';\n  }\n  var ex = null;\n  if (typeof err === 'string') {  // c-ares error code.\n    ex = new Error(syscall + ' ' + err + (hostname ? ' ' + hostname : ''));\n    ex.code = err;\n    ex.errno = err;\n    ex.syscall = syscall;\n  } else {\n    ex = util._errnoException(err, syscall);\n  }\n  if (hostname) {\n    ex.hostname = hostname;\n  }\n  return ex;\n}\n\n\n// c-ares invokes a callba": {
        "count": 1,
        "size": 9464
    },
    "'use strict';\n\nconst net = require('net');\nconst util = require('util');\nconst EventEmitter = require('events');\nconst debug = util.debuglog('http');\n\n// New Agent code.\n\n// The largest departure from the previous implementation is that\n// an Agent instance holds connections for a variable number of host:ports.\n// Surprisingly, this is still API compatible as far as third parties are\n// concerned. The only code that really notices the difference is the\n// request object.\n\n// Another departure is that all code related to HTTP parsing is in\n// ClientRequest.onSocket(). The Agent is now *strictly*\n// concerned with managing a connection pool.\n\nfunction Agent(options) {\n  if (!(this instanceof Agent))\n    return new Agent(options);\n\n  EventEmitter.call(this);\n\n  var self = this;\n\n  self.defaultPort = 80;\n  self.protocol = 'http:';\n\n  self.options = util._extend({}, options);\n\n  // don't confuse net and make it think that we're connecting to a pipe\n  self.options.path = null;\n  self.requests = {};\n  self.sockets =": {
        "count": 1,
        "size": 7328
    },
    "'use strict';\n\nconst prefix = '(node) ';\n\n// All the internal deprecations have to use this function only, as this will\n// prepend the prefix to the actual message.\nexports.deprecate = function(fn, msg) {\n  return exports._deprecate(fn, `${prefix}${msg}`);\n};\n\n// All the internal deprecations have to use this function only, as this will\n// prepend the prefix to the actual message.\nexports.printDeprecationMessage = function(msg, warned) {\n  return exports._printDeprecationMessage(`${prefix}${msg}`, warned);\n};\n\nexports._printDeprecationMessage = function(msg, warned) {\n  if (process.noDeprecation)\n    return true;\n\n  if (warned)\n    return warned;\n\n  if (process.throwDeprecation)\n    throw new Error(msg);\n  else if (process.traceDeprecation)\n    console.trace(msg.startsWith(prefix) ? msg.replace(prefix, '') : msg);\n  else\n    console.error(msg);\n\n  return true;\n};\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a n": {
        "count": 1,
        "size": 1536
    },
    "'use strict';\n\nconst punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nconst protocolPattern = /^([a-z0-9.+-]+:)/i;\nconst portPattern = /:[0-9]*$/;\n\n// Special case for a simple path URL\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n\n// RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\nconst delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'];\n\n// RFC 2396: characters not allowed for various reasons.\nconst unwise": {
        "count": 1,
        "size": 22528
    },
    "'use strict';\n\nconst tls = require('tls');\nconst url = require('url');\nconst http = require('http');\nconst util = require('util');\nconst inherits = util.inherits;\nconst debug = util.debuglog('https');\n\nfunction Server(opts, requestListener) {\n  if (!(this instanceof Server)) return new Server(opts, requestListener);\n\n  if (process.features.tls_npn && !opts.NPNProtocols) {\n    opts.NPNProtocols = ['http/1.1', 'http/1.0'];\n  }\n\n  tls.Server.call(this, opts, http._connectionListener);\n\n  this.httpAllowHalfOpen = false;\n\n  if (requestListener) {\n    this.addListener('request', requestListener);\n  }\n\n  this.addListener('clientError', function(err, conn) {\n    conn.destroy();\n  });\n\n  this.timeout = 2 * 60 * 1000;\n}\ninherits(Server, tls.Server);\nexports.Server = Server;\n\nServer.prototype.setTimeout = http.Server.prototype.setTimeout;\n\nexports.createServer = function(opts, requestListener) {\n  return new Server(opts, requestListener);\n};\n\n\n// HTTPS agents.\n\nfunction createConnection(port, host, options) {\n  if (port": {
        "count": 1,
        "size": 3888
    },
    "'use strict';\n\nconst util = require('internal/util');\n\n// the sys module was renamed to 'util'.\n// this shim remains to keep old programs working.\n// sys is deprecated and shouldn't be used\n\nmodule.exports = require('util');\nutil.printDeprecationMessage('sys is deprecated. Use util instead.');\n": {
        "count": 1,
        "size": 320
    },
    "'use strict';\n\nconst util = require('internal/util');\n\nmodule.exports = require('internal/freelist');\nutil.printDeprecationMessage('freelist module is deprecated.');\n": {
        "count": 1,
        "size": 192
    },
    "'use strict';\n\nconst util = require('util');\n\nfunction Console(stdout, stderr) {\n  if (!(this instanceof Console)) {\n    return new Console(stdout, stderr);\n  }\n  if (!stdout || typeof stdout.write !== 'function') {\n    throw new TypeError('Console expects a writable stream instance');\n  }\n  if (!stderr) {\n    stderr = stdout;\n  }\n  var prop = {\n    writable: true,\n    enumerable: false,\n    configurable: true\n  };\n  prop.value = stdout;\n  Object.defineProperty(this, '_stdout', prop);\n  prop.value = stderr;\n  Object.defineProperty(this, '_stderr', prop);\n  prop.value = new Map();\n  Object.defineProperty(this, '_times', prop);\n\n  // bind the prototype functions to this Console instance\n  var keys = Object.keys(Console.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var k = keys[v];\n    this[k] = this[k].bind(this);\n  }\n}\n\nConsole.prototype.log = function() {\n  this._stdout.write(util.format.apply(this, arguments) + '\\n');\n};\n\n\nConsole.prototype.info = Console.prototype.log;\n\n\nConsole.prototype.warn =": {
        "count": 1,
        "size": 2264
    },
    "'use strict';\n\nconst util = require('util');\nconst Stream = require('stream');\n\nfunction readStart(socket) {\n  if (socket && !socket._paused && socket.readable)\n    socket.resume();\n}\nexports.readStart = readStart;\n\nfunction readStop(socket) {\n  if (socket)\n    socket.pause();\n}\nexports.readStop = readStop;\n\n\n/* Abstract base class for ServerRequest and ClientResponse. */\nfunction IncomingMessage(socket) {\n  Stream.Readable.call(this);\n\n  // XXX This implementation is kind of all over the place\n  // When the parser emits body chunks, they go in this list.\n  // _read() pulls them out, and when it finds EOF, it ends.\n\n  this.socket = socket;\n  this.connection = socket;\n\n  this.httpVersionMajor = null;\n  this.httpVersionMinor = null;\n  this.httpVersion = null;\n  this.complete = false;\n  this.headers = {};\n  this.rawHeaders = [];\n  this.trailers = {};\n  this.rawTrailers = [];\n\n  this.readable = true;\n\n  this.upgrade = null;\n\n  // request (server) only\n  this.url = '';\n  this.method = null;\n\n  // response (client)": {
        "count": 1,
        "size": 4544
    },
    "'use strict';\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst EventEmitter = require('events');\n\n\nexports.IncomingMessage = require('_http_incoming').IncomingMessage;\n\n\nconst common = require('_http_common');\nexports.METHODS = common.methods.slice().sort();\n\n\nexports.OutgoingMessage = require('_http_outgoing').OutgoingMessage;\n\n\nconst server = require('_http_server');\nexports.ServerResponse = server.ServerResponse;\nexports.STATUS_CODES = server.STATUS_CODES;\n\n\nconst agent = require('_http_agent');\nconst Agent = exports.Agent = agent.Agent;\nexports.globalAgent = agent.globalAgent;\n\nconst client = require('_http_client');\nconst ClientRequest = exports.ClientRequest = client.ClientRequest;\n\nexports.request = function(options, cb) {\n  return new ClientRequest(options, cb);\n};\n\nexports.get = function(options, cb) {\n  var req = exports.request(options, cb);\n  req.end();\n  return req;\n};\n\nexports._connectionListener = server._connectionListener;\nconst Server = exports.Server = ser": {
        "count": 1,
        "size": 2640
    },
    "'use strict';\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst debug = util.debuglog('child_process');\nconst constants = require('constants');\n\nconst uv = process.binding('uv');\nconst spawn_sync = process.binding('spawn_sync');\nconst Buffer = require('buffer').Buffer;\nconst Pipe = process.binding('pipe_wrap').Pipe;\nconst child_process = require('internal/child_process');\n\nconst errnoException = util._errnoException;\nconst _validateStdio = child_process._validateStdio;\nconst setupChannel = child_process.setupChannel;\nconst ChildProcess = exports.ChildProcess = child_process.ChildProcess;\n\nexports.fork = function(modulePath /*, args, options*/) {\n\n  // Get options and args arguments.\n  var options, args, execArgv;\n  if (Array.isArray(arguments[1])) {\n    args = arguments[1];\n    options = util._extend({}, arguments[2]);\n  } else if (arguments[1] && typeof arguments[1] !== 'object') {\n    throw new TypeError('Incorrect value of args option');\n  } else {\n    args = [];\n    optio": {
        "count": 1,
        "size": 11864
    },
    "'use strict';\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst net = require('net');\nconst TTY = process.binding('tty_wrap').TTY;\nconst isTTY = process.binding('tty_wrap').isTTY;\nconst inherits = util.inherits;\nconst errnoException = util._errnoException;\n\n\nexports.isatty = function(fd) {\n  return isTTY(fd);\n};\n\n\n// backwards-compat\nexports.setRawMode = internalUtil.deprecate(function(flag) {\n  if (!process.stdin.isTTY) {\n    throw new Error('can\\'t set raw mode on non-tty');\n  }\n  process.stdin.setRawMode(flag);\n}, 'tty.setRawMode is deprecated. ' +\n   'Use process.stdin.setRawMode instead.');\n\n\nfunction ReadStream(fd, options) {\n  if (!(this instanceof ReadStream))\n    return new ReadStream(fd, options);\n\n  options = util._extend({\n    highWaterMark: 0,\n    readable: true,\n    writable: false,\n    handle: new TTY(fd, true)\n  }, options);\n\n  net.Socket.call(this, options);\n\n  this.isRaw = false;\n  this.isTTY = true;\n}\ninherits(ReadStream, net.Socket);\n\nexports.ReadStream = ": {
        "count": 1,
        "size": 2616
    },
    "'use strict';\n\nconst util = require('util');\nconst isWindows = process.platform === 'win32';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' +\n                        util.inspect(path));\n  }\n}\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  var res = [];\n  for (var i = 0; i < parts.length; i++) {\n    var p = parts[i];\n\n    // ignore empty parts\n    if (!p || p === '.')\n      continue;\n\n    if (p === '..') {\n      if (res.length && res[res.length - 1] !== '..') {\n        res.pop();\n      } else if (allowAboveRoot) {\n        res.push('..');\n      }\n    } else {\n      res.push(p);\n    }\n  }\n\n  return res;\n}\n\n// Returns an array with empty elements removed from either end of the input\n// array or the origina": {
        "count": 1,
        "size": 14960
    },
    "'use strict';\n\nconst util = require('util');\nconst net = require('net');\nconst EventEmitter = require('events');\nconst HTTPParser = process.binding('http_parser').HTTPParser;\nconst assert = require('assert').ok;\nconst common = require('_http_common');\nconst parsers = common.parsers;\nconst freeParser = common.freeParser;\nconst debug = common.debug;\nconst CRLF = common.CRLF;\nconst continueExpression = common.continueExpression;\nconst chunkExpression = common.chunkExpression;\nconst httpSocketSetup = common.httpSocketSetup;\nconst OutgoingMessage = require('_http_outgoing').OutgoingMessage;\n\nconst STATUS_CODES = exports.STATUS_CODES = {\n  100 : 'Continue',\n  101 : 'Switching Protocols',\n  102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918\n  200 : 'OK',\n  201 : 'Created',\n  202 : 'Accepted',\n  203 : 'Non-Authoritative Information',\n  204 : 'No Content',\n  205 : 'Reset Content',\n  206 : 'Partial Content',\n  207 : 'Multi-Status',               // RFC 4918\n  208 : 'Already Reported',\n  226 : 'IM Us": {
        "count": 1,
        "size": 16672
    },
    "'use strict';\n\nconst util = require('util');\nconst net = require('net');\nconst url = require('url');\nconst EventEmitter = require('events');\nconst HTTPParser = process.binding('http_parser').HTTPParser;\nconst assert = require('assert').ok;\nconst common = require('_http_common');\nconst httpSocketSetup = common.httpSocketSetup;\nconst parsers = common.parsers;\nconst freeParser = common.freeParser;\nconst debug = common.debug;\nconst OutgoingMessage = require('_http_outgoing').OutgoingMessage;\nconst Agent = require('_http_agent');\nconst Buffer = require('buffer').Buffer;\n\n\nfunction ClientRequest(options, cb) {\n  var self = this;\n  OutgoingMessage.call(self);\n\n  if (typeof options === 'string') {\n    options = url.parse(options);\n  } else {\n    options = util._extend({}, options);\n  }\n\n  var agent = options.agent;\n  var defaultAgent = options._defaultAgent || Agent.globalAgent;\n  if (agent === false) {\n    agent = new defaultAgent.constructor();\n  } else if ((agent === null || agent === undefined) &&\n             !o": {
        "count": 1,
        "size": 16264
    },
    "'use strict';\n\nconst util = require('util');\nconst path = require('path');\nconst net = require('net');\nconst vm = require('vm');\nconst Module = require('module');\nconst repl = Module.requireRepl();\nconst inherits = util.inherits;\nconst assert = require('assert');\nconst spawn = require('child_process').spawn;\nconst Buffer = require('buffer').Buffer;\n\nexports.start = function(argv, stdin, stdout) {\n  argv || (argv = process.argv.slice(2));\n\n  if (argv.length < 1) {\n    console.error('Usage: node debug script.js');\n    console.error('       node debug <host>:<port>');\n    console.error('       node debug -p <pid>');\n    process.exit(1);\n  }\n\n  // Setup input/output streams\n  stdin = stdin || process.stdin;\n  stdout = stdout || process.stdout;\n\n  var args = ['--debug-brk'].concat(argv),\n      interface_ = new Interface(stdin, stdout, args);\n\n  stdin.resume();\n\n  process.on('uncaughtException', function(e) {\n    console.error(\"There was an internal error in Node's debugger. \" +\n        'Please report this bug.');\n": {
        "count": 1,
        "size": 40576
    },
    "'use strict';\n\nconst uv = process.binding('uv');\nconst Buffer = require('buffer').Buffer;\nconst internalUtil = require('internal/util');\nconst binding = process.binding('util');\n\nvar Debug;\n\nconst formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (typeof f !== 'string') {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  if (arguments.length === 1) return f;\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n        // falls through\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n ": {
        "count": 1,
        "size": 24728
    },
    "'use strict';\n\nfunction init(list) {\n  list._idleNext = list;\n  list._idlePrev = list;\n}\nexports.init = init;\n\n\n// show the most idle item\nfunction peek(list) {\n  if (list._idlePrev == list) return null;\n  return list._idlePrev;\n}\nexports.peek = peek;\n\n\n// remove the most idle item from the list\nfunction shift(list) {\n  var first = list._idlePrev;\n  remove(first);\n  return first;\n}\nexports.shift = shift;\n\n\n// remove a item from its list\nfunction remove(item) {\n  if (item._idleNext) {\n    item._idleNext._idlePrev = item._idlePrev;\n  }\n\n  if (item._idlePrev) {\n    item._idlePrev._idleNext = item._idleNext;\n  }\n\n  item._idleNext = null;\n  item._idlePrev = null;\n}\nexports.remove = remove;\n\n\n// remove a item from its list and place at the end.\nfunction append(list, item) {\n  remove(item);\n  item._idleNext = list._idleNext;\n  list._idleNext._idlePrev = item;\n  item._idlePrev = list;\n  list._idleNext = item;\n}\nexports.append = append;\n\n\nfunction isEmpty(list) {\n  return list._idleNext === list;\n}\nexports.isEmpty = i": {
        "count": 1,
        "size": 1056
    },
    "'use strict';\n\nmodule.exports = Readable;\nReadable.ReadableState = ReadableState;\n\nconst EE = require('events');\nconst Stream = require('stream');\nconst Buffer = require('buffer').Buffer;\nconst util = require('util');\nconst debug = util.debuglog('stream');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Stream.Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buf": {
        "count": 1,
        "size": 24728
    },
    "'use strict';\n\nmodule.exports = Stream;\n\nconst EE = require('events');\nconst util = require('util');\n\nutil.inherits(Stream, EE);\nStream.Readable = require('_stream_readable');\nStream.Writable = require('_stream_writable');\nStream.Duplex = require('_stream_duplex');\nStream.Transform = require('_stream_transform');\nStream.PassThrough = require('_stream_passthrough');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplie": {
        "count": 1,
        "size": 2464
    },
    "'use strict';\n\nmodule.exports = process.binding('constants');\n": {
        "count": 1,
        "size": 88
    },
    "'use strict';\n\nmodule.exports = {SocketListSend, SocketListReceive};\n\nconst EventEmitter = require('events');\nconst util = require('util');\n\n// This object keep track of the socket there are sended\nfunction SocketListSend(slave, key) {\n  EventEmitter.call(this);\n\n  this.key = key;\n  this.slave = slave;\n}\nutil.inherits(SocketListSend, EventEmitter);\n\nSocketListSend.prototype._request = function(msg, cmd, callback) {\n  var self = this;\n\n  if (!this.slave.connected) return onclose();\n  this.slave.send(msg);\n\n  function onclose() {\n    self.slave.removeListener('internalMessage', onreply);\n    callback(new Error('Slave closed before reply'));\n  }\n\n  function onreply(msg) {\n    if (!(msg.cmd === cmd && msg.key === self.key)) return;\n    self.slave.removeListener('disconnect', onclose);\n    self.slave.removeListener('internalMessage', onreply);\n\n    callback(null, msg);\n  }\n\n  this.slave.once('disconnect', onclose);\n  this.slave.on('internalMessage', onreply);\n};\n\nSocketListSend.prototype.close = function close(cal": {
        "count": 1,
        "size": 2672
    },
    "'use strict';\n\nmodule.exports.stripBOM = stripBOM;\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n * because the buffer-to-string conversion in `fs.readFileSync()`\n * translates it to FEFF, the UTF-16 BOM.\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n": {
        "count": 1,
        "size": 392
    },
    "'use strict';\n\nvar domain;\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    domain = domain || require('domain');\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = {};\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this": {
        "count": 1,
        "size": 11336
    },
    "(": {
        "count": 1,
        "size": 32
    },
    "($^)": {
        "count": 3,
        "size": 176
    },
    "((?:<|>)?=?)": {
        "count": 2,
        "size": 112
    },
    "() { [native code] }": {
        "count": 1,
        "size": 48
    },
    "() {}": {
        "count": 1,
        "size": 32
    },
    "().*{}+?[]^$\\!": {
        "count": 1,
        "size": 40
    },
    "(.*?)(?:[\\/\\\\]+|$)": {
        "count": 1,
        "size": 48
    },
    "(.*?)(?:[\\/]+|$)": {
        "count": 5,
        "size": 328
    },
    "(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)": {
        "count": 2,
        "size": 136
    },
    "(<|>)?=?\\s*\\*": {
        "count": 2,
        "size": 112
    },
    "(?:": {
        "count": 1,
        "size": 32
    },
    "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?": {
        "count": 1,
        "size": 64
    },
    "(?:(?!(?:\\/|^)\\.).)*?": {
        "count": 1,
        "size": 48
    },
    "(?:)": {
        "count": 1,
        "size": 32
    },
    "(?:-(": {
        "count": 1,
        "size": 32
    },
    "(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))": {
        "count": 2,
        "size": 192
    },
    "(?:-?(": {
        "count": 1,
        "size": 32
    },
    "(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))": {
        "count": 2,
        "size": 184
    },
    "(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)": {
        "count": 2,
        "size": 136
    },
    "(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)": {
        "count": 2,
        "size": 136
    },
    "(?:\\+(": {
        "count": 1,
        "size": 32
    },
    "(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))": {
        "count": 2,
        "size": 144
    },
    "(?:\\.": {
        "count": 1,
        "size": 32
    },
    "(?:\\.(": {
        "count": 1,
        "size": 32
    },
    "(?:\\^)": {
        "count": 2,
        "size": 104
    },
    "(?:~>?)": {
        "count": 2,
        "size": 104
    },
    "(ArgumentsAccessStub code)": {
        "count": 3,
        "size": 1120
    },
    "(ArgumentsAdaptorTrampoline builtin)": {
        "count": 1,
        "size": 416
    },
    "(ArrayCode builtin)": {
        "count": 1,
        "size": 128
    },
    "(ArrayConcat builtin)": {
        "count": 1,
        "size": 128
    },
    "(ArrayConstructorStub code)": {
        "count": 2,
        "size": 640
    },
    "(ArrayNArgumentsConstructorStub code)": {
        "count": 8,
        "size": 4416
    },
    "(ArrayNoArgumentConstructorStub code)": {
        "count": 8,
        "size": 3680
    },
    "(ArrayPop builtin)": {
        "count": 1,
        "size": 128
    },
    "(ArrayPush builtin)": {
        "count": 1,
        "size": 128
    },
    "(ArrayShift builtin)": {
        "count": 1,
        "size": 128
    },
    "(ArraySingleArgumentConstructorStub code)": {
        "count": 8,
        "size": 4672
    },
    "(ArraySlice builtin)": {
        "count": 1,
        "size": 128
    },
    "(ArraySplice builtin)": {
        "count": 1,
        "size": 128
    },
    "(ArrayUnshift builtin)": {
        "count": 1,
        "size": 128
    },
    "(BinaryOpWithAllocationSiteStub code)": {
        "count": 6,
        "size": 6880
    },
    "(Bootstrapper)": {
        "count": 1,
        "size": 0
    },
    "(Builtins)": {
        "count": 1,
        "size": 0
    },
    "(CEntryStub code)": {
        "count": 2,
        "size": 960
    },
    "(CallApiAccessorStub code)": {
        "count": 2,
        "size": 896
    },
    "(CallApiGetterStub code)": {
        "count": 1,
        "size": 416
    },
    "(CallConstructStub code)": {
        "count": 4,
        "size": 1536
    },
    "(CallConstructStub_DebugBreak builtin)": {
        "count": 1,
        "size": 256
    },
    "(CallConstructStub_Recording_DebugBreak builtin)": {
        "count": 1,
        "size": 256
    },
    "(CallFunctionStub code)": {
        "count": 8,
        "size": 2336
    },
    "(CallFunctionStub_DebugBreak builtin)": {
        "count": 1,
        "size": 224
    },
    "(CallICStub_DebugBreak builtin)": {
        "count": 1,
        "size": 224
    },
    "(Compilation cache)": {
        "count": 1,
        "size": 0
    },
    "(CompileLazy builtin)": {
        "count": 1,
        "size": 160
    },
    "(CompileOptimized builtin)": {
        "count": 1,
        "size": 192
    },
    "(CompileOptimizedConcurrent builtin)": {
        "count": 1,
        "size": 192
    },
    "(CreateAllocationSiteStub code)": {
        "count": 1,
        "size": 512
    },
    "(CreateWeakCellStub code)": {
        "count": 1,
        "size": 448
    },
    "(Debugger)": {
        "count": 1,
        "size": 0
    },
    "(DoubleToIStub code)": {
        "count": 9,
        "size": 1728
    },
    "(ElementsTransitionAndStoreStub code)": {
        "count": 1,
        "size": 480
    },
    "(EmptyFunction builtin)": {
        "count": 1,
        "size": 128
    },
    "(Eternal handles)": {
        "count": 1,
        "size": 0
    },
    "(Extensions)": {
        "count": 1,
        "size": 0
    },
    "(External strings)": {
        "count": 1,
        "size": 0
    },
    "(FUNCTION code)": {
        "count": 387,
        "size": 710304
    },
    "(FastCloneShallowArrayStub code)": {
        "count": 1,
        "size": 1536
    },
    "(FastNewClosureStub code)": {
        "count": 4,
        "size": 3456
    },
    "(FastNewContextStub code)": {
        "count": 39,
        "size": 27392
    },
    "(FrameDropper_LiveEdit builtin)": {
        "count": 1,
        "size": 160
    },
    "(FunctionApply builtin)": {
        "count": 1,
        "size": 512
    },
    "(FunctionCall builtin)": {
        "count": 1,
        "size": 480
    },
    "(GC roots)": {
        "count": 1,
        "size": 0
    },
    "(Global handles)": {
        "count": 1,
        "size": 0
    },
    "(GrowArrayElementsStub code)": {
        "count": 1,
        "size": 800
    },
    "(Handle scope)": {
        "count": 1,
        "size": 0
    },
    "(HandleApiCall builtin)": {
        "count": 1,
        "size": 128
    },
    "(HandleApiCallAsConstructor builtin)": {
        "count": 1,
        "size": 128
    },
    "(HandleApiCallAsFunction builtin)": {
        "count": 1,
        "size": 128
    },
    "(HandleApiCallConstruct builtin)": {
        "count": 1,
        "size": 128
    },
    "(Illegal builtin)": {
        "count": 1,
        "size": 128
    },
    "(InOptimizationQueue builtin)": {
        "count": 1,
        "size": 192
    },
    "(InstanceofStub code)": {
        "count": 2,
        "size": 864
    },
    "(Internal string)": {
        "count": 1,
        "size": 0
    },
    "(InternalArrayCode builtin)": {
        "count": 1,
        "size": 128
    },
    "(InternalArrayNArgumentsConstructorStub code)": {
        "count": 2,
        "size": 960
    },
    "(InternalArrayNoArgumentConstructorStub code)": {
        "count": 2,
        "size": 896
    },
    "(InternalArraySingleArgumentConstructorStub code)": {
        "count": 2,
        "size": 1152
    },
    "(Internalized strings)": {
        "count": 1,
        "size": 0
    },
    "(InterruptCheck builtin)": {
        "count": 1,
        "size": 128
    },
    "(Isolate)": {
        "count": 1,
        "size": 0
    },
    "(JSConstructEntryTrampoline builtin)": {
        "count": 1,
        "size": 256
    },
    "(JSConstructStubApi builtin)": {
        "count": 1,
        "size": 576
    },
    "(JSConstructStubForDerived builtin)": {
        "count": 1,
        "size": 288
    },
    "(JSConstructStubGeneric builtin)": {
        "count": 1,
        "size": 704
    },
    "(JSConstructStubNewTarget builtin)": {
        "count": 1,
        "size": 704
    },
    "(JSEntryStub code)": {
        "count": 2,
        "size": 768
    },
    "(JSEntryTrampoline builtin)": {
        "count": 1,
        "size": 288
    },
    "(KeyedLoadIC_Megamorphic builtin)": {
        "count": 1,
        "size": 1056
    },
    "(KeyedLoadIC_Megamorphic_Strong builtin)": {
        "count": 1,
        "size": 1056
    },
    "(KeyedLoadIC_Miss builtin)": {
        "count": 1,
        "size": 128
    },
    "(KeyedLoadIC_Slow builtin)": {
        "count": 1,
        "size": 128
    },
    "(KeyedLoadIC_Slow_Strong builtin)": {
        "count": 1,
        "size": 128
    },
    "(KeyedStoreIC_Initialize builtin)": {
        "count": 1,
        "size": 128
    },
    "(KeyedStoreIC_Initialize_Strict builtin)": {
        "count": 1,
        "size": 128
    },
    "(KeyedStoreIC_Megamorphic builtin)": {
        "count": 1,
        "size": 3040
    },
    "(KeyedStoreIC_Megamorphic_Strict builtin)": {
        "count": 1,
        "size": 3040
    },
    "(KeyedStoreIC_Miss builtin)": {
        "count": 1,
        "size": 128
    },
    "(KeyedStoreIC_PreMonomorphic builtin)": {
        "count": 1,
        "size": 128
    },
    "(KeyedStoreIC_PreMonomorphic_Strict builtin)": {
        "count": 1,
        "size": 128
    },
    "(KeyedStoreIC_Slow builtin)": {
        "count": 1,
        "size": 128
    },
    "(LoadDictionaryElementStub code)": {
        "count": 1,
        "size": 960
    },
    "(LoadIC_Getter_ForDeopt builtin)": {
        "count": 1,
        "size": 160
    },
    "(LoadIC_Miss builtin)": {
        "count": 1,
        "size": 128
    },
    "(LoadIC_Normal builtin)": {
        "count": 1,
        "size": 288
    },
    "(LoadIC_Normal_Strong builtin)": {
        "count": 1,
        "size": 288
    },
    "(LoadIC_Slow builtin)": {
        "count": 1,
        "size": 128
    },
    "(LoadIC_Slow_Strong builtin)": {
        "count": 1,
        "size": 128
    },
    "(MakeOctogenarianCodeYoungAgainEvenMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeOctogenarianCodeYoungAgainOddMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeQuadragenarianCodeYoungAgainEvenMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeQuadragenarianCodeYoungAgainOddMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeQuinquagenarianCodeYoungAgainEvenMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeQuinquagenarianCodeYoungAgainOddMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeSeptuagenarianCodeYoungAgainEvenMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeSeptuagenarianCodeYoungAgainOddMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeSexagenarianCodeYoungAgainEvenMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MakeSexagenarianCodeYoungAgainOddMarking builtin)": {
        "count": 1,
        "size": 224
    },
    "(MarkCodeAsExecutedOnce builtin)": {
        "count": 1,
        "size": 224
    },
    "(MarkCodeAsExecutedTwice builtin)": {
        "count": 1,
        "size": 224
    },
    "(MarkCodeAsToBeExecutedOnce builtin)": {
        "count": 1,
        "size": 224
    },
    "(MathPowStub code)": {
        "count": 2,
        "size": 864
    },
    "(NameDictionaryLookupStub code)": {
        "count": 4,
        "size": 4256
    },
    "(NotifyDeoptimized builtin)": {
        "count": 1,
        "size": 224
    },
    "(NotifyLazyDeoptimized builtin)": {
        "count": 1,
        "size": 224
    },
    "(NotifySoftDeoptimized builtin)": {
        "count": 1,
        "size": 224
    },
    "(NotifyStubFailure builtin)": {
        "count": 1,
        "size": 224
    },
    "(NotifyStubFailureSaveDoubles builtin)": {
        "count": 1,
        "size": 224
    },
    "(NumberToStringStub code)": {
        "count": 1,
        "size": 512
    },
    "(OnStackReplacement builtin)": {
        "count": 1,
        "size": 192
    },
    "(OsrAfterStackCheck builtin)": {
        "count": 1,
        "size": 192
    },
    "(PlainReturn_LiveEdit builtin)": {
        "count": 1,
        "size": 128
    },
    "(RecordWriteStub code)": {
        "count": 62,
        "size": 143456
    },
    "(ReflectApply builtin)": {
        "count": 1,
        "size": 512
    },
    "(ReflectConstruct builtin)": {
        "count": 1,
        "size": 352
    },
    "(RegExpConstructResultStub code)": {
        "count": 1,
        "size": 736
    },
    "(RegExpExecStub code)": {
        "count": 1,
        "size": 928
    },
    "(Relocatable)": {
        "count": 1,
        "size": 0
    },
    "(RestrictedFunctionPropertiesThrower builtin)": {
        "count": 1,
        "size": 128
    },
    "(RestrictedStrictArgumentsPropertiesThrower builtin)": {
        "count": 1,
        "size": 128
    },
    "(Return_DebugBreak builtin)": {
        "count": 1,
        "size": 224
    },
    "(Slot_DebugBreak builtin)": {
        "count": 1,
        "size": 224
    },
    "(Smi roots)": {
        "count": 1,
        "size": 0
    },
    "(StackCheck builtin)": {
        "count": 1,
        "size": 128
    },
    "(StoreArrayLiteralElementStub code)": {
        "count": 1,
        "size": 352
    },
    "(StoreBufferOverflowStub code)": {
        "count": 2,
        "size": 608
    },
    "(StoreElementStub code)": {
        "count": 1,
        "size": 128
    },
    "(StoreFastElementStub code)": {
        "count": 16,
        "size": 10400
    },
    "(StoreIC_Miss builtin)": {
        "count": 1,
        "size": 128
    },
    "(StoreIC_Normal builtin)": {
        "count": 1,
        "size": 352
    },
    "(StoreIC_Setter_ForDeopt builtin)": {
        "count": 1,
        "size": 160
    },
    "(StoreIC_Slow builtin)": {
        "count": 1,
        "size": 128
    },
    "(StringAddStub code)": {
        "count": 2,
        "size": 2048
    },
    "(StringCompareStub code)": {
        "count": 1,
        "size": 320
    },
    "(StringConstructCode builtin)": {
        "count": 1,
        "size": 480
    },
    "(Strong roots)": {
        "count": 2,
        "size": 0
    },
    "(StubFailureTrampolineStub code)": {
        "count": 2,
        "size": 256
    },
    "(SubStringStub code)": {
        "count": 1,
        "size": 960
    },
    "(Thread manager)": {
        "count": 1,
        "size": 0
    },
    "(ToNumberStub code)": {
        "count": 1,
        "size": 224
    },
    "(TypeofStub code)": {
        "count": 1,
        "size": 448
    },
    "([0-9]+)\\.([0-9]+)\\.([0-9]+)": {
        "count": 2,
        "size": 128
    },
    "([\\+\\-]|\\d\\d)": {
        "count": 3,
        "size": 184
    },
    "(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})": {
        "count": 3,
        "size": 216
    },
    "(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)": {
        "count": 3,
        "size": 352
    },
    "(\\s*)": {
        "count": 1,
        "size": 32
    },
    "(\\s*)((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?|[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)": {
        "count": 2,
        "size": 504
    },
    "(\\s*)(?:\\^)\\s+": {
        "count": 2,
        "size": 112
    },
    "(\\s*)(?:~>?)\\s+": {
        "count": 2,
        "size": 112
    },
    "(^\"|\"$)": {
        "count": 1,
        "size": 32
    },
    "(^['\"]|['\"]$)": {
        "count": 1,
        "size": 40
    },
    "(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';": {
        "count": 3,
        "size": 200
    },
    "(anonymous function)": {
        "count": 1,
        "size": 48
    },
    "(closure)": {
        "count": 1,
        "size": 40
    },
    "(code deopt data)": {
        "count": 530,
        "size": 181552
    },
    "(code for $getMaxListeners)": {
        "count": 1,
        "size": 352
    },
    "(code for ADD)": {
        "count": 1,
        "size": 1056
    },
    "(code for API)": {
        "count": 1,
        "size": 1408
    },
    "(code for API.formatCPU)": {
        "count": 1,
        "size": 864
    },
    "(code for API.formatHeap)": {
        "count": 1,
        "size": 480
    },
    "(code for API.formatMemory)": {
        "count": 1,
        "size": 1568
    },
    "(code for API.formatOSEnv)": {
        "count": 1,
        "size": 896
    },
    "(code for API.formatRuntimeEnv)": {
        "count": 1,
        "size": 960
    },
    "(code for API.raiseEvent)": {
        "count": 1,
        "size": 1120
    },
    "(code for API.raiseLocalEvent)": {
        "count": 1,
        "size": 320
    },
    "(code for API.setEnv)": {
        "count": 1,
        "size": 800
    },
    "(code for APPLY_PREPARE)": {
        "count": 1,
        "size": 1504
    },
    "(code for Agent)": {
        "count": 2,
        "size": 2336
    },
    "(code for ArrayBuffer)": {
        "count": 1,
        "size": 512
    },
    "(code for ArrayConcatJS)": {
        "count": 1,
        "size": 896
    },
    "(code for ArrayIterator)": {
        "count": 1,
        "size": 192
    },
    "(code for ArraySlice)": {
        "count": 1,
        "size": 1696
    },
    "(code for ArrayValues)": {
        "count": 1,
        "size": 256
    },
    "(code for AxonProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for BIT_AND)": {
        "count": 1,
        "size": 704
    },
    "(code for BIT_OR)": {
        "count": 1,
        "size": 512
    },
    "(code for BIT_XOR)": {
        "count": 1,
        "size": 512
    },
    "(code for Boolean)": {
        "count": 1,
        "size": 512
    },
    "(code for Buffer)": {
        "count": 1,
        "size": 608
    },
    "(code for Buffer.isEncoding)": {
        "count": 1,
        "size": 1472
    },
    "(code for Buffer.toString)": {
        "count": 1,
        "size": 640
    },
    "(code for Buffer.write)": {
        "count": 1,
        "size": 3232
    },
    "(code for COMPARE)": {
        "count": 1,
        "size": 1472
    },
    "(code for CallSite)": {
        "count": 1,
        "size": 288
    },
    "(code for CallSiteGetFileName)": {
        "count": 1,
        "size": 352
    },
    "(code for ChildProcess)": {
        "count": 1,
        "size": 832
    },
    "(code for ChildProcess.spawn)": {
        "count": 1,
        "size": 3168
    },
    "(code for Console)": {
        "count": 1,
        "size": 1536
    },
    "(code for Console.assert)": {
        "count": 1,
        "size": 704
    },
    "(code for Console.dir)": {
        "count": 1,
        "size": 608
    },
    "(code for Console.log)": {
        "count": 1,
        "size": 480
    },
    "(code for Console.time)": {
        "count": 1,
        "size": 384
    },
    "(code for Console.timeEnd)": {
        "count": 1,
        "size": 640
    },
    "(code for Console.warn)": {
        "count": 1,
        "size": 480
    },
    "(code for ConvertDescriptorArrayToDescriptor)": {
        "count": 1,
        "size": 960
    },
    "(code for ConvertToString)": {
        "count": 1,
        "size": 544
    },
    "(code for CreateArrayIterator)": {
        "count": 1,
        "size": 416
    },
    "(code for CreateIteratorResultObject)": {
        "count": 1,
        "size": 320
    },
    "(code for DELETE)": {
        "count": 1,
        "size": 320
    },
    "(code for DIV)": {
        "count": 1,
        "size": 512
    },
    "(code for DataView)": {
        "count": 1,
        "size": 1472
    },
    "(code for Date)": {
        "count": 1,
        "size": 2976
    },
    "(code for DefaultNumber)": {
        "count": 1,
        "size": 1248
    },
    "(code for DefaultString)": {
        "count": 1,
        "size": 1248
    },
    "(code for DefineError)": {
        "count": 1,
        "size": 928
    },
    "(code for DefineError.aV)": {
        "count": 1,
        "size": 192
    },
    "(code for DefineObjectProperty)": {
        "count": 1,
        "size": 8160
    },
    "(code for DefineOwnProperty)": {
        "count": 1,
        "size": 608
    },
    "(code for DoConstructRegExp)": {
        "count": 1,
        "size": 1184
    },
    "(code for DoRegExpExec)": {
        "count": 1,
        "size": 288
    },
    "(code for Duplex)": {
        "count": 1,
        "size": 1024
    },
    "(code for EQUALS)": {
        "count": 1,
        "size": 3136
    },
    "(code for Error)": {
        "count": 1,
        "size": 608
    },
    "(code for Error.prepareStackTrace)": {
        "count": 3,
        "size": 2400
    },
    "(code for ErrorToStringDetectCycle)": {
        "count": 1,
        "size": 1152
    },
    "(code for EventEmitter)": {
        "count": 1,
        "size": 320
    },
    "(code for EventEmitter.init)": {
        "count": 1,
        "size": 1024
    },
    "(code for EventEmitter.listenerCount)": {
        "count": 1,
        "size": 448
    },
    "(code for ExpandReplacement)": {
        "count": 1,
        "size": 4320
    },
    "(code for Export)": {
        "count": 1,
        "size": 288
    },
    "(code for Float32Array)": {
        "count": 1,
        "size": 1280
    },
    "(code for Float64Array)": {
        "count": 1,
        "size": 1280
    },
    "(code for FormatMessage)": {
        "count": 1,
        "size": 480
    },
    "(code for FormatStackTrace)": {
        "count": 1,
        "size": 1856
    },
    "(code for FromPropertyDescriptor)": {
        "count": 1,
        "size": 1120
    },
    "(code for Function)": {
        "count": 1,
        "size": 512
    },
    "(code for FunctionSourceString)": {
        "count": 1,
        "size": 1120
    },
    "(code for GeneratorFunction)": {
        "count": 1,
        "size": 480
    },
    "(code for GetOwnEnumerablePropertyNames)": {
        "count": 1,
        "size": 1440
    },
    "(code for GetOwnPropertyJS)": {
        "count": 1,
        "size": 992
    },
    "(code for GetPropertyWithoutInvokingMonkeyGetters)": {
        "count": 1,
        "size": 1056
    },
    "(code for GetStackFrames)": {
        "count": 1,
        "size": 1120
    },
    "(code for HttpProbe)": {
        "count": 1,
        "size": 384
    },
    "(code for IN)": {
        "count": 1,
        "size": 704
    },
    "(code for INSTANCE_OF)": {
        "count": 1,
        "size": 896
    },
    "(code for Immediate)": {
        "count": 1,
        "size": 192
    },
    "(code for Import)": {
        "count": 1,
        "size": 288
    },
    "(code for ImportFromExperimental)": {
        "count": 1,
        "size": 288
    },
    "(code for InnerArrayFilter)": {
        "count": 1,
        "size": 1728
    },
    "(code for InnerArrayForEach)": {
        "count": 1,
        "size": 1568
    },
    "(code for InnerArrayIndexOf)": {
        "count": 1,
        "size": 2304
    },
    "(code for InnerArrayJoin)": {
        "count": 1,
        "size": 1696
    },
    "(code for InnerArrayMap)": {
        "count": 1,
        "size": 1632
    },
    "(code for InnerArrayReduce)": {
        "count": 1,
        "size": 1888
    },
    "(code for InnerArraySome)": {
        "count": 1,
        "size": 1600
    },
    "(code for InnerArraySort)": {
        "count": 1,
        "size": 1280
    },
    "(code for InnerArraySort.aC)": {
        "count": 1,
        "size": 640
    },
    "(code for InsertionSort)": {
        "count": 1,
        "size": 1056
    },
    "(code for InstallConstants)": {
        "count": 1,
        "size": 704
    },
    "(code for InstallFunctions)": {
        "count": 1,
        "size": 768
    },
    "(code for InstallGetter)": {
        "count": 1,
        "size": 448
    },
    "(code for InstallGetterSetter)": {
        "count": 1,
        "size": 480
    },
    "(code for Int16Array)": {
        "count": 1,
        "size": 1280
    },
    "(code for Int32Array)": {
        "count": 1,
        "size": 1280
    },
    "(code for Int8Array)": {
        "count": 1,
        "size": 1280
    },
    "(code for InternalBackend)": {
        "count": 1,
        "size": 352
    },
    "(code for IpcServer)": {
        "count": 1,
        "size": 192
    },
    "(code for IpcServer.sender)": {
        "count": 1,
        "size": 352
    },
    "(code for IpcServer.unref)": {
        "count": 1,
        "size": 192
    },
    "(code for IsAccessorDescriptor)": {
        "count": 1,
        "size": 416
    },
    "(code for IsDataDescriptor)": {
        "count": 1,
        "size": 416
    },
    "(code for IsGenericDescriptor)": {
        "count": 1,
        "size": 384
    },
    "(code for IsInconsistentDescriptor)": {
        "count": 1,
        "size": 320
    },
    "(code for IsPrimitive)": {
        "count": 1,
        "size": 256
    },
    "(code for Join)": {
        "count": 1,
        "size": 4544
    },
    "(code for LevelLog)": {
        "count": 1,
        "size": 704
    },
    "(code for LeveldownProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for LineStream)": {
        "count": 1,
        "size": 736
    },
    "(code for LineStream._pushBuffer)": {
        "count": 1,
        "size": 1056
    },
    "(code for LineStream._reencode)": {
        "count": 1,
        "size": 672
    },
    "(code for LineStream._transform)": {
        "count": 1,
        "size": 1792
    },
    "(code for Locale)": {
        "count": 1,
        "size": 320
    },
    "(code for Log)": {
        "count": 1,
        "size": 416
    },
    "(code for Logger)": {
        "count": 2,
        "size": 2432
    },
    "(code for MOD)": {
        "count": 1,
        "size": 512
    },
    "(code for MQLightProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for MUL)": {
        "count": 1,
        "size": 512
    },
    "(code for MakeGenericError)": {
        "count": 1,
        "size": 416
    },
    "(code for MakeRangeError)": {
        "count": 1,
        "size": 256
    },
    "(code for Map)": {
        "count": 1,
        "size": 1440
    },
    "(code for MapIterator)": {
        "count": 1,
        "size": 224
    },
    "(code for MathConstructor)": {
        "count": 1,
        "size": 192
    },
    "(code for MemcachedProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for Module)": {
        "count": 1,
        "size": 608
    },
    "(code for Module._compile)": {
        "count": 1,
        "size": 2688
    },
    "(code for Module._extensions..js)": {
        "count": 1,
        "size": 512
    },
    "(code for Module._extensions..json)": {
        "count": 1,
        "size": 736
    },
    "(code for Module._extensions..node)": {
        "count": 1,
        "size": 416
    },
    "(code for Module._findPath)": {
        "count": 1,
        "size": 3040
    },
    "(code for Module._initPaths)": {
        "count": 1,
        "size": 1792
    },
    "(code for Module._load)": {
        "count": 1,
        "size": 2176
    },
    "(code for Module._nodeModulePaths)": {
        "count": 1,
        "size": 1760
    },
    "(code for Module._resolveFilename)": {
        "count": 1,
        "size": 1088
    },
    "(code for Module._resolveLookupPaths)": {
        "count": 1,
        "size": 3456
    },
    "(code for Module.load)": {
        "count": 1,
        "size": 1280
    },
    "(code for Module.require)": {
        "count": 1,
        "size": 544
    },
    "(code for Module.runMain)": {
        "count": 1,
        "size": 480
    },
    "(code for Moment)": {
        "count": 1,
        "size": 800
    },
    "(code for MongoProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for MqttProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for MySqlProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for NativeCodeFunctionSourceString)": {
        "count": 1,
        "size": 320
    },
    "(code for NativeModule)": {
        "count": 1,
        "size": 352
    },
    "(code for NativeModule.cache)": {
        "count": 1,
        "size": 288
    },
    "(code for NativeModule.compile)": {
        "count": 1,
        "size": 704
    },
    "(code for NativeModule.exists)": {
        "count": 1,
        "size": 320
    },
    "(code for NativeModule.getCached)": {
        "count": 1,
        "size": 256
    },
    "(code for NativeModule.getSource)": {
        "count": 1,
        "size": 256
    },
    "(code for NativeModule.isInternal)": {
        "count": 1,
        "size": 288
    },
    "(code for NativeModule.nonInternalExists)": {
        "count": 1,
        "size": 416
    },
    "(code for NativeModule.require)": {
        "count": 1,
        "size": 960
    },
    "(code for NativeModule.wrap)": {
        "count": 1,
        "size": 352
    },
    "(code for NoSideEffectToString)": {
        "count": 1,
        "size": 1792
    },
    "(code for NonNumberToNumber)": {
        "count": 1,
        "size": 768
    },
    "(code for NonStringToString)": {
        "count": 1,
        "size": 672
    },
    "(code for Number)": {
        "count": 1,
        "size": 544
    },
    "(code for Object)": {
        "count": 1,
        "size": 672
    },
    "(code for Object.defineProperty.get)": {
        "count": 1,
        "size": 256
    },
    "(code for ObjectGetOwnPropertyKeys)": {
        "count": 1,
        "size": 2272
    },
    "(code for OracleDBProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for OracleProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for OverrideFunction)": {
        "count": 1,
        "size": 416
    },
    "(code for PadInt)": {
        "count": 1,
        "size": 416
    },
    "(code for Parser)": {
        "count": 1,
        "size": 608
    },
    "(code for Parser._flush)": {
        "count": 1,
        "size": 736
    },
    "(code for Parser._transform)": {
        "count": 1,
        "size": 2112
    },
    "(code for PostExperimentals)": {
        "count": 1,
        "size": 1056
    },
    "(code for PostNatives)": {
        "count": 1,
        "size": 1440
    },
    "(code for PostgresProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for Probe)": {
        "count": 1,
        "size": 416
    },
    "(code for PropertyDescriptor)": {
        "count": 1,
        "size": 544
    },
    "(code for PropertyDescriptor_GetGetter)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_GetSetter)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_GetValue)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_HasConfigurable)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_HasEnumerable)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_HasGetter)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_HasSetter)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_HasValue)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_HasWritable)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_IsConfigurable)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_IsEnumerable)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_IsWritable)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_SetConfigurable)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_SetEnumerable)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_SetGetter)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_SetSetter)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_SetValue)": {
        "count": 1,
        "size": 288
    },
    "(code for PropertyDescriptor_SetWritable)": {
        "count": 1,
        "size": 288
    },
    "(code for Protocol)": {
        "count": 1,
        "size": 448
    },
    "(code for QuickSort)": {
        "count": 1,
        "size": 3424
    },
    "(code for Readable)": {
        "count": 1,
        "size": 640
    },
    "(code for Readable.on)": {
        "count": 1,
        "size": 1120
    },
    "(code for Readable.pipe)": {
        "count": 1,
        "size": 3840
    },
    "(code for Readable.push)": {
        "count": 1,
        "size": 640
    },
    "(code for Readable.read)": {
        "count": 1,
        "size": 3232
    },
    "(code for Readable.resume)": {
        "count": 1,
        "size": 480
    },
    "(code for Readable.setEncoding)": {
        "count": 1,
        "size": 512
    },
    "(code for Readable.unpipe)": {
        "count": 1,
        "size": 1824
    },
    "(code for ReadableState)": {
        "count": 1,
        "size": 1856
    },
    "(code for RedisProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for RegExp)": {
        "count": 1,
        "size": 448
    },
    "(code for RegExpExecNoTests)": {
        "count": 1,
        "size": 1056
    },
    "(code for RegExpMakeCaptureGetter)": {
        "count": 1,
        "size": 256
    },
    "(code for RepeaterBackend)": {
        "count": 1,
        "size": 992
    },
    "(code for Revive)": {
        "count": 1,
        "size": 1600
    },
    "(code for RiakProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for RoundRobinHandle)": {
        "count": 1,
        "size": 1344
    },
    "(code for RoundRobinHandle.add)": {
        "count": 1,
        "size": 1024
    },
    "(code for RoundRobinHandle.distribute)": {
        "count": 1,
        "size": 512
    },
    "(code for RoundRobinHandle.handoff)": {
        "count": 1,
        "size": 992
    },
    "(code for SAR)": {
        "count": 1,
        "size": 704
    },
    "(code for SHL)": {
        "count": 1,
        "size": 512
    },
    "(code for SHR)": {
        "count": 1,
        "size": 512
    },
    "(code for STRICT_EQUALS)": {
        "count": 1,
        "size": 576
    },
    "(code for STRING_ADD_LEFT)": {
        "count": 1,
        "size": 896
    },
    "(code for SUB)": {
        "count": 1,
        "size": 512
    },
    "(code for SameValue)": {
        "count": 1,
        "size": 832
    },
    "(code for Script)": {
        "count": 1,
        "size": 320
    },
    "(code for Self)": {
        "count": 1,
        "size": 384
    },
    "(code for Self.send)": {
        "count": 1,
        "size": 480
    },
    "(code for Server)": {
        "count": 5,
        "size": 5504
    },
    "(code for Server._emitCloseIfDrained)": {
        "count": 1,
        "size": 704
    },
    "(code for Server._listen2)": {
        "count": 1,
        "size": 2080
    },
    "(code for Server.address)": {
        "count": 1,
        "size": 608
    },
    "(code for Server.listen)": {
        "count": 1,
        "size": 3968
    },
    "(code for Set)": {
        "count": 1,
        "size": 1248
    },
    "(code for SetFunctionName)": {
        "count": 1,
        "size": 416
    },
    "(code for SetIterator)": {
        "count": 1,
        "size": 224
    },
    "(code for SetUpLockedPrototype)": {
        "count": 1,
        "size": 1216
    },
    "(code for SimpleSlice)": {
        "count": 1,
        "size": 768
    },
    "(code for Socket)": {
        "count": 2,
        "size": 3904
    },
    "(code for Socket._destroy)": {
        "count": 1,
        "size": 2080
    },
    "(code for Socket._read)": {
        "count": 1,
        "size": 1184
    },
    "(code for Socket._write)": {
        "count": 1,
        "size": 288
    },
    "(code for Socket._writeGeneric)": {
        "count": 1,
        "size": 2624
    },
    "(code for Socket.destroy)": {
        "count": 1,
        "size": 384
    },
    "(code for Socket.destroySoon)": {
        "count": 1,
        "size": 576
    },
    "(code for Socket.end)": {
        "count": 1,
        "size": 672
    },
    "(code for Socket.read)": {
        "count": 1,
        "size": 704
    },
    "(code for Socket.unref)": {
        "count": 1,
        "size": 352
    },
    "(code for Socket.write)": {
        "count": 1,
        "size": 672
    },
    "(code for SocketChannel)": {
        "count": 1,
        "size": 1216
    },
    "(code for SocketioProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for Statsd)": {
        "count": 1,
        "size": 1856
    },
    "(code for Stream)": {
        "count": 1,
        "size": 320
    },
    "(code for Stream.pipe)": {
        "count": 1,
        "size": 1728
    },
    "(code for String)": {
        "count": 1,
        "size": 896
    },
    "(code for StringDecoder.detectIncompleteChar)": {
        "count": 1,
        "size": 1344
    },
    "(code for StringDecoder.write)": {
        "count": 1,
        "size": 2560
    },
    "(code for StringReplaceGlobalRegExpWithFunction)": {
        "count": 1,
        "size": 2432
    },
    "(code for StringSplitOnRegExp)": {
        "count": 1,
        "size": 2144
    },
    "(code for Stringifier)": {
        "count": 1,
        "size": 576
    },
    "(code for Stringifier._transform)": {
        "count": 1,
        "size": 448
    },
    "(code for StrongOracleProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for Strong_MQProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for Symbol)": {
        "count": 1,
        "size": 512
    },
    "(code for TO_NAME)": {
        "count": 1,
        "size": 320
    },
    "(code for TickObject)": {
        "count": 1,
        "size": 352
    },
    "(code for Timeout)": {
        "count": 1,
        "size": 384
    },
    "(code for Timeout.unref)": {
        "count": 1,
        "size": 1504
    },
    "(code for ToBoolean)": {
        "count": 1,
        "size": 640
    },
    "(code for ToName)": {
        "count": 1,
        "size": 288
    },
    "(code for ToNumber)": {
        "count": 1,
        "size": 832
    },
    "(code for ToObject)": {
        "count": 1,
        "size": 736
    },
    "(code for ToPositiveInteger)": {
        "count": 1,
        "size": 480
    },
    "(code for ToPrimitive)": {
        "count": 1,
        "size": 864
    },
    "(code for ToPropertyDescriptor)": {
        "count": 1,
        "size": 2304
    },
    "(code for ToString)": {
        "count": 1,
        "size": 736
    },
    "(code for ToUint32)": {
        "count": 1,
        "size": 352
    },
    "(code for TraceProbe)": {
        "count": 1,
        "size": 384
    },
    "(code for Transform)": {
        "count": 1,
        "size": 1056
    },
    "(code for Transform._read)": {
        "count": 1,
        "size": 640
    },
    "(code for Transform._write)": {
        "count": 1,
        "size": 672
    },
    "(code for Transform.push)": {
        "count": 1,
        "size": 448
    },
    "(code for TransformState)": {
        "count": 1,
        "size": 416
    },
    "(code for TransformState.afterTransform)": {
        "count": 1,
        "size": 256
    },
    "(code for TypeMapAddType)": {
        "count": 1,
        "size": 320
    },
    "(code for TypeMapCreate)": {
        "count": 1,
        "size": 256
    },
    "(code for TypeMapCreateFromList)": {
        "count": 1,
        "size": 544
    },
    "(code for Uint16Array)": {
        "count": 1,
        "size": 1280
    },
    "(code for Uint32Array)": {
        "count": 1,
        "size": 1280
    },
    "(code for Uint8Array)": {
        "count": 1,
        "size": 1280
    },
    "(code for Uint8ArrayConstructByArrayBuffer)": {
        "count": 1,
        "size": 1440
    },
    "(code for Uint8ArrayConstructByLength)": {
        "count": 1,
        "size": 736
    },
    "(code for Uint8ClampedArray)": {
        "count": 1,
        "size": 1280
    },
    "(code for Url)": {
        "count": 1,
        "size": 544
    },
    "(code for Url.format)": {
        "count": 1,
        "size": 3520
    },
    "(code for Url.parse)": {
        "count": 1,
        "size": 12224
    },
    "(code for Url.parseHost)": {
        "count": 1,
        "size": 736
    },
    "(code for UseSparseVariant)": {
        "count": 1,
        "size": 608
    },
    "(code for WeakMap)": {
        "count": 1,
        "size": 1440
    },
    "(code for WeakSet)": {
        "count": 1,
        "size": 1248
    },
    "(code for Worker)": {
        "count": 1,
        "size": 1312
    },
    "(code for Worker.send)": {
        "count": 1,
        "size": 384
    },
    "(code for Writable)": {
        "count": 1,
        "size": 896
    },
    "(code for Writable.end)": {
        "count": 1,
        "size": 832
    },
    "(code for Writable.write)": {
        "count": 1,
        "size": 864
    },
    "(code for WritableState)": {
        "count": 1,
        "size": 1664
    },
    "(code for WritableState.onwrite)": {
        "count": 1,
        "size": 256
    },
    "(code for WriteReq)": {
        "count": 1,
        "size": 288
    },
    "(code for WriteStream)": {
        "count": 1,
        "size": 864
    },
    "(code for __defineGetter__)": {
        "count": 1,
        "size": 1152
    },
    "(code for _applyEach)": {
        "count": 1,
        "size": 288
    },
    "(code for _console_fn)": {
        "count": 2,
        "size": 608
    },
    "(code for _convertCustomFds)": {
        "count": 1,
        "size": 352
    },
    "(code for _createTester)": {
        "count": 1,
        "size": 256
    },
    "(code for _each)": {
        "count": 1,
        "size": 480
    },
    "(code for _listen)": {
        "count": 1,
        "size": 320
    },
    "(code for _read)": {
        "count": 1,
        "size": 224
    },
    "(code for _recordSuicide)": {
        "count": 1,
        "size": 512
    },
    "(code for _restParam)": {
        "count": 1,
        "size": 416
    },
    "(code for _send)": {
        "count": 1,
        "size": 512
    },
    "(code for _startDelay)": {
        "count": 1,
        "size": 544
    },
    "(code for _startOneAfterDelay)": {
        "count": 1,
        "size": 480
    },
    "(code for _tickDomainCallback)": {
        "count": 1,
        "size": 2208
    },
    "(code for _times)": {
        "count": 1,
        "size": 256
    },
    "(code for _validateStdio)": {
        "count": 1,
        "size": 1600
    },
    "(code for aN)": {
        "count": 1,
        "size": 640
    },
    "(code for aS)": {
        "count": 1,
        "size": 192
    },
    "(code for abs)": {
        "count": 1,
        "size": 288
    },
    "(code for addBoundMethod)": {
        "count": 1,
        "size": 544
    },
    "(code for addFormatToken)": {
        "count": 1,
        "size": 672
    },
    "(code for addListener)": {
        "count": 1,
        "size": 1728
    },
    "(code for addParseToken)": {
        "count": 1,
        "size": 704
    },
    "(code for addRegexToken)": {
        "count": 1,
        "size": 352
    },
    "(code for addUnitAlias)": {
        "count": 1,
        "size": 352
    },
    "(code for addWeekParseToken)": {
        "count": 1,
        "size": 320
    },
    "(code for addWeekYearFormatToken)": {
        "count": 1,
        "size": 352
    },
    "(code for address)": {
        "count": 1,
        "size": 576
    },
    "(code for afterTransform)": {
        "count": 1,
        "size": 1056
    },
    "(code for afterWrite)": {
        "count": 2,
        "size": 2016
    },
    "(code for agent)": {
        "count": 1,
        "size": 512
    },
    "(code for alignPool)": {
        "count": 1,
        "size": 416
    },
    "(code for allocate)": {
        "count": 1,
        "size": 1280
    },
    "(code for append)": {
        "count": 1,
        "size": 384
    },
    "(code for appendNewline)": {
        "count": 1,
        "size": 320
    },
    "(code for arrayClone)": {
        "count": 1,
        "size": 448
    },
    "(code for arrayEach)": {
        "count": 1,
        "size": 576
    },
    "(code for arrayToHash)": {
        "count": 1,
        "size": 416
    },
    "(code for assert.ifError)": {
        "count": 1,
        "size": 256
    },
    "(code for assertEncoding)": {
        "count": 2,
        "size": 896
    },
    "(code for assertPath)": {
        "count": 1,
        "size": 480
    },
    "(code for async.each)": {
        "count": 1,
        "size": 608
    },
    "(code for asyncCallback)": {
        "count": 1,
        "size": 992
    },
    "(code for attach)": {
        "count": 4,
        "size": 3296
    },
    "(code for backend)": {
        "count": 1,
        "size": 5568
    },
    "(code for baseCallback)": {
        "count": 1,
        "size": 672
    },
    "(code for baseForOwn)": {
        "count": 1,
        "size": 256
    },
    "(code for baseFunctions)": {
        "count": 1,
        "size": 672
    },
    "(code for baseMap)": {
        "count": 1,
        "size": 576
    },
    "(code for baseProperty)": {
        "count": 1,
        "size": 256
    },
    "(code for baseSortBy)": {
        "count": 1,
        "size": 512
    },
    "(code for bind)": {
        "count": 1,
        "size": 1152
    },
    "(code for bindings)": {
        "count": 3,
        "size": 7968
    },
    "(code for bx)": {
        "count": 1,
        "size": 416
    },
    "(code for byteLength)": {
        "count": 1,
        "size": 2144
    },
    "(code for captureStackTrace)": {
        "count": 1,
        "size": 448
    },
    "(code for channel.onread)": {
        "count": 1,
        "size": 1632
    },
    "(code for charAt)": {
        "count": 1,
        "size": 1728
    },
    "(code for charCodeAt)": {
        "count": 1,
        "size": 1440
    },
    "(code for charSet)": {
        "count": 1,
        "size": 416
    },
    "(code for chdir)": {
        "count": 1,
        "size": 576
    },
    "(code for check)": {
        "count": 1,
        "size": 480
    },
    "(code for checkOverflow)": {
        "count": 1,
        "size": 2336
    },
    "(code for chownFix)": {
        "count": 2,
        "size": 576
    },
    "(code for chownFixSync)": {
        "count": 2,
        "size": 576
    },
    "(code for chunkInvalid)": {
        "count": 1,
        "size": 544
    },
    "(code for cleanup)": {
        "count": 1,
        "size": 1280
    },
    "(code for clear_metrics)": {
        "count": 1,
        "size": 4864
    },
    "(code for clone)": {
        "count": 1,
        "size": 256
    },
    "(code for cluster.fork)": {
        "count": 1,
        "size": 1696
    },
    "(code for cluster.setupMaster)": {
        "count": 1,
        "size": 2624
    },
    "(code for clusterSize)": {
        "count": 1,
        "size": 288
    },
    "(code for clusterStatus)": {
        "count": 1,
        "size": 768
    },
    "(code for coerce)": {
        "count": 1,
        "size": 384
    },
    "(code for configFromInput)": {
        "count": 1,
        "size": 1312
    },
    "(code for configure)": {
        "count": 1,
        "size": 256
    },
    "(code for copyConfig)": {
        "count": 1,
        "size": 2368
    },
    "(code for create)": {
        "count": 2,
        "size": 800
    },
    "(code for createAdder)": {
        "count": 1,
        "size": 256
    },
    "(code for createAggregator)": {
        "count": 1,
        "size": 288
    },
    "(code for createAssigner)": {
        "count": 1,
        "size": 288
    },
    "(code for createBaseEach)": {
        "count": 1,
        "size": 256
    },
    "(code for createBaseFor)": {
        "count": 1,
        "size": 256
    },
    "(code for createCompounder)": {
        "count": 1,
        "size": 256
    },
    "(code for createCpuListener)": {
        "count": 1,
        "size": 288
    },
    "(code for createCurry)": {
        "count": 1,
        "size": 288
    },
    "(code for createDefaults)": {
        "count": 1,
        "size": 288
    },
    "(code for createEventLoopListener)": {
        "count": 1,
        "size": 288
    },
    "(code for createExtremum)": {
        "count": 1,
        "size": 256
    },
    "(code for createFind)": {
        "count": 1,
        "size": 256
    },
    "(code for createFindIndex)": {
        "count": 1,
        "size": 256
    },
    "(code for createFindKey)": {
        "count": 1,
        "size": 256
    },
    "(code for createFlow)": {
        "count": 1,
        "size": 288
    },
    "(code for createForEach)": {
        "count": 1,
        "size": 256
    },
    "(code for createForIn)": {
        "count": 1,
        "size": 256
    },
    "(code for createForOwn)": {
        "count": 1,
        "size": 256
    },
    "(code for createFromConfig)": {
        "count": 1,
        "size": 544
    },
    "(code for createGCListener)": {
        "count": 1,
        "size": 288
    },
    "(code for createHTTPListener)": {
        "count": 1,
        "size": 288
    },
    "(code for createHeapListener)": {
        "count": 1,
        "size": 288
    },
    "(code for createHybridWrapper)": {
        "count": 1,
        "size": 1088
    },
    "(code for createLocalOrUTC)": {
        "count": 1,
        "size": 544
    },
    "(code for createMessageListener)": {
        "count": 1,
        "size": 416
    },
    "(code for createObjectMapper)": {
        "count": 1,
        "size": 288
    },
    "(code for createPadDir)": {
        "count": 1,
        "size": 256
    },
    "(code for createPartial)": {
        "count": 1,
        "size": 352
    },
    "(code for createPool)": {
        "count": 1,
        "size": 800
    },
    "(code for createProbeListener)": {
        "count": 1,
        "size": 352
    },
    "(code for createReduce)": {
        "count": 1,
        "size": 256
    },
    "(code for createRound)": {
        "count": 1,
        "size": 320
    },
    "(code for createServer)": {
        "count": 2,
        "size": 512
    },
    "(code for createSocket)": {
        "count": 1,
        "size": 544
    },
    "(code for createSortedIndex)": {
        "count": 1,
        "size": 256
    },
    "(code for createWorkerProcess)": {
        "count": 1,
        "size": 2464
    },
    "(code for createWritableStdioStream)": {
        "count": 1,
        "size": 1504
    },
    "(code for createWriteReq)": {
        "count": 1,
        "size": 1312
    },
    "(code for debug)": {
        "count": 2,
        "size": 736
    },
    "(code for debugs.(anonymous function))": {
        "count": 1,
        "size": 192
    },
    "(code for decodeChunk)": {
        "count": 1,
        "size": 480
    },
    "(code for defaultParsingFlags)": {
        "count": 1,
        "size": 256
    },
    "(code for defineLocale)": {
        "count": 1,
        "size": 1120
    },
    "(code for defineProperties)": {
        "count": 1,
        "size": 1312
    },
    "(code for defineProperty)": {
        "count": 1,
        "size": 1344
    },
    "(code for deprecate)": {
        "count": 1,
        "size": 352
    },
    "(code for doNTCallback0)": {
        "count": 1,
        "size": 448
    },
    "(code for doNTCallback1)": {
        "count": 1,
        "size": 448
    },
    "(code for doNTCallback2)": {
        "count": 1,
        "size": 448
    },
    "(code for doNTCallback3)": {
        "count": 1,
        "size": 448
    },
    "(code for doNTCallbackMany)": {
        "count": 1,
        "size": 480
    },
    "(code for doParallel)": {
        "count": 2,
        "size": 544
    },
    "(code for doParallelLimit)": {
        "count": 1,
        "size": 256
    },
    "(code for doSeries)": {
        "count": 2,
        "size": 544
    },
    "(code for doWrite)": {
        "count": 1,
        "size": 576
    },
    "(code for done)": {
        "count": 3,
        "size": 2048
    },
    "(code for duplex)": {
        "count": 1,
        "size": 1120
    },
    "(code for each)": {
        "count": 1,
        "size": 288
    },
    "(code for emit)": {
        "count": 1,
        "size": 2656
    },
    "(code for emitFlush)": {
        "count": 1,
        "size": 320
    },
    "(code for emitForkNT)": {
        "count": 1,
        "size": 320
    },
    "(code for emitListeningNT)": {
        "count": 1,
        "size": 320
    },
    "(code for emitNone)": {
        "count": 1,
        "size": 672
    },
    "(code for emitOne)": {
        "count": 1,
        "size": 672
    },
    "(code for emitPendingUnhandledRejections)": {
        "count": 1,
        "size": 896
    },
    "(code for emitReadable)": {
        "count": 1,
        "size": 672
    },
    "(code for emitReadable_)": {
        "count": 1,
        "size": 416
    },
    "(code for emitTwo)": {
        "count": 1,
        "size": 704
    },
    "(code for enable)": {
        "count": 1,
        "size": 1952
    },
    "(code for enabled)": {
        "count": 2,
        "size": 3648
    },
    "(code for endReadable)": {
        "count": 1,
        "size": 608
    },
    "(code for endReadableNT)": {
        "count": 1,
        "size": 448
    },
    "(code for endWritable)": {
        "count": 1,
        "size": 544
    },
    "(code for error)": {
        "count": 1,
        "size": 448
    },
    "(code for events)": {
        "count": 1,
        "size": 448
    },
    "(code for exec)": {
        "count": 1,
        "size": 1952
    },
    "(code for expandScope)": {
        "count": 1,
        "size": 768
    },
    "(code for exports.FreeList)": {
        "count": 1,
        "size": 320
    },
    "(code for exports.StringDecoder)": {
        "count": 1,
        "size": 1312
    },
    "(code for exports._createServerHandle)": {
        "count": 1,
        "size": 2432
    },
    "(code for exports._deprecate)": {
        "count": 1,
        "size": 544
    },
    "(code for exports._errnoException)": {
        "count": 1,
        "size": 576
    },
    "(code for exports._exceptionWithHostPort)": {
        "count": 1,
        "size": 544
    },
    "(code for exports._extend)": {
        "count": 1,
        "size": 672
    },
    "(code for exports._forkChild)": {
        "count": 1,
        "size": 864
    },
    "(code for exports._unrefActive)": {
        "count": 1,
        "size": 2048
    },
    "(code for exports.active)": {
        "count": 1,
        "size": 1248
    },
    "(code for exports.after)": {
        "count": 1,
        "size": 512
    },
    "(code for exports.arch)": {
        "count": 1,
        "size": 256
    },
    "(code for exports.createServer)": {
        "count": 1,
        "size": 256
    },
    "(code for exports.createSocket)": {
        "count": 1,
        "size": 256
    },
    "(code for exports.debuglog)": {
        "count": 1,
        "size": 1120
    },
    "(code for exports.deprecate)": {
        "count": 1,
        "size": 512
    },
    "(code for exports.expand)": {
        "count": 1,
        "size": 320
    },
    "(code for exports.fork)": {
        "count": 1,
        "size": 1728
    },
    "(code for exports.format)": {
        "count": 1,
        "size": 2112
    },
    "(code for exports.fromSocket)": {
        "count": 1,
        "size": 256
    },
    "(code for exports.inherits)": {
        "count": 1,
        "size": 1056
    },
    "(code for exports.init)": {
        "count": 1,
        "size": 416
    },
    "(code for exports.isatty)": {
        "count": 1,
        "size": 288
    },
    "(code for exports.master)": {
        "count": 3,
        "size": 1056
    },
    "(code for exports.notifyStarted)": {
        "count": 1,
        "size": 928
    },
    "(code for exports.platform)": {
        "count": 1,
        "size": 256
    },
    "(code for exports.runInThisContext)": {
        "count": 1,
        "size": 384
    },
    "(code for exports.setImmediate)": {
        "count": 1,
        "size": 2080
    },
    "(code for exports.setInterval)": {
        "count": 1,
        "size": 2368
    },
    "(code for exports.spawn)": {
        "count": 1,
        "size": 1216
    },
    "(code for exports.start)": {
        "count": 1,
        "size": 736
    },
    "(code for exports.unenroll)": {
        "count": 1,
        "size": 864
    },
    "(code for exports.worker)": {
        "count": 1,
        "size": 480
    },
    "(code for extend)": {
        "count": 1,
        "size": 1088
    },
    "(code for filter)": {
        "count": 1,
        "size": 736
    },
    "(code for finishMaybe)": {
        "count": 1,
        "size": 576
    },
    "(code for fireErrorCallbacks)": {
        "count": 1,
        "size": 544
    },
    "(code for flow)": {
        "count": 1,
        "size": 608
    },
    "(code for flushMetrics)": {
        "count": 1,
        "size": 1472
    },
    "(code for forEach)": {
        "count": 2,
        "size": 1184
    },
    "(code for formatArgs)": {
        "count": 1,
        "size": 960
    },
    "(code for formatArray)": {
        "count": 1,
        "size": 1152
    },
    "(code for formatPrimitive)": {
        "count": 1,
        "size": 2400
    },
    "(code for formatProperty)": {
        "count": 1,
        "size": 4864
    },
    "(code for formatValue)": {
        "count": 1,
        "size": 8128
    },
    "(code for forwardMetrics)": {
        "count": 1,
        "size": 448
    },
    "(code for freeze)": {
        "count": 1,
        "size": 1376
    },
    "(code for fromList)": {
        "count": 1,
        "size": 2624
    },
    "(code for fromString)": {
        "count": 1,
        "size": 992
    },
    "(code for fs.Stats)": {
        "count": 2,
        "size": 1664
    },
    "(code for fs.Stats._checkModeProperty)": {
        "count": 2,
        "size": 704
    },
    "(code for fs.Stats.isFile)": {
        "count": 2,
        "size": 704
    },
    "(code for fs.Stats.isSymbolicLink)": {
        "count": 2,
        "size": 704
    },
    "(code for fs.closeSync)": {
        "count": 1,
        "size": 320
    },
    "(code for fs.existsSync)": {
        "count": 1,
        "size": 576
    },
    "(code for fs.fstatSync)": {
        "count": 1,
        "size": 320
    },
    "(code for fs.lstatSync)": {
        "count": 1,
        "size": 480
    },
    "(code for fs.openSync)": {
        "count": 1,
        "size": 576
    },
    "(code for fs.readFileSync)": {
        "count": 1,
        "size": 3680
    },
    "(code for fs.readSync)": {
        "count": 1,
        "size": 992
    },
    "(code for fs.readdirSync)": {
        "count": 1,
        "size": 480
    },
    "(code for fs.statSync)": {
        "count": 1,
        "size": 480
    },
    "(code for fs.unlinkSync)": {
        "count": 1,
        "size": 480
    },
    "(code for g)": {
        "count": 1,
        "size": 480
    },
    "(code for get __proto__)": {
        "count": 1,
        "size": 352
    },
    "(code for get length)": {
        "count": 1,
        "size": 512
    },
    "(code for getCallback)": {
        "count": 1,
        "size": 416
    },
    "(code for getConstructorOf)": {
        "count": 1,
        "size": 800
    },
    "(code for getFileName)": {
        "count": 3,
        "size": 2496
    },
    "(code for getNative)": {
        "count": 1,
        "size": 352
    },
    "(code for getOwnPropertyDescriptor)": {
        "count": 1,
        "size": 416
    },
    "(code for getOwnPropertyNames)": {
        "count": 1,
        "size": 608
    },
    "(code for getParsingFlags)": {
        "count": 1,
        "size": 352
    },
    "(code for getPrototypeOf)": {
        "count": 1,
        "size": 352
    },
    "(code for getRoot)": {
        "count": 3,
        "size": 3168
    },
    "(code for getSetOffset)": {
        "count": 1,
        "size": 1600
    },
    "(code for getTime)": {
        "count": 1,
        "size": 288
    },
    "(code for getUTCFullYear)": {
        "count": 1,
        "size": 320
    },
    "(code for getWorkerInfo)": {
        "count": 1,
        "size": 640
    },
    "(code for get_set__get)": {
        "count": 1,
        "size": 512
    },
    "(code for handleMessage)": {
        "count": 1,
        "size": 928
    },
    "(code for hasOwnProp)": {
        "count": 1,
        "size": 352
    },
    "(code for hasOwnProperty)": {
        "count": 3,
        "size": 1344
    },
    "(code for howMuchToRead)": {
        "count": 1,
        "size": 1248
    },
    "(code for ifExists)": {
        "count": 1,
        "size": 384
    },
    "(code for immediate._onImmediate)": {
        "count": 1,
        "size": 288
    },
    "(code for imul)": {
        "count": 1,
        "size": 480
    },
    "(code for indexOf)": {
        "count": 2,
        "size": 1728
    },
    "(code for init)": {
        "count": 1,
        "size": 256
    },
    "(code for initSocketHandle)": {
        "count": 1,
        "size": 576
    },
    "(code for initialise)": {
        "count": 1,
        "size": 1056
    },
    "(code for injectIdentifiers)": {
        "count": 1,
        "size": 1312
    },
    "(code for inspect)": {
        "count": 1,
        "size": 1248
    },
    "(code for internal)": {
        "count": 1,
        "size": 256
    },
    "(code for internal_on)": {
        "count": 1,
        "size": 192
    },
    "(code for isArray)": {
        "count": 2,
        "size": 768
    },
    "(code for isArrayLike)": {
        "count": 1,
        "size": 352
    },
    "(code for isBuffer)": {
        "count": 1,
        "size": 288
    },
    "(code for isDate)": {
        "count": 2,
        "size": 800
    },
    "(code for isEmpty)": {
        "count": 1,
        "size": 288
    },
    "(code for isError)": {
        "count": 1,
        "size": 384
    },
    "(code for isFinite)": {
        "count": 1,
        "size": 608
    },
    "(code for isFunction)": {
        "count": 2,
        "size": 928
    },
    "(code for isLength)": {
        "count": 1,
        "size": 512
    },
    "(code for isMatch)": {
        "count": 1,
        "size": 384
    },
    "(code for isMoment)": {
        "count": 1,
        "size": 416
    },
    "(code for isNaN)": {
        "count": 1,
        "size": 448
    },
    "(code for isNative)": {
        "count": 1,
        "size": 608
    },
    "(code for isObject)": {
        "count": 1,
        "size": 416
    },
    "(code for isPipeName)": {
        "count": 1,
        "size": 384
    },
    "(code for isRegExp)": {
        "count": 1,
        "size": 288
    },
    "(code for isSignal)": {
        "count": 1,
        "size": 512
    },
    "(code for isUndefined)": {
        "count": 1,
        "size": 256
    },
    "(code for join)": {
        "count": 1,
        "size": 640
    },
    "(code for json)": {
        "count": 2,
        "size": 1152
    },
    "(code for keys)": {
        "count": 2,
        "size": 1280
    },
    "(code for keysIn)": {
        "count": 1,
        "size": 2144
    },
    "(code for lastIndexOf)": {
        "count": 1,
        "size": 1376
    },
    "(code for latencyCheck)": {
        "count": 1,
        "size": 384
    },
    "(code for latencyReport)": {
        "count": 1,
        "size": 1056
    },
    "(code for listen)": {
        "count": 3,
        "size": 2272
    },
    "(code for listenAfterLookup)": {
        "count": 1,
        "size": 384
    },
    "(code for listenerCount)": {
        "count": 1,
        "size": 448
    },
    "(code for listening)": {
        "count": 1,
        "size": 704
    },
    "(code for liveWorkerIds)": {
        "count": 1,
        "size": 544
    },
    "(code for load)": {
        "count": 1,
        "size": 288
    },
    "(code for loadBackend)": {
        "count": 1,
        "size": 576
    },
    "(code for loadLocale)": {
        "count": 1,
        "size": 672
    },
    "(code for local__createLocal)": {
        "count": 1,
        "size": 288
    },
    "(code for locale_locales__getLocale)": {
        "count": 1,
        "size": 672
    },
    "(code for locale_locales__getSetGlobalLocale)": {
        "count": 1,
        "size": 512
    },
    "(code for locale_set__set)": {
        "count": 1,
        "size": 1344
    },
    "(code for log)": {
        "count": 2,
        "size": 1024
    },
    "(code for lookup)": {
        "count": 1,
        "size": 3104
    },
    "(code for loopbackDJProbe)": {
        "count": 1,
        "size": 320
    },
    "(code for makeAs)": {
        "count": 1,
        "size": 256
    },
    "(code for makeAsync)": {
        "count": 1,
        "size": 320
    },
    "(code for makeGetSet)": {
        "count": 1,
        "size": 256
    },
    "(code for makeGetter)": {
        "count": 1,
        "size": 256
    },
    "(code for map)": {
        "count": 2,
        "size": 1184
    },
    "(code for mapDomain)": {
        "count": 1,
        "size": 800
    },
    "(code for masterInit)": {
        "count": 1,
        "size": 2976
    },
    "(code for match)": {
        "count": 1,
        "size": 1056
    },
    "(code for max)": {
        "count": 1,
        "size": 1632
    },
    "(code for maybeDestroy)": {
        "count": 1,
        "size": 544
    },
    "(code for maybeReadMore)": {
        "count": 1,
        "size": 384
    },
    "(code for maybeReadMore_)": {
        "count": 1,
        "size": 896
    },
    "(code for meridiem)": {
        "count": 1,
        "size": 288
    },
    "(code for method)": {
        "count": 1,
        "size": 352
    },
    "(code for metric)": {
        "count": 1,
        "size": 512
    },
    "(code for min)": {
        "count": 1,
        "size": 1632
    },
    "(code for mixin)": {
        "count": 1,
        "size": 1728
    },
    "(code for modeNum)": {
        "count": 1,
        "size": 512
    },
    "(code for module.exports)": {
        "count": 3,
        "size": 1152
    },
    "(code for module.exports.config)": {
        "count": 1,
        "size": 1216
    },
    "(code for module.exports.emit)": {
        "count": 1,
        "size": 832
    },
    "(code for module.exports.enable)": {
        "count": 1,
        "size": 1632
    },
    "(code for module.exports.getAPI)": {
        "count": 1,
        "size": 256
    },
    "(code for module.exports.monitor)": {
        "count": 1,
        "size": 480
    },
    "(code for module.exports.parse)": {
        "count": 1,
        "size": 608
    },
    "(code for moment_format__toISOString)": {
        "count": 1,
        "size": 960
    },
    "(code for moment_valid__isValid)": {
        "count": 1,
        "size": 256
    },
    "(code for munge)": {
        "count": 1,
        "size": 736
    },
    "(code for needFinish)": {
        "count": 1,
        "size": 608
    },
    "(code for needMoreData)": {
        "count": 1,
        "size": 544
    },
    "(code for newFunc)": {
        "count": 1,
        "size": 384
    },
    "(code for newHandle)": {
        "count": 1,
        "size": 896
    },
    "(code for next)": {
        "count": 1,
        "size": 1248
    },
    "(code for nextTick)": {
        "count": 1,
        "size": 960
    },
    "(code for nop)": {
        "count": 1,
        "size": 192
    },
    "(code for normalizeArray)": {
        "count": 1,
        "size": 1152
    },
    "(code for normalizeSpawnArguments)": {
        "count": 1,
        "size": 2560
    },
    "(code for notify)": {
        "count": 5,
        "size": 3456
    },
    "(code for notifyStatus)": {
        "count": 1,
        "size": 352
    },
    "(code for now)": {
        "count": 1,
        "size": 224
    },
    "(code for nullCheck)": {
        "count": 1,
        "size": 672
    },
    "(code for nullProtoObject)": {
        "count": 1,
        "size": 288
    },
    "(code for object)": {
        "count": 1,
        "size": 192
    },
    "(code for objectToString)": {
        "count": 1,
        "size": 352
    },
    "(code for objectifier)": {
        "count": 1,
        "size": 384
    },
    "(code for objectify)": {
        "count": 1,
        "size": 480
    },
    "(code for offset)": {
        "count": 1,
        "size": 288
    },
    "(code for ok)": {
        "count": 1,
        "size": 352
    },
    "(code for on)": {
        "count": 1,
        "size": 352
    },
    "(code for onEofChunk)": {
        "count": 1,
        "size": 800
    },
    "(code for onFork)": {
        "count": 1,
        "size": 608
    },
    "(code for onRequest)": {
        "count": 2,
        "size": 11840
    },
    "(code for onSocketEnd)": {
        "count": 1,
        "size": 864
    },
    "(code for onSocketFinish)": {
        "count": 1,
        "size": 1600
    },
    "(code for onStart)": {
        "count": 1,
        "size": 448
    },
    "(code for once)": {
        "count": 4,
        "size": 1600
    },
    "(code for onconnection)": {
        "count": 1,
        "size": 1248
    },
    "(code for ondata)": {
        "count": 2,
        "size": 1568
    },
    "(code for onend)": {
        "count": 2,
        "size": 800
    },
    "(code for onerror)": {
        "count": 1,
        "size": 672
    },
    "(code for onfinish)": {
        "count": 1,
        "size": 416
    },
    "(code for online)": {
        "count": 2,
        "size": 992
    },
    "(code for only_once)": {
        "count": 1,
        "size": 320
    },
    "(code for onmessage)": {
        "count": 1,
        "size": 832
    },
    "(code for onread)": {
        "count": 1,
        "size": 2176
    },
    "(code for onunpipe)": {
        "count": 1,
        "size": 384
    },
    "(code for onwrite)": {
        "count": 1,
        "size": 896
    },
    "(code for onwriteDrain)": {
        "count": 1,
        "size": 448
    },
    "(code for onwriteError)": {
        "count": 1,
        "size": 576
    },
    "(code for onwriteStateUpdate)": {
        "count": 1,
        "size": 384
    },
    "(code for parse)": {
        "count": 3,
        "size": 11136
    },
    "(code for parseFloat)": {
        "count": 1,
        "size": 416
    },
    "(code for parseInt)": {
        "count": 1,
        "size": 1376
    },
    "(code for partial)": {
        "count": 1,
        "size": 512
    },
    "(code for passThrough)": {
        "count": 1,
        "size": 224
    },
    "(code for patch)": {
        "count": 2,
        "size": 5152
    },
    "(code for patchLutimes)": {
        "count": 1,
        "size": 608
    },
    "(code for pipeName)": {
        "count": 1,
        "size": 864
    },
    "(code for pipeOnDrain)": {
        "count": 1,
        "size": 256
    },
    "(code for posix._makeLong)": {
        "count": 1,
        "size": 224
    },
    "(code for posix.basename)": {
        "count": 1,
        "size": 800
    },
    "(code for posix.dirname)": {
        "count": 1,
        "size": 544
    },
    "(code for posix.extname)": {
        "count": 1,
        "size": 288
    },
    "(code for posix.isAbsolute)": {
        "count": 1,
        "size": 384
    },
    "(code for posix.join)": {
        "count": 1,
        "size": 800
    },
    "(code for posix.normalize)": {
        "count": 1,
        "size": 896
    },
    "(code for posix.resolve)": {
        "count": 1,
        "size": 1376
    },
    "(code for posixSplitPath)": {
        "count": 1,
        "size": 416
    },
    "(code for prefinish)": {
        "count": 1,
        "size": 352
    },
    "(code for prepareConfig)": {
        "count": 1,
        "size": 1376
    },
    "(code for printfReplacer)": {
        "count": 1,
        "size": 608
    },
    "(code for process)": {
        "count": 1,
        "size": 2368
    },
    "(code for process.assert)": {
        "count": 1,
        "size": 352
    },
    "(code for process.chdir)": {
        "count": 2,
        "size": 768
    },
    "(code for process.cwd)": {
        "count": 2,
        "size": 768
    },
    "(code for processImmediate)": {
        "count": 1,
        "size": 2176
    },
    "(code for process_metrics)": {
        "count": 1,
        "size": 9856
    },
    "(code for profile)": {
        "count": 1,
        "size": 192
    },
    "(code for proxyReader)": {
        "count": 1,
        "size": 256
    },
    "(code for proxyStream)": {
        "count": 1,
        "size": 320
    },
    "(code for proxyWriter)": {
        "count": 1,
        "size": 256
    },
    "(code for queryServer)": {
        "count": 1,
        "size": 1536
    },
    "(code for random)": {
        "count": 1,
        "size": 928
    },
    "(code for re)": {
        "count": 1,
        "size": 1216
    },
    "(code for reLiner)": {
        "count": 1,
        "size": 288
    },
    "(code for read)": {
        "count": 1,
        "size": 832
    },
    "(code for read1)": {
        "count": 1,
        "size": 768
    },
    "(code for readPackage)": {
        "count": 1,
        "size": 1184
    },
    "(code for readableAddChunk)": {
        "count": 1,
        "size": 2240
    },
    "(code for realpathSync)": {
        "count": 1,
        "size": 3616
    },
    "(code for reduce)": {
        "count": 1,
        "size": 672
    },
    "(code for reduceToSingleString)": {
        "count": 1,
        "size": 992
    },
    "(code for reemit)": {
        "count": 1,
        "size": 480
    },
    "(code for ref)": {
        "count": 1,
        "size": 416
    },
    "(code for remove)": {
        "count": 1,
        "size": 512
    },
    "(code for removeChannel)": {
        "count": 1,
        "size": 992
    },
    "(code for removeListener)": {
        "count": 1,
        "size": 2208
    },
    "(code for replace)": {
        "count": 1,
        "size": 3392
    },
    "(code for req.oncomplete)": {
        "count": 1,
        "size": 640
    },
    "(code for request)": {
        "count": 2,
        "size": 2272
    },
    "(code for requestOfTarget)": {
        "count": 1,
        "size": 608
    },
    "(code for require)": {
        "count": 1,
        "size": 288
    },
    "(code for require.resolve)": {
        "count": 1,
        "size": 288
    },
    "(code for resize)": {
        "count": 1,
        "size": 1472
    },
    "(code for resized)": {
        "count": 1,
        "size": 320
    },
    "(code for resolveArgs)": {
        "count": 1,
        "size": 1952
    },
    "(code for resolvePackageFromPath)": {
        "count": 1,
        "size": 1280
    },
    "(code for resolvePath)": {
        "count": 1,
        "size": 1088
    },
    "(code for resolver)": {
        "count": 1,
        "size": 384
    },
    "(code for restParam)": {
        "count": 1,
        "size": 640
    },
    "(code for resume)": {
        "count": 1,
        "size": 384
    },
    "(code for resume_)": {
        "count": 1,
        "size": 736
    },
    "(code for retry)": {
        "count": 1,
        "size": 576
    },
    "(code for round)": {
        "count": 1,
        "size": 352
    },
    "(code for rsaPrivate)": {
        "count": 1,
        "size": 256
    },
    "(code for rsaPublic)": {
        "count": 1,
        "size": 256
    },
    "(code for runInContext)": {
        "count": 1,
        "size": 36192
    },
    "(code for runInThisContext)": {
        "count": 1,
        "size": 320
    },
    "(code for save)": {
        "count": 1,
        "size": 416
    },
    "(code for selectColor)": {
        "count": 1,
        "size": 416
    },
    "(code for send)": {
        "count": 2,
        "size": 768
    },
    "(code for sendHelper)": {
        "count": 1,
        "size": 608
    },
    "(code for sendMetrics)": {
        "count": 1,
        "size": 2208
    },
    "(code for set __proto__)": {
        "count": 1,
        "size": 544
    },
    "(code for setHookCallback)": {
        "count": 1,
        "size": 256
    },
    "(code for setMaxListeners)": {
        "count": 1,
        "size": 544
    },
    "(code for setOffsetToUTC)": {
        "count": 1,
        "size": 288
    },
    "(code for setPrototypeOf)": {
        "count": 1,
        "size": 640
    },
    "(code for setSize)": {
        "count": 1,
        "size": 768
    },
    "(code for setupChannel)": {
        "count": 1,
        "size": 1632
    },
    "(code for setupChildLogger)": {
        "count": 1,
        "size": 1664
    },
    "(code for setupControl)": {
        "count": 1,
        "size": 256
    },
    "(code for setupSettingsNT)": {
        "count": 1,
        "size": 320
    },
    "(code for shift)": {
        "count": 1,
        "size": 288
    },
    "(code for shimKeys)": {
        "count": 1,
        "size": 1120
    },
    "(code for short)": {
        "count": 1,
        "size": 928
    },
    "(code for slice)": {
        "count": 2,
        "size": 1792
    },
    "(code for slowToString)": {
        "count": 1,
        "size": 2400
    },
    "(code for some)": {
        "count": 1,
        "size": 576
    },
    "(code for sort)": {
        "count": 1,
        "size": 640
    },
    "(code for sortBy)": {
        "count": 1,
        "size": 800
    },
    "(code for spliceOne)": {
        "count": 1,
        "size": 608
    },
    "(code for split)": {
        "count": 1,
        "size": 1312
    },
    "(code for start)": {
        "count": 8,
        "size": 13376
    },
    "(code for startListening)": {
        "count": 1,
        "size": 640
    },
    "(code for startOne)": {
        "count": 1,
        "size": 800
    },
    "(code for startServer)": {
        "count": 1,
        "size": 544
    },
    "(code for startTrackingObjects)": {
        "count": 1,
        "size": 320
    },
    "(code for startsWith)": {
        "count": 1,
        "size": 1344
    },
    "(code for startup)": {
        "count": 1,
        "size": 6400
    },
    "(code for startup.globalConsole)": {
        "count": 1,
        "size": 320
    },
    "(code for startup.globalTimeouts)": {
        "count": 1,
        "size": 768
    },
    "(code for startup.globalVariables)": {
        "count": 1,
        "size": 704
    },
    "(code for startup.lazyConstants)": {
        "count": 1,
        "size": 384
    },
    "(code for startup.preloadModules)": {
        "count": 1,
        "size": 448
    },
    "(code for startup.processAssert)": {
        "count": 1,
        "size": 320
    },
    "(code for startup.processChannel)": {
        "count": 1,
        "size": 928
    },
    "(code for startup.processConfig)": {
        "count": 1,
        "size": 1344
    },
    "(code for startup.processFatal)": {
        "count": 1,
        "size": 256
    },
    "(code for startup.processKillAndExit)": {
        "count": 1,
        "size": 352
    },
    "(code for startup.processNextTick)": {
        "count": 1,
        "size": 1856
    },
    "(code for startup.processPromises)": {
        "count": 1,
        "size": 512
    },
    "(code for startup.processRawDebug)": {
        "count": 1,
        "size": 544
    },
    "(code for startup.processSignalHandlers)": {
        "count": 1,
        "size": 576
    },
    "(code for startup.processStdio)": {
        "count": 1,
        "size": 608
    },
    "(code for staticTagger)": {
        "count": 1,
        "size": 288
    },
    "(code for status)": {
        "count": 1,
        "size": 1824
    },
    "(code for stream.write)": {
        "count": 1,
        "size": 384
    },
    "(code for stringToFlags)": {
        "count": 1,
        "size": 3328
    },
    "(code for stringify)": {
        "count": 1,
        "size": 2752
    },
    "(code for stripBOM)": {
        "count": 1,
        "size": 416
    },
    "(code for stylizeNoColor)": {
        "count": 1,
        "size": 224
    },
    "(code for subarray)": {
        "count": 1,
        "size": 1408
    },
    "(code for substr)": {
        "count": 1,
        "size": 1376
    },
    "(code for substring)": {
        "count": 1,
        "size": 1216
    },
    "(code for symlinkReplacer)": {
        "count": 1,
        "size": 480
    },
    "(code for tagger)": {
        "count": 1,
        "size": 320
    },
    "(code for target._send)": {
        "count": 1,
        "size": 4288
    },
    "(code for target.send)": {
        "count": 1,
        "size": 768
    },
    "(code for test)": {
        "count": 1,
        "size": 2784
    },
    "(code for textFormatter)": {
        "count": 1,
        "size": 384
    },
    "(code for textify)": {
        "count": 1,
        "size": 1120
    },
    "(code for textifyTags)": {
        "count": 1,
        "size": 1120
    },
    "(code for through)": {
        "count": 1,
        "size": 1696
    },
    "(code for tickDone)": {
        "count": 1,
        "size": 960
    },
    "(code for toASCII)": {
        "count": 1,
        "size": 256
    },
    "(code for toDate)": {
        "count": 1,
        "size": 416
    },
    "(code for toISOString)": {
        "count": 1,
        "size": 1728
    },
    "(code for toLowerCase)": {
        "count": 1,
        "size": 544
    },
    "(code for toNumber)": {
        "count": 1,
        "size": 352
    },
    "(code for toObject)": {
        "count": 1,
        "size": 320
    },
    "(code for toRealPath)": {
        "count": 1,
        "size": 352
    },
    "(code for toString)": {
        "count": 5,
        "size": 3360
    },
    "(code for toUpperCase)": {
        "count": 1,
        "size": 544
    },
    "(code for toWorker)": {
        "count": 1,
        "size": 672
    },
    "(code for trace)": {
        "count": 1,
        "size": 704
    },
    "(code for tracer)": {
        "count": 1,
        "size": 224
    },
    "(code for trim)": {
        "count": 1,
        "size": 576
    },
    "(code for tryExtensions)": {
        "count": 1,
        "size": 608
    },
    "(code for tryFile)": {
        "count": 1,
        "size": 544
    },
    "(code for tryPackage)": {
        "count": 1,
        "size": 736
    },
    "(code for ucFirst)": {
        "count": 1,
        "size": 416
    },
    "(code for unpipe)": {
        "count": 1,
        "size": 384
    },
    "(code for unrefTimer)": {
        "count": 1,
        "size": 480
    },
    "(code for unrefdHandle)": {
        "count": 1,
        "size": 480
    },
    "(code for unzip)": {
        "count": 1,
        "size": 800
    },
    "(code for urlParse)": {
        "count": 1,
        "size": 384
    },
    "(code for use)": {
        "count": 1,
        "size": 544
    },
    "(code for useColors)": {
        "count": 1,
        "size": 928
    },
    "(code for utils_hooks__hooks)": {
        "count": 1,
        "size": 320
    },
    "(code for utils_hooks__hooks.updateOffset)": {
        "count": 1,
        "size": 192
    },
    "(code for validChunk)": {
        "count": 1,
        "size": 768
    },
    "(code for valid__isValid)": {
        "count": 1,
        "size": 1888
    },
    "(code for value)": {
        "count": 1,
        "size": 608
    },
    "(code for valueOf)": {
        "count": 2,
        "size": 608
    },
    "(code for watcherStart)": {
        "count": 1,
        "size": 320
    },
    "(code for workerParams)": {
        "count": 1,
        "size": 1408
    },
    "(code for wrapCallback)": {
        "count": 1,
        "size": 640
    },
    "(code for wrapper)": {
        "count": 1,
        "size": 640
    },
    "(code for wrappy)": {
        "count": 4,
        "size": 2944
    },
    "(code for writeOrBuffer)": {
        "count": 1,
        "size": 1056
    },
    "(code relocation info)": {
        "count": 3691,
        "size": 347768
    },
    "(concatenated string)": {
        "count": 1487,
        "size": 59480
    },
    "(construct stub code for Array)": {
        "count": 1,
        "size": 608
    },
    "(construct stub code for InternalArray)": {
        "count": 1,
        "size": 224
    },
    "(context data)": {
        "count": 1,
        "size": 280
    },
    "(context func. result caches)": {
        "count": 1,
        "size": 24
    },
    "(context norm. map cache)": {
        "count": 1,
        "size": 528
    },
    "(dependent code)": {
        "count": 77,
        "size": 8176
    },
    "(function (exports, require, module, __filename, __dirname) { ": {
        "count": 1,
        "size": 88
    },
    "(function (exports, require, module, __filename, __dirname) { \n\n// Exit on loss of parent process, if it had established an ipc control channel.\n// We do this ASAP because we don't want child processes to leak, outliving\n// their parent. If the parent has not established an 'ipc' channel to us, this\n// will be a no-op, the disconnect event will never occur.\nprocess.on('disconnect', function() {\n  process.exit(2);\n});\n\nvar assert = require('assert');\nvar config = require('../lib/config'); // May exit, depending on argv\nvar log = config.logger;\nvar tracer = require('../lib/tracer');\n\nif (config.enableTracing && config.isWorker) {\n  if (!tracer.start())\n    log.error('supervisor failed to enable tracing');\n}\n\nvar agent = require('../lib/agent');\nvar agentOptions = {\n  quiet: config.isWorker, // Quiet in worker, to avoid repeated log messages\n  logger: config.logger, // XXX(sam) does appmetrics do any console writes?\n  strongTracer: tracer(), // XXX(sam) unsupported by appmetrics?\n  interval: 0 | process.env.STRO": {
        "count": 1,
        "size": 2872
    },
    "(function (exports, require, module, __filename, __dirname) { \n/*\nusage:\n\n// do something to a list of things\nasyncMap(myListOfStuff, function (thing, cb) { doSomething(thing.foo, cb) }, cb)\n// do more than one thing to each item\nasyncMap(list, fooFn, barFn, cb)\n\n*/\n\nmodule.exports = asyncMap\n\nfunction asyncMap () {\n  var steps = Array.prototype.slice.call(arguments)\n    , list = steps.shift() || []\n    , cb_ = steps.pop()\n  if (typeof cb_ !== \"function\") throw new Error(\n    \"No callback provided to asyncMap\")\n  if (!list) return cb_(null, [])\n  if (!Array.isArray(list)) list = [list]\n  var n = steps.length\n    , data = [] // 2d array\n    , errState = null\n    , l = list.length\n    , a = l * n\n  if (!a) return cb_(null, [])\n  function cb (er) {\n    if (er && !errState) errState = er\n\n    var argLen = arguments.length\n    for (var i = 1; i < argLen; i ++) if (arguments[i] !== undefined) {\n      data[i - 1] = (data[i - 1] || []).concat(arguments[i])\n    }\n    // see if any new things have been added.\n    if (l": {
        "count": 1,
        "size": 1568
    },
    "(function (exports, require, module, __filename, __dirname) { \n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , path = require('path')\n  , join = path.join\n  , dirname = path.dirname\n  , exists = fs.existsSync || path.existsSync\n  , defaults = {\n        arrow: process.env.NODE_BINDINGS_ARROW || ' \u2192 '\n      , compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled'\n      , platform: process.platform\n      , arch: process.arch\n      , version: process.versions.node\n      , bindings: 'bindings.node'\n      , try: [\n          // node-gyp's linked version in the \"build\" dir\n          [ 'module_root', 'build', 'bindings' ]\n          // node-waf and gyp_addon (a.k.a node-gyp)\n        , [ 'module_root', 'build', 'Debug', 'bindings' ]\n        , [ 'module_root', 'build', 'Release', 'bindings' ]\n          // Debug files, for development (legacy behavior, remove for node v0.9)\n        , [ 'module_root', 'out', 'Debug', 'bindings' ]\n        , [ 'module_root', 'Debug', 'bindings' ]\n          // Release file": {
        "count": 3,
        "size": 28248
    },
    "(function (exports, require, module, __filename, __dirname) { \n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\nvar stream = 1 === fd ? process.stdout :\n             2 === fd ? process.stderr :\n             createWritableStdioStream(fd);\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();\n  if (0 === de": {
        "count": 1,
        "size": 4848
    },
    "(function (exports, require, module, __filename, __dirname) { \n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @": {
        "count": 1,
        "size": 4192
    },
    "(function (exports, require, module, __filename, __dirname) { \n// Walk through the file-system \"database\" of installed\n// packages, and create a data object related to the\n// installed versions of each package.\n\n/*\nThis will traverse through all node_modules folders,\nresolving the dependencies object to the object corresponding to\nthe package that meets that dep, or just the version/range if\nunmet.\n\nAssuming that you had this folder structure:\n\n/path/to\n+-- package.json { name = \"root\" }\n`-- node_modules\n    +-- foo {bar, baz, asdf}\n    | +-- node_modules\n    |   +-- bar { baz }\n    |   `-- baz\n    `-- asdf\n\nwhere \"foo\" depends on bar, baz, and asdf, bar depends on baz,\nand bar and baz are bundled with foo, whereas \"asdf\" is at\nthe higher level (sibling to foo), you'd get this object structure:\n\n{ <package.json data>\n, path: \"/path/to\"\n, parent: null\n, dependencies:\n  { foo :\n    { version: \"1.2.3\"\n    , path: \"/path/to/node_modules/foo\"\n    , parent: <Circular: root>\n    , dependencies:\n      { bar:\n        ": {
        "count": 1,
        "size": 11320
    },
    "(function (exports, require, module, __filename, __dirname) { \nmodule.exports.__defineGetter__('parse', function() {\n\treturn require('./lib/parse').parse\n})\n\nmodule.exports.__defineGetter__('stringify', function() {\n\treturn require('./lib/stringify').stringify\n})\n\nmodule.exports.__defineGetter__('tokenize', function() {\n\treturn require('./lib/parse').tokenize\n})\n\nmodule.exports.__defineGetter__('update', function() {\n\treturn require('./lib/document').update\n})\n\nmodule.exports.__defineGetter__('analyze', function() {\n\treturn require('./lib/analyze').analyze\n})\n\nmodule.exports.__defineGetter__('utils', function() {\n\treturn require('./lib/utils')\n})\n\n/**package\n{ \"name\": \"jju\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\"js-yaml\": \"*\"},\n  \"scripts\": {\"postinstall\": \"js-yaml package.yaml > package.json ; npm install\"}\n}\n**/\n\n});": {
        "count": 1,
        "size": 864
    },
    "(function (exports, require, module, __filename, __dirname) { \nvar util = require('util');\n\n/**\n * Module exports.\n */\n\nexports.parse = parse;\nexports.format = format;\n\n/**\n * Parse extensions header value\n */\n\nfunction parse(value) {\n  value = value || '';\n\n  var extensions = {};\n\n  value.split(',').forEach(function(v) {\n    var params = v.split(';');\n    var token = params.shift().trim();\n    var paramsList = extensions[token] = extensions[token] || [];\n    var parsedParams = {};\n\n    params.forEach(function(param) {\n      var parts = param.trim().split('=');\n      var key = parts[0];\n      var value = parts[1];\n      if (typeof value === 'undefined') {\n        value = true;\n      } else {\n        // unquote value\n        if (value[0] === '\"') {\n          value = value.slice(1);\n        }\n        if (value[value.length - 1] === '\"') {\n          value = value.slice(0, value.length - 1);\n        }\n      }\n      (parsedParams[key] = parsedParams[key] || []).push(value);\n    });\n\n    paramsList.push(parsedParam": {
        "count": 1,
        "size": 1664
    },
    "(function (exports, require, module, __filename, __dirname) { \nvar zlib = require('zlib');\n\nvar AVAILABLE_WINDOW_BITS = [8, 9, 10, 11, 12, 13, 14, 15];\nvar DEFAULT_WINDOW_BITS = 15;\nvar DEFAULT_MEM_LEVEL = 8;\n\nPerMessageDeflate.extensionName = 'permessage-deflate';\n\n/**\n * Per-message Compression Extensions implementation\n */\n\nfunction PerMessageDeflate(options, isServer) {\n  if (this instanceof PerMessageDeflate === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  this._options = options || {};\n  this._isServer = !!isServer;\n  this._inflate = null;\n  this._deflate = null;\n  this.params = null;\n}\n\n/**\n * Create extension parameters offer\n *\n * @api public\n */\n\nPerMessageDeflate.prototype.offer = function() {\n  var params = {};\n  if (this._options.serverNoContextTakeover) {\n    params.server_no_context_takeover = true;\n  }\n  if (this._options.clientNoContextTakeover) {\n    params.client_no_context_takeover = true;\n  }\n  if (this._options.serverMaxWindowBits) {\n    params.server_max_": {
        "count": 1,
        "size": 8568
    },
    "(function (exports, require, module, __filename, __dirname) { \"use strict\";\n\nvar domain; // The domain module is executed on demand\nvar hasSetImmediate = typeof setImmediate === \"function\";\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including network IO events in Node.js.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Avoids a function call\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been req": {
        "count": 1,
        "size": 4232
    },
    "(function (exports, require, module, __filename, __dirname) { \"use strict\";\n\nvar rawAsap = require(\"./raw\");\nvar freeTasks = [];\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with\n * priority over IO events. An exception thrown in a task can be handled by\n * `process.on(\"uncaughtException\") or `domain.on(\"error\")`, but will otherwise\n * crash the process. If the error is handled, all subsequent tasks will\n * resume.\n *\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawTask.domain = process.domain;\n    rawAsap(rawTask);\n}\n\nfunction RawTask() {\n    this.task = null;\n    this.domain = null;\n}\n\nRawTask.prototype.call = function () {\n    if (this.domain) {\n        this.domain.enter();\n    }\n    var threw = true;\n    try {\n        this": {
        "count": 1,
        "size": 2048
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict'\n\nvar fs = require('fs')\n\nmodule.exports = {\n  /*\n   * Main entry point into dotenv. Allows configuration before loading .env and .env.$NODE_ENV\n   * @param {Object} options - valid options: path ('.env'), encoding ('utf8')\n   * @returns {Boolean}\n  */\n  config: function (options) {\n    var path = '.env'\n    var encoding = 'utf8'\n    var silent = false\n\n    if (options) {\n      if (options.silent) {\n        silent = options.silent\n      }\n      if (options.path) {\n        path = options.path\n      }\n      if (options.encoding) {\n        encoding = options.encoding\n      }\n    }\n\n    try {\n      // specifying an encoding returns a string instead of a buffer\n      var parsedObj = this.parse(fs.readFileSync(path, { encoding: encoding }))\n\n      Object.keys(parsedObj).forEach(function (key) {\n        process.env[key] = process.env[key] || parsedObj[key]\n      })\n\n      return true\n    } catch(e) {\n      if (!silent) {\n        console.error(": {
        "count": 1,
        "size": 2520
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\n/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar WS = module.exports = require('./lib/WebSocket');\n\nWS.Server = require('./lib/WebSocketServer');\nWS.Sender = require('./lib/Sender');\nWS.Receiver = require('./lib/Receiver');\n\n/**\n * Create a new WebSocket server.\n *\n * @param {Object} options Server options\n * @param {Function} fn Optional connection listener.\n * @returns {WS.Server}\n * @api public\n */\nWS.createServer = function createServer(options, fn) {\n  var server = new WS.Server(options);\n\n  if (typeof fn === 'function') {\n    server.on('connection', fn);\n  }\n\n  return server;\n};\n\n/**\n * Create a new WebSocket connection.\n *\n * @param {String} address The URL/address we need to connect to.\n * @param {Function} fn Open listener.\n * @returns {WS}\n * @api public\n */\nWS.connect = WS.createConnection = function connect(address, fn) {\n  var client = new WS(addr": {
        "count": 1,
        "size": 1152
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\n/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar url = require('url')\n  , util = require('util')\n  , http = require('http')\n  , https = require('https')\n  , crypto = require('crypto')\n  , stream = require('stream')\n  , Ultron = require('ultron')\n  , Options = require('options')\n  , Sender = require('./Sender')\n  , Receiver = require('./Receiver')\n  , SenderHixie = require('./Sender.hixie')\n  , ReceiverHixie = require('./Receiver.hixie')\n  , Extensions = require('./Extensions')\n  , PerMessageDeflate = require('./PerMessageDeflate')\n  , EventEmitter = require('events').EventEmitter;\n\n/**\n * Constants\n */\n\n// Default protocol version\n\nvar protocolVersion = 13;\n\n// Close timeout\n\nvar closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly\n\n/**\n * WebSocket implementation\n *\n * @constructor\n * @param {String} address Connection address.\n *": {
        "count": 1,
        "size": 26856
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\n// This is a free list to avoid creating so many of the same object.\nexports.FreeList = function(name, max, constructor) {\n  this.name = name;\n  this.constructor = constructor;\n  this.max = max;\n  this.list = [];\n};\n\n\nexports.FreeList.prototype.alloc = function() {\n  return this.list.length ? this.list.shift() :\n                            this.constructor.apply(this, arguments);\n};\n\n\nexports.FreeList.prototype.free = function(obj) {\n  if (this.list.length < this.max) {\n    this.list.push(obj);\n    return true;\n  }\n  return false;\n};\n\n});": {
        "count": 1,
        "size": 648
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\n// WARNING: THIS MODULE IS PENDING DEPRECATION.\n//\n// No new pull requests targeting this module will be accepted\n// unless they address existing, critical bugs.\n\nconst util = require('util');\nconst EventEmitter = require('events');\nconst inherits = util.inherits;\n\n// communicate with events module, but don't require that\n// module to have to load this one, since this module has\n// a few side effects.\nEventEmitter.usingDomains = true;\n\n// overwrite process.domain with a getter/setter that will allow for more\n// effective optimizations\nvar _domain = [null];\nObject.defineProperty(process, 'domain', {\n  enumerable: true,\n  get: function() {\n    return _domain[0];\n  },\n  set: function(arg) {\n    return _domain[0] = arg;\n  }\n});\n\n// let the process know we're using domains\nconst _domain_flag = process._setupDomainUse(_domain);\n\nexports.Domain = Domain;\n\nexports.create = exports.createDomain = function() {\n  return new Domain();\n};\n\n// it'": {
        "count": 1,
        "size": 7704
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\n// We don't want to require strong-agent, because anything it requires will\n// become untraceable. Still, we need to use its idea of the appName, and access\n// lrtime from the addon, so require the agent internals.\nvar lrtime = require('./adapter').lrtime;\nvar assert = require('assert');\nvar configure = require('./adapter').configure;\n\nexports = module.exports = tracer;\nexports.start = start;\n\nvar TRACER = null;\n\nvar options = {\n  archiveInterval: 20000,\n  accountKey: undefined, // Filled in later\n  useHttp: false,\n  lrtime: lrtime,\n  blacklist: ['*node_modules/strong-agent/*'],\n  wrap_timers: false,\n  traceId: process.env.STRONGLOOP_TRACES_ID, // returned as hostname in trace\n};\n\nfunction tracer() {\n  return TRACER;\n}\n\nfunction start() {\n  assert(!TRACER);\n  // This is delayed to allow process.env to be modified up until start time.\n  var config = configure(null, null, {}, process.env);\n  options.accountKey = config.appName;\n  if (o": {
        "count": 1,
        "size": 1144
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst Buffer = require('buffer').Buffer;\n\nfunction assertEncoding(encoding) {\n  // Do not cache `Buffer.isEncoding`, some modules monkey-patch it to support\n  // additional encodings\n  if (encoding && !Buffer.isEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nconst StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch ": {
        "count": 1,
        "size": 7112
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst Buffer = require('buffer').Buffer;\nconst Transform = require('_stream_transform');\nconst binding = process.binding('zlib');\nconst util = require('util');\nconst assert = require('assert').ok;\nconst kMaxLength = require('buffer').kMaxLength;\nconst kRangeErrorMessage = 'Cannot create final Buffer. ' +\n    'It would be larger than 0x' + kMaxLength.toString(16) + ' bytes.';\n\n// zlib doesn't provide these, so kludge them in following the same\n// const naming scheme zlib uses.\nbinding.Z_MIN_WINDOWBITS = 8;\nbinding.Z_MAX_WINDOWBITS = 15;\nbinding.Z_DEFAULT_WINDOWBITS = 15;\n\n// fewer than 64 bytes per chunk is stupid.\n// technically it could work with as few as 8, but even 64 bytes\n// is absurdly low.  Usually a MB or more is best.\nbinding.Z_MIN_CHUNK = 64;\nbinding.Z_MAX_CHUNK = Infinity;\nbinding.Z_DEFAULT_CHUNK = (16 * 1024);\n\nbinding.Z_MIN_MEMLEVEL = 1;\nbinding.Z_MAX_MEMLEVEL = 9;\nbinding.Z_DEFAULT_MEMLEVEL = 8;\n\nbinding.Z_MIN_LEVEL = ": {
        "count": 1,
        "size": 16584
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst EventEmitter = require('events');\nconst assert = require('assert');\nconst dgram = require('dgram');\nconst fork = require('child_process').fork;\nconst net = require('net');\nconst util = require('util');\nconst SCHED_NONE = 1;\nconst SCHED_RR = 2;\n\nconst uv = process.binding('uv');\n\nconst cluster = new EventEmitter();\nmodule.exports = cluster;\ncluster.Worker = Worker;\ncluster.isWorker = ('NODE_UNIQUE_ID' in process.env);\ncluster.isMaster = (cluster.isWorker === false);\n\n\nfunction Worker(options) {\n  if (!(this instanceof Worker))\n    return new Worker(options);\n\n  EventEmitter.call(this);\n\n  if (options === null || typeof options !== 'object')\n    options = {};\n\n  this.suicide = undefined;\n  this.state = options.state || 'none';\n  this.id = options.id | 0;\n\n  if (options.process) {\n    this.process = options.process;\n    this.process.on('error', this.emit.bind(this, 'error'));\n    this.process.on('message', this.emit.bind(this, 'me": {
        "count": 1,
        "size": 21112
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst EventEmitter = require('events');\nconst stream = require('stream');\nconst timers = require('timers');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst assert = require('assert');\nconst cares = process.binding('cares_wrap');\nconst uv = process.binding('uv');\n\nconst Buffer = require('buffer').Buffer;\nconst TTYWrap = process.binding('tty_wrap');\nconst TCP = process.binding('tcp_wrap').TCP;\nconst Pipe = process.binding('pipe_wrap').Pipe;\nconst TCPConnectWrap = process.binding('tcp_wrap').TCPConnectWrap;\nconst PipeConnectWrap = process.binding('pipe_wrap').PipeConnectWrap;\nconst ShutdownWrap = process.binding('stream_wrap').ShutdownWrap;\nconst WriteWrap = process.binding('stream_wrap').WriteWrap;\n\n\nvar cluster;\nconst errnoException = util._errnoException;\nconst exceptionWithHostPort = util._exceptionWithHostPort;\n\nfunction noop() {}\n\nfunction createHandle(fd) {\n  var type = TTYWrap.guessHandleType(f": {
        "count": 1,
        "size": 40320
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst FreeList = require('internal/freelist').FreeList;\nconst HTTPParser = process.binding('http_parser').HTTPParser;\n\nconst incoming = require('_http_incoming');\nconst IncomingMessage = incoming.IncomingMessage;\nconst readStart = incoming.readStart;\nconst readStop = incoming.readStop;\n\nconst debug = require('util').debuglog('http');\nexports.debug = debug;\n\nexports.CRLF = '\\r\\n';\nexports.chunkExpression = /chunk/i;\nexports.continueExpression = /100-continue/i;\nexports.methods = HTTPParser.methods;\n\nconst kOnHeaders = HTTPParser.kOnHeaders | 0;\nconst kOnHeadersComplete = HTTPParser.kOnHeadersComplete | 0;\nconst kOnBody = HTTPParser.kOnBody | 0;\nconst kOnMessageComplete = HTTPParser.kOnMessageComplete | 0;\n\n// Only called in the slow case where slow means\n// that the request headers were either fragmented\n// across multiple TCP packets or too large to be\n// processed in a single run. This method is also\n// called to process trailing HT": {
        "count": 1,
        "size": 5648
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst NativeModule = require('native_module');\nconst util = require('util');\nconst internalModule = require('internal/module');\nconst internalUtil = require('internal/util');\nconst runInThisContext = require('vm').runInThisContext;\nconst assert = require('assert').ok;\nconst fs = require('fs');\nconst path = require('path');\nconst internalModuleReadFile = process.binding('fs').internalModuleReadFile;\nconst internalModuleStat = process.binding('fs').internalModuleStat;\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  if (parent && parent.children) {\n    parent.children.push(this);\n  }\n\n  this.filename = null;\n  this.loaded = false;\n  this.children": {
        "count": 1,
        "size": 15024
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst StringDecoder = require('string_decoder').StringDecoder;\nconst Buffer = require('buffer').Buffer;\nconst EventEmitter = require('events');\nconst net = require('net');\nconst dgram = require('dgram');\nconst util = require('util');\nconst constants = require('constants');\nconst assert = require('assert');\n\nconst Process = process.binding('process_wrap').Process;\nconst WriteWrap = process.binding('stream_wrap').WriteWrap;\nconst uv = process.binding('uv');\nconst Pipe = process.binding('pipe_wrap').Pipe;\nconst TTY = process.binding('tty_wrap').TTY;\nconst TCP = process.binding('tcp_wrap').TCP;\nconst UDP = process.binding('udp_wrap').UDP;\nconst SocketList = require('internal/socket_list');\n\nconst errnoException = util._errnoException;\nconst SocketListSend = SocketList.SocketListSend;\nconst SocketListReceive = SocketList.SocketListReceive;\n\nmodule.exports = {\n  ChildProcess,\n  setupChannel,\n  _validateStdio,\n  getSocketList\n};\n\n// this ob": {
        "count": 1,
        "size": 22168
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst Timer = process.binding('timer_wrap').Timer;\nconst L = require('_linklist');\nconst assert = require('assert').ok;\nconst util = require('util');\nconst debug = util.debuglog('timer');\nconst kOnTimeout = Timer.kOnTimeout | 0;\n\n// Timeout values > TIMEOUT_MAX are set to 1.\nconst TIMEOUT_MAX = 2147483647; // 2^31-1\n\n// IDLE TIMEOUTS\n//\n// Because often many sockets will have the same idle timeout we will not\n// use one timeout watcher per item. It is too much overhead.  Instead\n// we'll use a single watcher for all sockets with the same timeout value\n// and a linked list. This technique is described in the libev manual:\n// http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Be_smart_about_timeouts\n\n// Object containing all lists, timers\n// key = time in milliseconds\n// value = list\nvar lists = {};\n\n\n// call this whenever the item is active (not idle)\n// it will reset its timeout.\n// the main function - creates lists on demand and t": {
        "count": 1,
        "size": 15224
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst assert = require('assert').ok;\nconst Stream = require('stream');\nconst timers = require('timers');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst Buffer = require('buffer').Buffer;\nconst common = require('_http_common');\n\nconst CRLF = common.CRLF;\nconst chunkExpression = common.chunkExpression;\nconst debug = common.debug;\n\nconst connectionExpression = /^Connection$/i;\nconst transferEncodingExpression = /^Transfer-Encoding$/i;\nconst closeExpression = /close/i;\nconst contentLengthExpression = /^Content-Length$/i;\nconst dateExpression = /^Date$/i;\nconst expectExpression = /^Expect$/i;\nconst trailerExpression = /^Trailer$/i;\n\nconst automaticHeaders = {\n  connection: true,\n  'content-length': true,\n  'transfer-encoding': true,\n  date: true\n};\n\n\nvar dateCache;\nfunction utcDate() {\n  if (!dateCache) {\n    var d = new Date();\n    dateCache = d.toUTCString();\n    timers.enroll(utcDate, 1000 - d.getMil": {
        "count": 1,
        "size": 18968
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst assert = require('assert');\nconst Buffer = require('buffer').Buffer;\nconst util = require('util');\nconst EventEmitter = require('events');\nconst constants = require('constants');\n\nconst UDP = process.binding('udp_wrap').UDP;\nconst SendWrap = process.binding('udp_wrap').SendWrap;\n\nconst BIND_STATE_UNBOUND = 0;\nconst BIND_STATE_BINDING = 1;\nconst BIND_STATE_BOUND = 2;\n\n// lazily loaded\nvar cluster = null;\nvar dns = null;\n\nconst errnoException = util._errnoException;\nconst exceptionWithHostPort = util._exceptionWithHostPort;\n\nfunction lookup(address, family, callback) {\n  if (!dns)\n    dns = require('dns');\n\n  return dns.lookup(address, family, callback);\n}\n\n\nfunction lookup4(address, callback) {\n  return lookup(address || '0.0.0.0', 4, callback);\n}\n\n\nfunction lookup6(address, callback) {\n  return lookup(address || '::0', 6, callback);\n}\n\n\nfunction newHandle(type) {\n  if (type == 'udp4') {\n    var handle = new UDP();\n    handle.lo": {
        "count": 1,
        "size": 12240
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst assert = require('assert');\nconst EventEmitter = require('events');\nconst stream = require('stream');\nconst tls = require('tls');\nconst util = require('util');\nconst common = require('_tls_common');\nconst debug = util.debuglog('tls-legacy');\nconst Buffer = require('buffer').Buffer;\nconst Timer = process.binding('timer_wrap').Timer;\nvar Connection = null;\ntry {\n  Connection = process.binding('crypto').Connection;\n} catch (e) {\n  throw new Error('node.js not compiled with openssl crypto support.');\n}\n\nfunction SlabBuffer() {\n  this.create();\n}\n\n\nSlabBuffer.prototype.create = function create() {\n  this.isFull = false;\n  this.pool = new Buffer(tls.SLAB_BUFFER_SIZE);\n  this.offset = 0;\n  this.remaining = this.pool.length;\n};\n\n\nSlabBuffer.prototype.use = function use(context, fn, size) {\n  if (this.remaining === 0) {\n    this.isFull = true;\n    return 0;\n  }\n\n  var actualSize = this.remaining;\n\n  if (size !== null) actualSize = Math.": {
        "count": 1,
        "size": 22608
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst assert = require('assert');\nconst crypto = require('crypto');\nconst net = require('net');\nconst tls = require('tls');\nconst util = require('util');\nconst common = require('_tls_common');\nconst StreamWrap = require('_stream_wrap').StreamWrap;\nconst Buffer = require('buffer').Buffer;\nconst Duplex = require('stream').Duplex;\nconst debug = util.debuglog('tls');\nconst Timer = process.binding('timer_wrap').Timer;\nconst tls_wrap = process.binding('tls_wrap');\nconst TCP = process.binding('tcp_wrap').TCP;\nconst Pipe = process.binding('pipe_wrap').Pipe;\n\nfunction onhandshakestart() {\n  debug('onhandshakestart');\n\n  var self = this;\n  var ssl = self._handle;\n  var now = Timer.now();\n\n  assert(now >= ssl.lastHandshakeTime);\n\n  if ((now - ssl.lastHandshakeTime) >= tls.CLIENT_RENEG_WINDOW * 1000) {\n    ssl.handshakes = 0;\n  }\n\n  var first = (ssl.lastHandshakeTime === 0);\n  ssl.lastHandshakeTime = now;\n  if (first) return;\n\n  if (++ssl.handsh": {
        "count": 1,
        "size": 28288
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst assert = require('assert');\nconst util = require('util');\nconst Socket = require('net').Socket;\nconst JSStream = process.binding('js_stream').JSStream;\nconst uv = process.binding('uv');\nconst debug = util.debuglog('stream_wrap');\n\nfunction StreamWrap(stream) {\n  const handle = new JSStream();\n\n  this.stream = stream;\n\n  this._list = null;\n\n  const self = this;\n  handle.close = function(cb) {\n    debug('close');\n    self.doClose(cb);\n  };\n  handle.isAlive = function() {\n    return self.isAlive();\n  };\n  handle.isClosing = function() {\n    return self.isClosing();\n  };\n  handle.onreadstart = function() {\n    return self.readStart();\n  };\n  handle.onreadstop = function() {\n    return self.readStop();\n  };\n  handle.onshutdown = function(req) {\n    return self.doShutdown(req);\n  };\n  handle.onwrite = function(req, bufs) {\n    return self.doWrite(req, bufs);\n  };\n\n  this.stream.pause();\n  this.stream.on('error', function(err) {\n    s": {
        "count": 1,
        "size": 4664
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst binding = process.binding('contextify');\nconst Script = binding.ContextifyScript;\n\n// The binding provides a few useful primitives:\n// - ContextifyScript(code, { filename = \"evalmachine.anonymous\",\n//                            displayErrors = true } = {})\n//   with methods:\n//   - runInThisContext({ displayErrors = true } = {})\n//   - runInContext(sandbox, { displayErrors = true, timeout = undefined } = {})\n// - makeContext(sandbox)\n// - isContext(sandbox)\n// From this we build the entire documented API.\n\nScript.prototype.runInNewContext = function(sandbox, options) {\n  var context = exports.createContext(sandbox);\n  return this.runInContext(context, options);\n};\n\nexports.Script = Script;\n\nexports.createScript = function(code, options) {\n  return new Script(code, options);\n};\n\nexports.createContext = function(sandbox) {\n  if (sandbox === undefined) {\n    sandbox = {};\n  } else if (binding.isContext(sandbox)) {\n    return sandb": {
        "count": 1,
        "size": 1728
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst binding = process.binding('os');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst isWindows = process.platform === 'win32';\n\nexports.hostname = binding.getHostname;\nexports.loadavg = binding.getLoadAvg;\nexports.uptime = binding.getUptime;\nexports.freemem = binding.getFreeMem;\nexports.totalmem = binding.getTotalMem;\nexports.cpus = binding.getCPUs;\nexports.type = binding.getOSType;\nexports.release = binding.getOSRelease;\nexports.networkInterfaces = binding.getInterfaceAddresses;\nexports.homedir = binding.getHomeDirectory;\n\n\nexports.arch = function() {\n  return process.arch;\n};\n\nexports.platform = function() {\n  return process.platform;\n};\n\nconst trailingSlashRe = isWindows ? /[^:]\\\\$/\n                                  : /.\\/$/;\n\nexports.tmpdir = function() {\n  var path;\n  if (isWindows) {\n    path = process.env.TEMP ||\n           process.env.TMP ||\n           (process.env.SystemRoot || process.en": {
        "count": 1,
        "size": 1696
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst constants = require('constants');\nconst tls = require('tls');\n\n// Lazily loaded\nvar crypto = null;\n\nconst binding = process.binding('crypto');\nconst NativeSecureContext = binding.SecureContext;\n\nfunction SecureContext(secureProtocol, flags, context) {\n  if (!(this instanceof SecureContext)) {\n    return new SecureContext(secureProtocol, flags, context);\n  }\n\n  if (context) {\n    this.context = context;\n  } else {\n    this.context = new NativeSecureContext();\n\n    if (secureProtocol) {\n      this.context.init(secureProtocol);\n    } else {\n      this.context.init();\n    }\n  }\n\n  if (flags) this.context.setOptions(flags);\n}\n\nexports.SecureContext = SecureContext;\n\n\nexports.createSecureContext = function createSecureContext(options, context) {\n  if (!options) options = {};\n\n  var secureOptions = options.secureOptions;\n  if (options.honorCipherOrder)\n    secureOptions |= constants.SSL_OP_CIPHER_SERVER_PREFERENCE;\n\n  var c = new Secu": {
        "count": 1,
        "size": 4392
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst net = require('net');\nconst url = require('url');\nconst util = require('util');\nconst binding = process.binding('crypto');\nconst Buffer = require('buffer').Buffer;\nconst constants = require('constants');\n\n// Allow {CLIENT_RENEG_LIMIT} client-initiated session renegotiations\n// every {CLIENT_RENEG_WINDOW} seconds. An error event is emitted if more\n// renegotations are seen. The settings are applied to all remote client\n// connections.\nexports.CLIENT_RENEG_LIMIT = 3;\nexports.CLIENT_RENEG_WINDOW = 600;\n\nexports.SLAB_BUFFER_SIZE = 10 * 1024 * 1024;\n\nexports.DEFAULT_CIPHERS = constants.defaultCipherList;\n\nexports.DEFAULT_ECDH_CURVE = 'prime256v1';\n\nexports.getCiphers = function() {\n  const names = binding.getSSLCiphers();\n  // Drop all-caps names in favor of their lowercase aliases,\n  var ctx = {};\n  names.forEach(function(name) {\n    if (/^[0-9A-Z\\-]+$/.test(name)) name = name.toLowerCase();\n    ctx[name] = true;\n  });\n  return Obj": {
        "count": 1,
        "size": 7296
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst net = require('net');\nconst util = require('util');\n\nconst cares = process.binding('cares_wrap');\nconst uv = process.binding('uv');\n\nconst GetAddrInfoReqWrap = cares.GetAddrInfoReqWrap;\nconst GetNameInfoReqWrap = cares.GetNameInfoReqWrap;\nconst QueryReqWrap = cares.QueryReqWrap;\n\nconst isIp = net.isIP;\n\n\nfunction errnoException(err, syscall, hostname) {\n  // FIXME(bnoordhuis) Remove this backwards compatibility shite and pass\n  // the true error to the user. ENOTFOUND is not even a proper POSIX error!\n  if (err === uv.UV_EAI_MEMORY ||\n      err === uv.UV_EAI_NODATA ||\n      err === uv.UV_EAI_NONAME) {\n    err = 'ENOTFOUND';\n  }\n  var ex = null;\n  if (typeof err === 'string') {  // c-ares error code.\n    ex = new Error(syscall + ' ' + err + (hostname ? ' ' + hostname : ''));\n    ex.code = err;\n    ex.errno = err;\n    ex.syscall = syscall;\n  } else {\n    ex = util._errnoException(err, syscall);\n  }\n  if (hostname) {\n    ex.hostna": {
        "count": 1,
        "size": 9536
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst net = require('net');\nconst util = require('util');\nconst EventEmitter = require('events');\nconst debug = util.debuglog('http');\n\n// New Agent code.\n\n// The largest departure from the previous implementation is that\n// an Agent instance holds connections for a variable number of host:ports.\n// Surprisingly, this is still API compatible as far as third parties are\n// concerned. The only code that really notices the difference is the\n// request object.\n\n// Another departure is that all code related to HTTP parsing is in\n// ClientRequest.onSocket(). The Agent is now *strictly*\n// concerned with managing a connection pool.\n\nfunction Agent(options) {\n  if (!(this instanceof Agent))\n    return new Agent(options);\n\n  EventEmitter.call(this);\n\n  var self = this;\n\n  self.defaultPort = 80;\n  self.protocol = 'http:';\n\n  self.options = util._extend({}, options);\n\n  // don't confuse net and make it think that we're connecting to a pipe\n  se": {
        "count": 1,
        "size": 7392
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst prefix = '(node) ';\n\n// All the internal deprecations have to use this function only, as this will\n// prepend the prefix to the actual message.\nexports.deprecate = function(fn, msg) {\n  return exports._deprecate(fn, `${prefix}${msg}`);\n};\n\n// All the internal deprecations have to use this function only, as this will\n// prepend the prefix to the actual message.\nexports.printDeprecationMessage = function(msg, warned) {\n  return exports._printDeprecationMessage(`${prefix}${msg}`, warned);\n};\n\nexports._printDeprecationMessage = function(msg, warned) {\n  if (process.noDeprecation)\n    return true;\n\n  if (warned)\n    return warned;\n\n  if (process.throwDeprecation)\n    throw new Error(msg);\n  else if (process.traceDeprecation)\n    console.trace(msg.startsWith(prefix) ? msg.replace(prefix, '') : msg);\n  else\n    console.error(msg);\n\n  return true;\n};\n\n// Mark that a method should not be used.\n// Returns a modified function which warns ": {
        "count": 1,
        "size": 1600
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nconst protocolPattern = /^([a-z0-9.+-]+:)/i;\nconst portPattern = /:[0-9]*$/;\n\n// Special case for a simple path URL\nconst simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n\n// RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\nconst delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'];\n\n// RFC ": {
        "count": 1,
        "size": 22592
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst tls = require('tls');\nconst url = require('url');\nconst http = require('http');\nconst util = require('util');\nconst inherits = util.inherits;\nconst debug = util.debuglog('https');\n\nfunction Server(opts, requestListener) {\n  if (!(this instanceof Server)) return new Server(opts, requestListener);\n\n  if (process.features.tls_npn && !opts.NPNProtocols) {\n    opts.NPNProtocols = ['http/1.1', 'http/1.0'];\n  }\n\n  tls.Server.call(this, opts, http._connectionListener);\n\n  this.httpAllowHalfOpen = false;\n\n  if (requestListener) {\n    this.addListener('request', requestListener);\n  }\n\n  this.addListener('clientError', function(err, conn) {\n    conn.destroy();\n  });\n\n  this.timeout = 2 * 60 * 1000;\n}\ninherits(Server, tls.Server);\nexports.Server = Server;\n\nServer.prototype.setTimeout = http.Server.prototype.setTimeout;\n\nexports.createServer = function(opts, requestListener) {\n  return new Server(opts, requestListener);\n};\n\n\n// HTTPS agents": {
        "count": 1,
        "size": 3952
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\n\nfunction Console(stdout, stderr) {\n  if (!(this instanceof Console)) {\n    return new Console(stdout, stderr);\n  }\n  if (!stdout || typeof stdout.write !== 'function') {\n    throw new TypeError('Console expects a writable stream instance');\n  }\n  if (!stderr) {\n    stderr = stdout;\n  }\n  var prop = {\n    writable: true,\n    enumerable: false,\n    configurable: true\n  };\n  prop.value = stdout;\n  Object.defineProperty(this, '_stdout', prop);\n  prop.value = stderr;\n  Object.defineProperty(this, '_stderr', prop);\n  prop.value = new Map();\n  Object.defineProperty(this, '_times', prop);\n\n  // bind the prototype functions to this Console instance\n  var keys = Object.keys(Console.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var k = keys[v];\n    this[k] = this[k].bind(this);\n  }\n}\n\nConsole.prototype.log = function() {\n  this._stdout.write(util.format.apply(this, arguments) + '\\n');\n};\n\n\nConsole.prot": {
        "count": 1,
        "size": 2336
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\nconst Stream = require('stream');\n\nfunction readStart(socket) {\n  if (socket && !socket._paused && socket.readable)\n    socket.resume();\n}\nexports.readStart = readStart;\n\nfunction readStop(socket) {\n  if (socket)\n    socket.pause();\n}\nexports.readStop = readStop;\n\n\n/* Abstract base class for ServerRequest and ClientResponse. */\nfunction IncomingMessage(socket) {\n  Stream.Readable.call(this);\n\n  // XXX This implementation is kind of all over the place\n  // When the parser emits body chunks, they go in this list.\n  // _read() pulls them out, and when it finds EOF, it ends.\n\n  this.socket = socket;\n  this.connection = socket;\n\n  this.httpVersionMajor = null;\n  this.httpVersionMinor = null;\n  this.httpVersion = null;\n  this.complete = false;\n  this.headers = {};\n  this.rawHeaders = [];\n  this.trailers = {};\n  this.rawTrailers = [];\n\n  this.readable = true;\n\n  this.upgrade = null;\n\n  // request (server) only\n": {
        "count": 1,
        "size": 4608
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst EventEmitter = require('events');\n\n\nexports.IncomingMessage = require('_http_incoming').IncomingMessage;\n\n\nconst common = require('_http_common');\nexports.METHODS = common.methods.slice().sort();\n\n\nexports.OutgoingMessage = require('_http_outgoing').OutgoingMessage;\n\n\nconst server = require('_http_server');\nexports.ServerResponse = server.ServerResponse;\nexports.STATUS_CODES = server.STATUS_CODES;\n\n\nconst agent = require('_http_agent');\nconst Agent = exports.Agent = agent.Agent;\nexports.globalAgent = agent.globalAgent;\n\nconst client = require('_http_client');\nconst ClientRequest = exports.ClientRequest = client.ClientRequest;\n\nexports.request = function(options, cb) {\n  return new ClientRequest(options, cb);\n};\n\nexports.get = function(options, cb) {\n  var req = exports.request(options, cb);\n  req.end();\n  return req;\n};\n\nexports._connectionListener = s": {
        "count": 1,
        "size": 2704
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst debug = util.debuglog('child_process');\nconst constants = require('constants');\n\nconst uv = process.binding('uv');\nconst spawn_sync = process.binding('spawn_sync');\nconst Buffer = require('buffer').Buffer;\nconst Pipe = process.binding('pipe_wrap').Pipe;\nconst child_process = require('internal/child_process');\n\nconst errnoException = util._errnoException;\nconst _validateStdio = child_process._validateStdio;\nconst setupChannel = child_process.setupChannel;\nconst ChildProcess = exports.ChildProcess = child_process.ChildProcess;\n\nexports.fork = function(modulePath /*, args, options*/) {\n\n  // Get options and args arguments.\n  var options, args, execArgv;\n  if (Array.isArray(arguments[1])) {\n    args = arguments[1];\n    options = util._extend({}, arguments[2]);\n  } else if (arguments[1] && typeof arguments[1] !== 'object') {\n    throw new TypeError('Incorre": {
        "count": 1,
        "size": 11928
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst net = require('net');\nconst TTY = process.binding('tty_wrap').TTY;\nconst isTTY = process.binding('tty_wrap').isTTY;\nconst inherits = util.inherits;\nconst errnoException = util._errnoException;\n\n\nexports.isatty = function(fd) {\n  return isTTY(fd);\n};\n\n\n// backwards-compat\nexports.setRawMode = internalUtil.deprecate(function(flag) {\n  if (!process.stdin.isTTY) {\n    throw new Error('can\\'t set raw mode on non-tty');\n  }\n  process.stdin.setRawMode(flag);\n}, 'tty.setRawMode is deprecated. ' +\n   'Use process.stdin.setRawMode instead.');\n\n\nfunction ReadStream(fd, options) {\n  if (!(this instanceof ReadStream))\n    return new ReadStream(fd, options);\n\n  options = util._extend({\n    highWaterMark: 0,\n    readable: true,\n    writable: false,\n    handle: new TTY(fd, true)\n  }, options);\n\n  net.Socket.call(this, options);\n\n  this.isRaw = false;\n  this.isTTY = tr": {
        "count": 1,
        "size": 2688
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\nconst isWindows = process.platform === 'win32';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' +\n                        util.inspect(path));\n  }\n}\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  var res = [];\n  for (var i = 0; i < parts.length; i++) {\n    var p = parts[i];\n\n    // ignore empty parts\n    if (!p || p === '.')\n      continue;\n\n    if (p === '..') {\n      if (res.length && res[res.length - 1] !== '..') {\n        res.pop();\n      } else if (allowAboveRoot) {\n        res.push('..');\n      }\n    } else {\n      res.push(p);\n    }\n  }\n\n  return res;\n}\n\n// Returns an array with empty element": {
        "count": 1,
        "size": 15024
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\nconst net = require('net');\nconst EventEmitter = require('events');\nconst HTTPParser = process.binding('http_parser').HTTPParser;\nconst assert = require('assert').ok;\nconst common = require('_http_common');\nconst parsers = common.parsers;\nconst freeParser = common.freeParser;\nconst debug = common.debug;\nconst CRLF = common.CRLF;\nconst continueExpression = common.continueExpression;\nconst chunkExpression = common.chunkExpression;\nconst httpSocketSetup = common.httpSocketSetup;\nconst OutgoingMessage = require('_http_outgoing').OutgoingMessage;\n\nconst STATUS_CODES = exports.STATUS_CODES = {\n  100 : 'Continue',\n  101 : 'Switching Protocols',\n  102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918\n  200 : 'OK',\n  201 : 'Created',\n  202 : 'Accepted',\n  203 : 'Non-Authoritative Information',\n  204 : 'No Content',\n  205 : 'Reset Content',\n  206 : 'Partial Content',\n  207 : 'Multi-Status',       ": {
        "count": 1,
        "size": 16736
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst util = require('util');\nconst net = require('net');\nconst url = require('url');\nconst EventEmitter = require('events');\nconst HTTPParser = process.binding('http_parser').HTTPParser;\nconst assert = require('assert').ok;\nconst common = require('_http_common');\nconst httpSocketSetup = common.httpSocketSetup;\nconst parsers = common.parsers;\nconst freeParser = common.freeParser;\nconst debug = common.debug;\nconst OutgoingMessage = require('_http_outgoing').OutgoingMessage;\nconst Agent = require('_http_agent');\nconst Buffer = require('buffer').Buffer;\n\n\nfunction ClientRequest(options, cb) {\n  var self = this;\n  OutgoingMessage.call(self);\n\n  if (typeof options === 'string') {\n    options = url.parse(options);\n  } else {\n    options = util._extend({}, options);\n  }\n\n  var agent = options.agent;\n  var defaultAgent = options._defaultAgent || Agent.globalAgent;\n  if (agent === false) {\n    agent = new defaultAgent.constructor();\n  } else ": {
        "count": 1,
        "size": 16328
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nconst uv = process.binding('uv');\nconst Buffer = require('buffer').Buffer;\nconst internalUtil = require('internal/util');\nconst binding = process.binding('util');\n\nvar Debug;\n\nconst formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (typeof f !== 'string') {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  if (arguments.length === 1) return f;\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n        // falls through\n      default:\n        return x;\n ": {
        "count": 1,
        "size": 24792
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nfunction init(list) {\n  list._idleNext = list;\n  list._idlePrev = list;\n}\nexports.init = init;\n\n\n// show the most idle item\nfunction peek(list) {\n  if (list._idlePrev == list) return null;\n  return list._idlePrev;\n}\nexports.peek = peek;\n\n\n// remove the most idle item from the list\nfunction shift(list) {\n  var first = list._idlePrev;\n  remove(first);\n  return first;\n}\nexports.shift = shift;\n\n\n// remove a item from its list\nfunction remove(item) {\n  if (item._idleNext) {\n    item._idleNext._idlePrev = item._idlePrev;\n  }\n\n  if (item._idlePrev) {\n    item._idlePrev._idleNext = item._idleNext;\n  }\n\n  item._idleNext = null;\n  item._idlePrev = null;\n}\nexports.remove = remove;\n\n\n// remove a item from its list and place at the end.\nfunction append(list, item) {\n  remove(item);\n  item._idleNext = list._idleNext;\n  list._idleNext._idlePrev = item;\n  item._idlePrev = list;\n  list._idleNext = item;\n}\nexports.append = append;\n\n\nfunction isEmpty(l": {
        "count": 1,
        "size": 1128
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nfunction posix(path) {\n\treturn path.charAt(0) === '/';\n};\n\nfunction win32(path) {\n\t// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n\tvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\tvar result = splitDeviceRe.exec(path);\n\tvar device = result[1] || '';\n\tvar isUnc = !!device && device.charAt(1) !== ':';\n\n\t// UNC paths are always absolute\n\treturn !!result[2] || isUnc;\n};\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;\n\n});": {
        "count": 1,
        "size": 696
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nmodule.exports = Readable;\nReadable.ReadableState = ReadableState;\n\nconst EE = require('events');\nconst Stream = require('stream');\nconst Buffer = require('buffer').Buffer;\nconst util = require('util');\nconst debug = util.debuglog('stream');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Stream.Duplex)\n    this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;\n\n  // cast to ": {
        "count": 1,
        "size": 24800
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nmodule.exports = Stream;\n\nconst EE = require('events');\nconst util = require('util');\n\nutil.inherits(Stream, EE);\nStream.Readable = require('_stream_readable');\nStream.Writable = require('_stream_writable');\nStream.Duplex = require('_stream_duplex');\nStream.Transform = require('_stream_transform');\nStream.PassThrough = require('_stream_passthrough');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.": {
        "count": 1,
        "size": 2536
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nmodule.exports = printfReplacer;\n\nfunction printfReplacer(template, replacements) {\n  if (!(replacements instanceof Object)) {\n    return template;\n  }\n\n  return template.replace(/%[^%]/mg, function(match, offset, string) {\n    var char = match[1];\n    var escaped = offset > 0 && string[offset - 1] === '%';\n    if (!escaped && char in replacements) {\n      match = replacements[char];\n    }\n    return match;\n  });\n}\n\n});": {
        "count": 1,
        "size": 528
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nmodule.exports = {SocketListSend, SocketListReceive};\n\nconst EventEmitter = require('events');\nconst util = require('util');\n\n// This object keep track of the socket there are sended\nfunction SocketListSend(slave, key) {\n  EventEmitter.call(this);\n\n  this.key = key;\n  this.slave = slave;\n}\nutil.inherits(SocketListSend, EventEmitter);\n\nSocketListSend.prototype._request = function(msg, cmd, callback) {\n  var self = this;\n\n  if (!this.slave.connected) return onclose();\n  this.slave.send(msg);\n\n  function onclose() {\n    self.slave.removeListener('internalMessage', onreply);\n    callback(new Error('Slave closed before reply'));\n  }\n\n  function onreply(msg) {\n    if (!(msg.cmd === cmd && msg.key === self.key)) return;\n    self.slave.removeListener('disconnect', onclose);\n    self.slave.removeListener('internalMessage', onreply);\n\n    callback(null, msg);\n  }\n\n  this.slave.once('disconnect', onclose);\n  this.slave.on('internalMessage', onr": {
        "count": 1,
        "size": 2736
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nmodule.exports.stripBOM = stripBOM;\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n * because the buffer-to-string conversion in `fs.readFileSync()`\n * translates it to FEFF, the UTF-16 BOM.\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n});": {
        "count": 1,
        "size": 456
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar assert = require('assert');\nvar debug = require('./debug')('watcher');\nvar fs = require('fs');\nvar path = require('path');\n\nvar from = path.resolve(__dirname, 'watcher');\nvar files = fs.readdirSync(from);\n\ndebug('watchers:', files);\n\nexports._watchers = files.map(function(f) {\n  var watcher = require(path.resolve(from, f));\n  watcher.name = f.replace('.js', '');\n  return watcher;\n});\n\nexports.start = function(parentCtl, cluster, clusterControl, config) {\n  var bus;\n\n  // parentCtl is optional\n  // cluster and strong-cluster-control are injected to allow mocking\n  assert(cluster);\n  assert(clusterControl);\n\n  if (cluster.isMaster) {\n    bus = new EventEmitter;\n\n    clusterControl.on('fork', function(worker) {\n      worker.on('message', function(msg) {\n        var cmd = msg.cmd;\n        msg = msg.msg;\n\n        switch (cmd) {\n          case 'watcher:emit':\n            debug('emit %j": {
        "count": 1,
        "size": 2944
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar debug = require('debug')('strong-supervisor:adapter');\nvar os = require('os');\nvar path = require('path');\nvar appmetrics; // = require('appmetrics') if started\nvar appmetricsStarted = false; // XXX(sam) === !!appmetrics, so redundant?\nvar monitor; // = appmetrics.monitor() XXX(sam) so maybe call this 'monitor'?\n\n// Export an EventEmitter\n\nmodule.exports = exports = new EventEmitter;\n\n// Export the desired functions\nvar metrics = {\n  startCpuProfiling: startCpuProfiling,\n  stopCpuProfiling: stopCpuProfiling,\n  startTrackingObjects: startTrackingObjects,\n  stopTrackingObjects: stopTrackingObjects\n};\n\nvar config = {\n  hostname: os.hostname(),\n  appName: path.basename(process.argv[1]), // FIXME this is sl-run, not the app\n  key: 'testkey'\n};\n\nvar internal = {\n  on: internal_on, // XXX(sam) where is this used?\n  supports: {watchdog: false} // XXX(sam) probably not needed\n};\n\nvar dyni": {
        "count": 1,
        "size": 13792
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar _ = require('lodash');\nvar agent = require('./agent');\nvar async = require('async');\n\n// FIXME - I don't think we need licensing anymore\n// var license = require('strongloop-license');\n\n/*\n * List of capabilities that can be queries through the capabilities API.\n *\n * Check functions callback takes two arguments:\n *\n * {boolean} status Whether the check was successful.\n * {string} reason A user friendly explination of the reason the check failed.\n *\n * Reason messages should state what feature they are in reference to, and\n * must be properly formatted. Capitalize the first word of each sentence, and\n * terminate with a period.\n *\n * eg: 'Tracing license is missing or expired.'\n */\n\n/* 7/2/2015\n * The heap and CPU profilers are supported on all platforms and\n * architectures.  CPU profiling in watchdog mode is only supported on\n * Linux (and soon OS X) on x86 and x64.\n */\n\nvar capabilities = {\n  watchdog: {\n    name: 'Smart profi": {
        "count": 1,
        "size": 3576
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar agent = require('../agent');\nvar debug = console.log; // Will be re-assigned during initialization\n\nvar stallout;\nvar stalls;\n\nexports.stallout = function(_stallout) {\n  debug('set stallout %j (was %j stalls %j)', _stallout, stallout, stalls);\n\n  stallout = _stallout;\n  stalls = 0;\n};\n\nexports.worker = function(handle) {\n  debug = handle.debug;\n\n  agent().internal.on('watchdogActivationCount', function(count) {\n    if (!stallout)\n      return;\n    if (!count)\n      return; // It's 0 if no stalls have occurred.\n\n    stalls += count;\n\n    handle.debug('stallout %j stalls %j (new %j)', stallout, stalls, count);\n\n    if (stalls < stallout)\n      return;\n\n    agent().metrics.stopCpuProfiling(function(err, profile) {\n      if (err) {\n        console.error('stop cpu profiler on stalls %j failed: %s', stalls, err);\n      } else {\n        handle.emit({\n          cmd: 'cpu:profile-data',\n          stalls: stalls,\n          stallout: stallo": {
        "count": 1,
        "size": 1656
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar cluster = require('cluster');\nvar tracer = require('../tracer');\n\nexports.worker = function(handle) {\n  var config = handle.config;\n\n  if (!config.enableTracing) {\n    handle.debug('tracing is disabled');\n    return;\n  }\n\n  if (!tracer()) {\n    console.error('Did not start trace object on worker %d, license missing?',\n      cluster.worker.id);\n    return;\n  }\n\n  tracer().on('trace:object', function(record) {\n    handle.send({\n      cmd: 'trace:object',\n      record: JSON.stringify(record),\n    });\n  });\n};\n\n});": {
        "count": 1,
        "size": 624
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar debug = require('./debug')('start-command');\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = exports = resolveArgs;\n\n// for tests\nexports.resolvePath = resolvePath;\nexports.resolvePackageFromPath = resolvePackageFromPath;\nexports.resolveDir = resolveDir;\nexports.fromStart = fromStart;\n\n// We want to be in the directory of the file we are running so we can pick up\n// configuration stored in it's working directory, so part of resolving the path\n// of the script is also resolving what directory the script should be run from.\nfunction resolveArgs(pwd, argv) {\n  var replacer = symlinkReplacer(pwd);\n  var cwd = fs.realpathSync(pwd);\n  var script = argv[2] || '.';\n  debug('resolving CWD: %j, path: %j', cwd, script);\n  var app = resolvePath(cwd, script);\n  var stat = app.stat;\n  if (app.error) {\n    return app;\n  }\n\n  if (stat.isFile()) {\n    // given path was either foo/app.js that exists or foo/app that doesn't\n  ": {
        "count": 1,
        "size": 5928
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar domain;\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    domain = domain || require('domain');\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = {": {
        "count": 1,
        "size": 11400
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * An auto incrementing id which we can use to create \"unique\" Ultron instances\n * so we can track the event emitters that are added through the Ultron\n * interface.\n *\n * @type {Number}\n * @private\n */\nvar id = 0;\n\n/**\n * Ultron is high-intelligence robot. It gathers intelligence so it can start improving\n * upon his rudimentary design. It will learn from your EventEmitting patterns\n * and exterminate them.\n *\n * @constructor\n * @param {EventEmitter} ee EventEmitter instance we need to wrap.\n * @api public\n */\nfunction Ultron(ee) {\n  if (!(this instanceof Ultron)) return new Ultron(ee);\n\n  this.id = id++;\n  this.ee = ee;\n}\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @returns {Ultron}\n * @api public\n */\nUltron.prototype.on = fun": {
        "count": 1,
        "size": 3056
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar jju = require('jju');\n\nfunction parse(text, reviver) {\n    try {\n        return JSON.parse(text, reviver);\n    } catch (err) {\n        // we expect this to throw with a more informative message\n        jju.parse(text, {\n            mode: 'json',\n            reviver: reviver\n        });\n\n        // backup if jju is not as strict as JSON.parse; re-throw error\n        // data-dependent code path, I do not know how to cover it\n        throw err;\n    }\n}\n\nexports.parse = parse;\n\n});": {
        "count": 1,
        "size": 592
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar printfReplacer = require('./printf-replacer');\n\nexports.expand = function(str, worker) {\n  return printfReplacer(str || '', workerParams(worker));\n};\n\nfunction workerParams(worker) {\n  var vars = {};\n  if ('id' in worker)\n    vars.w = worker.id;\n  if ('pid' in worker)\n    vars.p = worker.pid;\n  if ('appName' in worker) // normalize dots out of app names\n    vars.a = String(worker.appName).replace(/\\./g, '-');\n  if ('hostname' in worker) // truncate hostname to first component\n    vars.h = String(worker.hostname).replace(/\\..*/, '');\n  return vars;\n}\n\n});": {
        "count": 1,
        "size": 672
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\n\nvar tracer = require('../tracer');\n\nexports.worker = function(handle) {\n  setImmediate(function() {\n    var wd = {\n      cmd: 'status:wd',\n      pwd: process.env.PWD,\n      cwd: process.cwd(),\n      pid: process.pid,\n      isTracing: !!tracer(),\n    };\n\n    // Use agent to get the actual app name being run in this worker\n    var config = configure(null, null, {}, process.env);\n    wd.appName = config.appName;\n\n    handle.emit(wd);\n  });\n};\n\nexports.master = function(handle) {\n  handle.on('status:wd', function(msg, worker) {\n    // Mix-in the worker identity: startTime is known only in the master, and\n    // worker.id is just convenient to do here.\n    msg.pst = worker.startTime;\n    msg.wid = worker.id;\n    handle.send(msg);\n  });\n};\n\n// require() of strongloop.json from this file causes Trace Sequences to not\n// show up in arc Tracing for reasons unknown at this moment.\n//\n// This is a copy of strong-agent:lib/config.js with the off": {
        "count": 1,
        "size": 2016
    },
    "(function (exports, require, module, __filename, __dirname) { 'use strict';\nvar path = require('path');\nvar bindings = require('bindings');\nvar dbg = bindings('debugger');\nvar debuglogEnabled = require('debug')('strong-debugger').enabled;\n\nvar workerPath = require.resolve('./backend/context.js');\nvar scriptRoot = path.dirname(workerPath) + path.sep;\n\nvar startCallbacks = [];\nvar stopCallbacks = [];\nvar listeningOnPort = -1;\n\n/**\n * Start the background thread providing TCP server for DevTools protocol.\n * @param {Number} port\n * @param {Function<Error=,Number>} callback The first argument is the error\n * (if any), the second argument is the actual port number where the debugger\n * is listening on.\n */\nexports.start = function(port, cb) {\n  if (!cb) throw new Error('You must supply a callback argument.');\n\n  if (listeningOnPort > 0) {\n    // The background thread is already running.\n    return process.nextTick(function() {\n      cb(null, listeningOnPort);\n    });\n  }\n\n  startCallbacks.push(cb);\n  if (startCall": {
        "count": 1,
        "size": 2336
    },
    "(function (exports, require, module, __filename, __dirname) { /* eslint-disable require-buffer */\n'use strict';\n\nconst binding = process.binding('buffer');\nconst internalUtil = require('internal/util');\nconst bindingObj = {};\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nexports.kMaxLength = binding.kMaxLength;\n\n\nBuffer.poolSize = 8 * 1024;\nvar poolSize, poolOffset, allocPool;\n\n\nbinding.setupBufferJS(Buffer.prototype, bindingObj);\nconst flags = bindingObj.flags;\nconst kNoZeroFill = 0;\n\n\nfunction createPool() {\n  poolSize = Buffer.poolSize;\n  if (poolSize > 0)\n    flags[kNoZeroFill] = 1;\n  allocPool = new Uint8Array(poolSize);\n  Object.setPrototypeOf(allocPool, Buffer.prototype);\n  poolOffset = 0;\n}\ncreatePool();\n\n\nfunction alignPool() {\n  // Ensure aligned slices\n  if (poolOffset & 0x7) {\n    poolOffset |= 0x7;\n    poolOffset++;\n  }\n}\n\n\nfunction Buffer(arg) {\n  // Common case.\n  if (typeof arg === 'number') {\n    // If less than zero, or NaN.\n    if (arg < 0 || arg": {
        "count": 1,
        "size": 25840
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar fs = require('fs');\n\nfunction Options(defaults) {\n  var internalValues = {};\n  var values = this.value = {};\n  Object.keys(defaults).forEach(function(key) {\n    internalValues[key] = defaults[key];\n    Object.defineProperty(values, key, {\n      get: function() { return internalValues[key]; },\n      configurable: false,\n      enumerable: true\n    });\n  });\n  this.reset = function() {\n    Object.keys(defaults).forEach(function(key) {\n      internalValues[key] = defaults[key];\n    });\n    return this;\n  };\n  this.merge = function(options, required) {\n    options = options || {};\n    if (Object.prototype.toString.call(required) === '[object Array]') {\n      var missing = [];\n      for (var i = 0, l = required.length; i < l; ++i) {\n        var key = required[i];\n        if (!(key in options)) {\n          missing.push(key);\n        }\n      }\n      if (missing.length": {
        "count": 1,
        "size": 2424
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n   ": {
        "count": 1,
        "size": 38656
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(ob": {
        "count": 1,
        "size": 34744
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nmodule.exports = {\n  isValidErrorCode: function(code) {\n    return (code >= 1000 && code <= 1011 && code != 1004 && code != 1005 && code != 1006) ||\n         (code >= 3000 && code <= 4999);\n  },\n  1000: 'normal',\n  1001: 'going away',\n  1002: 'protocol error',\n  1003: 'unsupported data',\n  1004: 'reserved',\n  1005: 'reserved for extensions',\n  1006: 'reserved for extensions',\n  1007: 'inconsistent or invalid data',\n  1008: 'policy violation',\n  1009: 'message too big',\n  1010: 'extension handshake missing',\n  1011: 'an unexpected condition prevented the request from being fulfilled',\n};\n});": {
        "count": 1,
        "size": 808
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar events = require('events')\n  , util = require('util')\n  , EventEmitter = events.EventEmitter\n  , ErrorCodes = require('./ErrorCodes')\n  , bufferUtil = require('./BufferUtil').BufferUtil\n  , PerMessageDeflate = require('./PerMessageDeflate');\n\n/**\n * HyBi Sender implementation\n */\n\nfunction Sender(socket, extensions) {\n  if (this instanceof Sender === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  events.EventEmitter.call(this);\n\n  this._socket = socket;\n  this.extensions = extensions || {};\n  this.firstFragment = true;\n  this.compress = false;\n  this.messageHandlers = [];\n  this.processing = false;\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(Sender, events.EventEmitter);\n\n/**\n * Sends a close instruction to the remote party.\n *\n * @api public\n */\n\nSender.prototype.close = function(cod": {
        "count": 1,
        "size": 7848
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar events = require('events')\n  , util = require('util')\n  , EventEmitter = events.EventEmitter;\n\n/**\n * Hixie Sender implementation\n */\n\nfunction Sender(socket) {\n  if (this instanceof Sender === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  events.EventEmitter.call(this);\n\n  this.socket = socket;\n  this.continuationFrame = false;\n  this.isClosed = false;\n}\n\nmodule.exports = Sender;\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(Sender, events.EventEmitter);\n\n/**\n * Frames and writes data.\n *\n * @api public\n */\n\nSender.prototype.send = function(data, options, cb) {\n  if (this.isClosed) return;\n\n  var isString = typeof data == 'string'\n    , length = isString ? Buffer.byteLength(data) : data.length\n    , lengthbytes = (length > 127) ? 2 : 1 // assume less than 2**14 bytes\n    , writeStartMar": {
        "count": 1,
        "size": 3064
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , Validation = require('./Validation').Validation\n  , ErrorCodes = require('./ErrorCodes')\n  , BufferPool = require('./BufferPool')\n  , bufferUtil = require('./BufferUtil').BufferUtil\n  , PerMessageDeflate = require('./PerMessageDeflate');\n\n/**\n * HyBi Receiver implementation\n */\n\nfunction Receiver (extensions) {\n  if (this instanceof Receiver === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  // memory pool for fragmented messages\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ?\n      (fragmentedPoolPrevUsed + db.used) / 2 :\n      db.used;\n  });\n\n  // memory pool for unfragmented messages\n  var unfra": {
        "count": 1,
        "size": 19792
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , events = require('events')\n  , http = require('http')\n  , crypto = require('crypto')\n  , Options = require('options')\n  , WebSocket = require('./WebSocket')\n  , Extensions = require('./Extensions')\n  , PerMessageDeflate = require('./PerMessageDeflate')\n  , tls = require('tls')\n  , url = require('url');\n\n/**\n * WebSocket Server implementation\n */\n\nfunction WebSocketServer(options, callback) {\n  if (this instanceof WebSocketServer === false) {\n    return new WebSocketServer(options, callback);\n  }\n\n  events.EventEmitter.call(this);\n\n  options = new Options({\n    host: '0.0.0.0',\n    port: null,\n    server: null,\n    verifyClient: null,\n    handleProtocols: null,\n    path: null,\n    noServer: false,\n    disableHixie: false,\n    clientTracking: true,\n    perMessageDeflate: true\n  }).merge(options);\n\n  if": {
        "count": 1,
        "size": 15688
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util');\n\n/**\n * State constants\n */\n\nvar EMPTY = 0\n  , BODY = 1;\nvar BINARYLENGTH = 2\n  , BINARYBODY = 3;\n\n/**\n * Hixie Receiver implementation\n */\n\nfunction Receiver () {\n  if (this instanceof Receiver === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  this.state = EMPTY;\n  this.buffers = [];\n  this.messageEnd = -1;\n  this.spanLength = 0;\n  this.dead = false;\n\n  this.onerror = function() {};\n  this.ontext = function() {};\n  this.onbinary = function() {};\n  this.onclose = function() {};\n  this.onping = function() {};\n  this.onpong = function() {};\n}\n\nmodule.exports = Receiver;\n\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function(data) {\n  var self = this;\n  function doAdd() {\n    if (self.state === EMPTY) {\n      if (data.length == 2 && data[": {
        "count": 1,
        "size": 4072
    },
    "(function (exports, require, module, __filename, __dirname) { /*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util');\n\nfunction BufferPool(initialSize, growStrategy, shrinkStrategy) {\n  if (this instanceof BufferPool === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  if (typeof initialSize === 'function') {\n    shrinkStrategy = growStrategy;\n    growStrategy = initialSize;\n    initialSize = 0;\n  }\n  else if (typeof initialSize === 'undefined') {\n    initialSize = 0;\n  }\n  this._growStrategy = (growStrategy || function(db, size) {\n    return db.used + size;\n  }).bind(null, this);\n  this._shrinkStrategy = (shrinkStrategy || function(db) {\n    return initialSize;\n  }).bind(null, this);\n  this._buffer = initialSize ? new Buffer(initialSize) : null;\n  this._offset = 0;\n  this._used = 0;\n  this._changeFactor = 0;\n  this.__defineGetter__('size', function(){\n    return this._buffer == null ? 0 : t": {
        "count": 1,
        "size": 1872
    },
    "(function (exports, require, module, __filename, __dirname) { /*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII c": {
        "count": 1,
        "size": 14744
    },
    "(function (exports, require, module, __filename, __dirname) { /**\n * @license\n * lodash 3.10.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern -d -o ./index.js`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '3.10.1';\n\n  /** Used to compose bitmasks for wrapper metadata. */\n  var BIND_FLAG = 1,\n      BIND_KEY_FLAG = 2,\n      CURRY_BOUND_FLAG = 4,\n      CURRY_FLAG = 8,\n      CURRY_RIGHT_FLAG = 16,\n      PARTIAL_FLAG = 32,\n      PARTIAL_RIGHT_FLAG = 64,\n      ARY_FLAG = 128,\n      REARG_FLAG = 256;\n\n  /** Used as default options for `_.trunc`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DE": {
        "count": 1,
        "size": 823064
    },
    "(function (exports, require, module, __filename, __dirname) { /**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = '' + str;\n  if (str.length > 10000) return;\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':": {
        "count": 1,
        "size": 2424
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2014, 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n\nvar path = require(\"path\")\nvar module_dir = path.dirname(module.filename)\nvar os = require(\"os\")\n//var serializer = require('./lib/serializer.js');\nvar aspect = require('./lib/aspect.js');\nvar request = require": {
        "count": 1,
        "size": 7136
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2014, 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar serializer = require('./lib/serializer');\n\nfunction API(agent, appmetrics) {\n\tthis.appmetrics = appmetrics;\n\tthis.agent = agent": {
        "count": 1,
        "size": 8640
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use that file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('appmetrics');\n\nfunction MongoProbe() {\n\tProbe": {
        "count": 1,
        "size": 4640
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n\n/*\n * Allow objects with circularities to be flattened/serialized.\n * This is achieved by replacing references to already seen objects with 'CIRCULAR-' + id\n */\nvar CIRCULAR = 'CIRCULAR-';\n\nexports.serialize = functi": {
        "count": 1,
        "size": 3568
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n\nexports.aroundCallback = function(args, context, hookBefore, hookAfter) {\n\tvar position = this.findCallbackArg(args);\n\tif(position == undefined) return;\n\n\tvar orig = args[position];\n\n\targs[position] = function() {\n\t\t": {
        "count": 1,
        "size": 3400
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n\nfunction Timer() {\n\tthis.startTime = process.hrtime();\n\tthis.startTimeMillis = Date.now();\n\tthis.timeDelta = -1;\n\tthis.cpuTimeDelta = -1;\n}\n\nTimer.prototype.stop = function() {\n\t// Prevent the timer being stopped twi": {
        "count": 1,
        "size": 1248
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar am = require('appmetrics');\nvar util = require('util');\n\nfunction loopbackDJProbe(){\n\t": {
        "count": 1,
        "size": 3344
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n\nvar aspect = require('./aspect.js');\nvar request = require('./request.js');\nvar timer = require('./timer.js');\n\nfunction Probe(name) {\n\tthis.name = name;\n\tthis.config = {};\n\tthis.metricsProbeStart = this.metricsStart": {
        "count": 1,
        "size": 2960
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n\nvar timer = require(\"./timer.js\");\nvar util = require('util');\nvar domain = require('domain');\nvar am = require('../');\n\n/*\n * Global Request Tracking\n * \n * ID's are assigned to each event. Its important that the co": {
        "count": 1,
        "size": 6072
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\n \nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar am = require('appmetrics');\nvar util = require('util');\n\nfunction LeveldownProbe(){\n\t": {
        "count": 1,
        "size": 3872
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar am = require('appmetrics');\nvar util = require('util');\n\n/**\n * Probe to instrument the": {
        "count": 1,
        "size": 6592
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('..');\n\nfunction MemcachedProbe() {\n\tProbe.cal": {
        "count": 1,
        "size": 3368
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('..');\n\nfunction SocketioProbe() {\n\tProbe.call": {
        "count": 1,
        "size": 5176
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('appmetrics');\n\n//Riak methods can have differ": {
        "count": 1,
        "size": 5576
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('appmetrics');\n\nfunction MqttProbe() {\n\tProbe.": {
        "count": 1,
        "size": 4216
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('appmetrics');\n\nfunction MySqlProbe() {\n\tProbe": {
        "count": 1,
        "size": 2888
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar url = require('url');\nvar am = require('appmetrics');\n\n/**\n": {
        "count": 4,
        "size": 17992
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar url = require('url');\nvar am = require('appmetrics');\n\nfunc": {
        "count": 1,
        "size": 4616
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar path = require('path');\n\nfunction TraceProbe() {\n    Probe.call(this, 'trace');\n    this.config = {\n ": {
        "count": 1,
        "size": 9576
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2015 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n*******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('appmetrics');\n\nfunction PostgresProbe() {\n  Pr": {
        "count": 1,
        "size": 4472
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2016 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('appmetrics');\n\nfunction AxonProbe() {\n\tProbe.": {
        "count": 1,
        "size": 4640
    },
    "(function (exports, require, module, __filename, __dirname) { /*******************************************************************************\n * Copyright 2016 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\nvar Probe = require('../lib/probe.js');\nvar aspect = require('../lib/aspect.js');\nvar request = require('../lib/request.js');\nvar util = require('util');\nvar am = require('appmetrics');\n\nfunction Strong_MQProbe() {\n\tP": {
        "count": 1,
        "size": 5208
    },
    "(function (exports, require, module, __filename, __dirname) { // A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\nWritable.WritableState = WritableState;\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst Stream = require('stream');\nconst Buffer = require('buffer').Buffer;\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Stream.Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 i": {
        "count": 1,
        "size": 13096
    },
    "(function (exports, require, module, __filename, __dirname) { // Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTR": {
        "count": 1,
        "size": 18720
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright (C) 2011-2015 John Hewson\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER": {
        "count": 1,
        "size": 4816
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright (c) 2014, Ben Noordhuis <info@bnoordhuis.nl>\n//\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\ntry {\n  var addon = require('../build/Release/addon');\n} catch (e) {\n  var addon = require('../build/Debug/addon');\n}\n\nvar kForkFlag = addon.kForkFlag;\nvar kSignalFlag = a": {
        "count": 1,
        "size": 1688
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2013,2015. All Rights Reserved.\n// Node module: strong-cluster-control\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// master: cluster control occurs in the master process\n\n/* eslint consistent-this: 0 */\n\nvar EventEmitter = require('events').EventEmitter;\nvar _ = require('lodash');\nvar assert = require('assert');\nvar cluster = require('cluster');\nvar clusterSize = require('./util').clusterSize;\nvar debug = require('debug')('strong-cluster-control:master');\nvar liveWorkerIds = require('./util').liveWorkerIds;\nvar msg = require('./msg');\nvar nextTick = setImmediate;\nvar os = require('os');\nvar util = require('util');\n\n// Master is a singleton, as is the cluster master\nvar master = new EventEmitter();\n\nvar OPTION_DEFAULTS = {\n  shutdownTimeout: 5000,\n  terminateTimeout: 5000,\n  throttleDelay: 2000,\n};\n\nmaster.status = status;\nmaster.setSize =": {
        "count": 1,
        "size": 11912
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014,2015. All Rights Reserved.\n// Node module: strong-control-channel\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// Message protocol implementation.\n//\n// message format is:\n//\n// # cmd\n//\n// one of:\n//\n// -'strong-control-channel:request'\n// -'strong-control-channel:response'\n//\n// # data\n//\n// request or response message\n//\n// By convention, data has a format, it is\n//\n// - cmd: identification of request\n// - error: if request failed, this will be the reason\n//\n// # seqno\n//\n// sequence number, for correlating requests and responses\n\nvar REQ = 'strong-control-channel:request';\nvar RSP = 'strong-control-channel:response';\nvar NOT = 'strong-control-channel:notification';\n\nvar assert = require('assert');\n\nexports.Protocol = Protocol;\n\n// onRequest will be called with request and callback, callback should be called\n// with response.\nfuncti": {
        "count": 1,
        "size": 3384
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014,2015. All Rights Reserved.\n// Node module: strong-control-channel\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// control channel server\n\nvar assert = require('assert');\nvar channel = require('./channel');\nvar debug = require('./debug')('server');\nvar events = require('events');\nvar message = require('./message');\nvar net = require('net');\nvar path = require('path');\nvar toPipe = require('./pipe').toPipe;\nvar util = require('util');\n\nfunction Server(onRequest, onNotification) {\n  this.server = null;\n  this.protocol = new message.Protocol(onRequest, onNotification, debug);\n  this.clientChannels = [];\n\n  assert(onRequest);\n}\n\nutil.inherits(Server, events.EventEmitter);\n\nServer.prototype.listen = function listen(addr) {\n  var self = this;\n\n  assert(!self.addr);\n  assert(!self.server);\n\n  self.addr = toPipe(addr);\n\n  self.server = net.crea": {
        "count": 1,
        "size": 3416
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014,2015. All Rights Reserved.\n// Node module: strong-control-channel\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// inter-cluster control channel\n\nvar assert = require('assert');\nvar cluster = require('cluster');\nvar clusterId = cluster.worker ? cluster.worker.id : '0';\nvar debug = require('./debug')('cluster:' + clusterId);\nvar message = require('./message');\n\nfunction Server(onRequest, onNotification) {\n  this._protocol = new message.Protocol(onRequest, onNotification, debug);\n}\n\n// Ensure all cluster messages are processed with the worker object that the\n// response should be sent to.\n//\n// In a worker, there is only one worker, but in a master, we have to listen for\n// the message event on each newly forked worker :-(\n//\n// Only one server can be attached (because there is only one instance of\n// cluster module to attach to).\nServer.": {
        "count": 1,
        "size": 4072
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014,2015. All Rights Reserved.\n// Node module: strong-control-channel\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// inter-process control channel\n\nvar assert = require('assert');\nvar debug = require('./debug')('process:' + process.pid);\nvar message = require('./message');\n\nfunction Server(onRequest) {\n  this._protocol = new message.Protocol(onRequest, onNotification, debug);\n  function onNotification(req) {\n    onRequest(req, function() {});\n  }\n}\n\n// Attach to a child process.\nServer.prototype.attach = function attach(target) {\n  var self = this;\n\n  self._target = target = target || process;\n  self._onmessage = function(message) {\n    self._protocol.process(message, target);\n  };\n\n  if (target === process) {\n    debug('child %d attaching to parent', process.pid);\n  } else {\n    debug('parent %d attaching to child %d', process.pid, targe": {
        "count": 1,
        "size": 2200
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014,2015. All Rights Reserved.\n// Node module: strong-control-channel\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nvar debug = require('debug');\nvar name = require('../package.json').name;\nvar MAX = 220;\n\nfunction json(js) {\n  // Don't json encode the string if debug is disabled.\n  if (this.enabled) {\n    var s = JSON.stringify(js);\n\n    if (s.length < MAX)\n      return s;\n\n    return s.substring(0, MAX) + '...';\n  }\n  return '';\n}\n\nmodule.exports = function(tag) {\n  var fn = debug(name + ':' + tag);\n  fn.json = json;\n  return fn;\n};\n\n});": {
        "count": 1,
        "size": 744
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014,2015. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nvar cluster = require('cluster');\nvar debug = require('debug')('strong-statsd:ipc');\nvar events = require('events');\nvar util = require('util');\n\n// Message format\n//   .cmd: COMMAND\n//   .metric: <statsd-encoded metric>\nvar COMMAND = 'strong-statsd:ipc:metric';\n\n// 'server' that uses internal node/cluster IPC to get agent metrics\nfunction IpcServer() {\n}\n\nutil.inherits(IpcServer, events.EventEmitter);\n\nIpcServer.prototype.start = function start(config, callback) {\n  debug('starting');\n\n  // Our own metrics go via a process event\n  process.on(COMMAND, report);\n\n  // Our children send their metrics via cluster messages\n  cluster.on('fork', function(worker) {\n    debug('watching worker %d', worker.id);\n\n    worker.on('message', function ": {
        "count": 1,
        "size": 3648
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014,2016. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nvar EventEmitter = require('events').EventEmitter;\nvar Log = require('./lib/log');\nvar Server = require('./lib/server');\nvar assert = require('assert');\nvar debug = require('debug')('strong-statsd');\nvar fmt = require('util').format;\nvar fork = require('child_process').fork;\nvar fs = require('fs');\nvar ipc = require('./lib/servers/ipc');\nvar parse = require('url').parse;\nvar path = require('path');\nvar util = require('util');\n\n// Config template:\n// {\n//   // Start listening for statsd/udp on ephemeral port\n//   port: 0,\n// \n//   // Graphite configuration\n//   backends: [ \"./backends/graphite\" ],\n//   graphitePort: 2003,\n//   graphiteHost: \"localhost\",\n//   graphite: { legacyNamespace: false, },\n// \n//   // Syslog configuration (should": {
        "count": 1,
        "size": 6704
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-control-channel\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// control channel encoder/decoder, common to client and server\nvar debug = require('./debug')('channel');\nvar json = require('newline-json');\nvar events = require('events');\nvar util = require('util');\n\nexports.fromSocket = function(transport) {\n  return new SocketChannel(transport);\n};\n\nexports.SocketChannel = SocketChannel;\n\nfunction SocketChannel(socket) {\n  var self = this;\n\n  this.socket = socket;\n  this.reader = new json.Parser;\n  this.writer = new json.Stringifier;\n\n  socket.pipe(this.reader);\n  this.writer.pipe(socket);\n\n  // Emit errors only once!\n  var errored = false;\n\n  function error(er) {\n    if (errored) return;\n    self.emit('error', er);\n    socket.destroy();\n    errored = true;\n  }\n\n  // Forward socket errors and": {
        "count": 1,
        "size": 1584
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-control-channel\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// fix pipe names so they are fully qualified and well formed on windows\nvar path = require('path');\n\n// Copied from node/lib/net.js:\nfunction toNumber(x) {\n  return (x = Number(x)) >= 0 ? x : false;\n}\n\nfunction isPipeName(s) {\n  return typeof s === 'string' && toNumber(s) === false;\n}\n\nfunction pipeName(addr) {\n  // Not Windows? Don't do anything\n  if (process.platform !== 'win32') {\n    return addr;\n  }\n  // Not a pipe name? Don't do anything\n  if (!isPipeName(addr)) {\n    return addr;\n  }\n  // Already a valid windows pipe name? Don't do anything.  Since both / and \\\n  // are useable as path seperators on windows, the regex is a bit horrible.\n  if (/^(?:\\/\\/)|(?:\\\\\\\\).[\\\\/]pipe[\\\\/]/.test(addr)) {\n    return addr;\n  }\n  // Resolv": {
        "count": 1,
        "size": 1192
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-log-transformer\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n'use strict';\n\nvar minimist = require('minimist');\nvar path = require('path');\n\nvar Logger = require('./logger');\nvar pkg = require('../package.json');\n\nmodule.exports = cli;\n\nfunction cli(args) {\n  var opts = minimist(args.slice(2));\n  var $0 = path.basename(args[1]);\n  var p = console.log.bind(console);\n  if (opts.v || opts.version) {\n    version($0, p);\n  } else if (opts.h || opts.help) {\n    usage($0, p);\n  } else {\n    process.stdin.pipe(Logger(opts)).pipe(process.stdout);\n  }\n}\n\nfunction version($0, p) {\n  p('%s v%s', pkg.name, pkg.version);\n}\n\nfunction usage($0, p) {\n  var PADDING = '               ';\n  var opt, def;\n  p('Usage: %s [options]', $0);\n  p('');\n  p('%s', pkg.description);\n  p('');\n  p('OPTIONS:');\n  for (opt in ": {
        "count": 1,
        "size": 1608
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-log-transformer\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n'use strict';\n\nvar stream = require('stream');\nvar util = require('util');\nvar fs = require('fs');\n\nvar byline = require('byline');\nvar through = require('through');\nvar duplexer = require('duplexer');\nvar moment = require('moment');\n\nmodule.exports = Logger;\n\nLogger.DEFAULTS = {\n  format: 'text',\n  tag: '',\n  mergeMultiline: false,\n  timeStamp: false,\n};\n\nvar formatters = {\n  text: textFormatter,\n  json: jsonFormatter,\n}\n\nfunction Logger(options) {\n  var defaults = JSON.parse(JSON.stringify(Logger.DEFAULTS));\n  options = util._extend(defaults, options || {});\n  var catcher = new byline.LineStream;\n  var emitter = catcher;\n  var transforms = [\n    objectifier(),\n  ];\n\n  if (options.tag) {\n    transforms.push(staticTagger(options.ta": {
        "count": 1,
        "size": 3784
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-npm-ls\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nvar assert = require('assert');\nvar readInstalled = require('read-installed');\nvar topiary = require('topiary');\nvar util = require('util');\n\nexports.read = read;\n\nfunction read(where, callback) {\n  readInstalled(where, function(er, deps) {\n    if (er) return callback(er);\n\n    deps = stripCircular(deps);\n\n    return callback(null, deps);\n  });\n};\n\nexports.stripCircular = stripCircular;\n\nfunction stripCircular(deps) {\n  var stack = [];\n\n  return strip(deps);\n\n  function strip(deps) {\n    stack.push(deps);\n\n    delete deps.parent; // Always circular\n\n    if (typeof deps === 'object' && 'dependencies' in deps) {\n      for (var pkg in deps.dependencies) {\n        if (stack.indexOf(deps.dependencies[pkg]) >= 0)\n          delete deps.dependencie": {
        "count": 1,
        "size": 2896
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// Copyright (c) 2010-2014 Etsy, see LICENSE.etsy\n/**\n * Public: test function to filter out malformed packets\n *\n * Parameters:\n *\n *   fields - Array of packet data (e.g. [ '100', 'ms', '@0.1' ])\n *\n * Returns true for a valid packet and false otherwise\n */\nfunction isNumber(str) {\n    return Boolean(str && !isNaN(str));\n}\n\nfunction is_valid_packet(fields) {\n\n    // test for existing metrics type\n    if (fields[1] === undefined) {\n        return false;\n    }\n\n    // filter out malformed sample rates\n    if (fields[2] !== undefined) {\n        if (fields[2].length <= 1 || fields[2][0] != '@' || !isNumber(fields[2].substring(1))) {\n            return false;\n        }\n    }\n\n    // filter out invalid metrics values\n    switch(fields[1]) {\n   ": {
        "count": 1,
        "size": 1416
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// Copyright (c) 2010-2014 Etsy, see LICENSE.etsy\n/*jshint node:true, laxcomma:true */\n\nvar Set = function() {\n  this.store = {};\n};\n\nSet.prototype = {\n  has: function(value) {\n    if (value) {\n      return this.store.hasOwnProperty(value);\n    } else {\n      return false;\n    }\n  },\n  insert: function(value) {\n    if (value) {\n      this.store[value] = value;\n    }\n  },\n  clear: function() {\n    this.store = {};\n  },\n  values: function() {\n    var values = [];\n    for (var value in this.store) {\n      values.push(value);\n    }\n    return values;\n  }\n};\n\nexports.Set = Set;\n\n});": {
        "count": 1,
        "size": 888
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// Copyright (c) 2010-2014 Etsy, see LICENSE.etsy\n/*jshint node:true, laxcomma:true */\n\nvar process_metrics = function (metrics, flushInterval, ts, flushCallback) {\n    var starttime = Date.now();\n    var key;\n    var counter_rates = {};\n    var timer_data = {};\n    var statsd_metrics = {};\n    var counters = metrics.counters;\n    var timers = metrics.timers;\n    var timer_counters = metrics.timer_counters;\n    var pctThreshold = metrics.pctThreshold;\n    var histogram = metrics.histogram;\n\n    for (key in counters) {\n      var value = counters[key];\n\n      // calculate \"per second\" rate\n      counter_rates[key] = value / (flushInterval / 1000);\n    }\n\n    for (key in timers) {\n      var current_timer_data = {};\n\n      if (timers[key].lengt": {
        "count": 1,
        "size": 5616
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// Copyright (c) 2010-2014 Etsy, see LICENSE.etsy\n/*jshint node:true, laxcomma:true */\n\nvar util = require('util')\n  , dgram = require('dgram')\n\nvar l;\nvar debug;\n\nfunction RepeaterBackend(startupTime, config, emitter){\n  var self = this;\n  this.config = config.repeater || [];\n  this.sock = (config.repeaterProtocol == 'udp6') ?\n        dgram.createSocket('udp6') :\n        dgram.createSocket('udp4');\n  this.sock.unref();\n  // Attach DNS error handler\n  this.sock.on('error', function (err) {\n    if (debug) {\n      l.log('Repeater error: ' + err);\n    }\n  });\n  // attach\n  emitter.on('packet', function(packet, rinfo) { self.process(packet, rinfo); });\n}\n\nRepeaterBackend.prototype.process = function(packet, rinfo) {\n  var self = this;\n  hosts =": {
        "count": 1,
        "size": 1472
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n// Copyright (c) 2010-2014 Etsy, see LICENSE.etsy\nvar assert = require('assert');\nvar async = require('async');\nvar debug = require('debug')('strong-statsd:server');\nvar helpers = require('./helpers')\nvar events = require('events')\nvar set = require('./set')\nvar pm = require('./process_metrics')\nvar util = require('util');\n\nfunction once(f) {\n  var called;\n  return function() {\n    if (called) return;\n    called = true;\n    f.apply(null, arguments);\n  }\n}\n\nmodule.exports = Server;\n\nfunction Server() {\n  // initialize data structures with defaults for statsd stats\n  var keyCounter = {};\n  var counters = {};\n  var timers = {};\n  var timer_counters = {};\n  var gauges = {};\n  var sets = {};\n  var counter_rates = {};\n  var timer_data = {};\n  var": {
        "count": 1,
        "size": 10928
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nvar Readable = require('stream').Readable;\nvar debug = require('debug')('strong-statsd:log');\nvar util = require('util');\n\nmodule.exports = Log;\n\nfunction Log(name) {\n  this.name = name;\n\n  Readable.call(this);\n\n  this.setEncoding('utf-8');\n};\n\nutil.inherits(Log, Readable);\n\nLog.prototype._read = function _read() {\n  // We don't actually have to do anything here, because we don't support flow\n  // control, anything written to the log is already present and readable.\n};\n\nLog.prototype.log = function log() {\n  var msg = util.format.apply(null, arguments);\n  debug('log %s: log <%s>', this.name, msg);\n  this.push(msg, 'utf8');\n};\n\nLog.prototype.write = function write(data) {\n  debug('log %s: write <%s>', this.name, data);\n  this.push(data, 'utf": {
        "count": 1,
        "size": 1064
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2014. All Rights Reserved.\n// Node module: strong-statsd\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nvar assert = require('assert');\n\nfunction InternalBackend(startupTime, config, emitter) {\n  emitter.on('flush', function(timestamp, metrics) {\n    var msg = {\n      cmd: 'metrics',\n      metrics: munge(timestamp, metrics),\n    };\n\n    config.internal.notify(msg.metrics);\n  });\n\n  return true; // Required to indicate success\n}\n\n// We'll strip the scope prefix, so the front-end doesn't see it, and can query\n// metrics based on the app/host/id metadata without having to do its own\n// parsing of the names.\n//\n// Match `app.host.(worker id).(metric)`, we discard app and host, because it\n// could theoreticaly vary by metric (though that would likely be a bug), but we\n// need the worker ID, and the metric name.\n//\n// This is here to guarantee the ": {
        "count": 1,
        "size": 2304
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2015,2016. All Rights Reserved.\n// Node module: strong-control-channel\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n'use strict';\n\nvar assert = require('assert');\nvar crypto = require('crypto');\nvar debug = require('./debug');\nvar events = require('events');\nvar util = require('util');\nvar url = require('url');\nvar Websocket = require('ws');\n\nvar SHK = 'SHK';\nvar DIS = 'DIS';\nvar REQ = 'REQ';\nvar RSP = 'RSP';\nvar NOT = 'NOT';\n\nexports.SHK = SHK;\n\nfunction state(readyState) {\n  switch (readyState) {\n    case Websocket.CONNECTING: return 'CONNECTING';\n    case Websocket.OPEN: return 'OPEN';\n    case Websocket.CLOSING: return 'CLOSING';\n    case Websocket.CLOSED: return 'CLOSED';\n    default:\n      return util.format('Unknown(%j)', readyState);\n  }\n}\n\n\nfunction WebsocketChannel(onRequest, clientToken) {\n  assert(onRequest);\n\n  this._onRequest ": {
        "count": 1,
        "size": 18016
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2015,2016. All Rights Reserved.\n// Node module: strong-url-defaults\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n'use strict';\n\nvar parse = require('url').parse;\nvar format = require('url').format;\n\nmodule.exports = normalize;\n\nfunction normalize(url, defaults, overrides) {\n  var _ = parse(url);\n\n  overrides = overrides || {};\n\n  if (_.pathname === '/')\n    delete _.pathname; // So we don't get trailing '/' on URLs\n\n  function set(from, to) {\n    if (from in overrides)\n      _[to] = overrides[from];\n    else\n      _[to] = _[to] || defaults[from];\n  }\n\n  set('path', 'pathname');\n  set('host', 'hostname');\n  set('port', 'port');\n  set('protocol', 'protocol');\n  set('auth', 'auth');\n\n  _.slashes = true; // So we always get them\n\n  delete _.host; // So .hostname and .port are used to format the URL\n\n  return format(_);\n}\n\n});": {
        "count": 1,
        "size": 1032
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright IBM Corp. 2015. All Rights Reserved.\n// Node module: strong-cluster-control\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n'use strict';\n\nvar _ = require('lodash');\nvar cluster = require('cluster');\n\nexports.liveWorkerIds = liveWorkerIds;\nexports.clusterSize = clusterSize;\n\n// Workers remain in cluster.workers after they have have exited.\nfunction liveWorkerIds() {\n  var workerIds = Object.keys(cluster.workers).filter(function(id) {\n    var worker = cluster.workers[id];\n    var isAlive = worker.process.signalCode == null &&\n      worker.process.exitCode == null;\n    return isAlive;\n  });\n\n  // Object keys for scalars are of type String, sort by their numeric value.\n  return _.sortBy(workerIds, Number);\n}\n\nfunction clusterSize() {\n  return liveWorkerIds().length;\n}\n\n});": {
        "count": 1,
        "size": 968
    },
    "(function (exports, require, module, __filename, __dirname) { // Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER L": {
        "count": 1,
        "size": 1512
    },
    "(function (exports, require, module, __filename, __dirname) { // Don't require agent until needed, early require causes its configuration to\n// be loaded from the CWD, and the CWD isn't the directory of the application\n// until run has had a chance to chdir() into it.\n\nmodule.exports = agent;\n\nfunction agent() {\n  // XXX sl-run.js sets the agent logger, and the quiet option, that won't\n  // happen if strongops isn't being used, unless we figure out a way to do it\n  // here.\n  var adapter = require('./adapter');\n  // FIXME(sam) horrible hack... appmetrics doesn't know the app name, possibly\n  // we want to make this something only the supervisor knows?\n  adapter.config.appName = require(\n    require('path').resolve('package.json')\n  ).name;\n  return adapter;\n}\n\n});": {
        "count": 1,
        "size": 800
    },
    "(function (exports, require, module, __filename, __dirname) { // Evaluate configuration of supervisor, based on command line options,\n// strong-cluster-control configuration, and strong-agent configuration.\n\n// Some environment variable property names were defined by `rc`, and cannot be\n// changed for reasons of backwards compatibility.\n/*eslint camelcase:0*/\n\n// May set options in process.env, so run first.\nvar options = require('./options').parse(process.argv);\n\nvar Logger = require('./logger');\nvar chdir = require('./chdir'); // side effect: ensures correct process.env.PWD\nvar cluster = require('cluster');\nvar control = require('strong-cluster-control');\nvar debug = require('./debug')('config');\nvar dotenv = require('dotenv');\nvar path = require('path');\nvar runctl = require('./runctl');\nvar sendMetrics = require('./metrics');\nvar startCmd = require('./start-command');\nvar watcher = require('./watcher');\nvar transformer = require('strong-log-transformer');\nvar util = require('util');\n\nvar logger = new Logg": {
        "count": 1,
        "size": 11136
    },
    "(function (exports, require, module, __filename, __dirname) { // Implementation of chdir, that tracks the PWD, the logical 'symlink aware'\n// working directory that the shell builtin `cd` normally maintains. Note that\n// the CWD is different, it's the physical working directory, process.cwd() or\n// getcwd(3) returns this, and includes no symlinks.\nvar path = require('path');\nvar fs = require('fs');\n\n// Ensure PWD is set, and correctly points to CWD.\nif (process.env.PWD == null) {\n  // PWD was never set, perhaps we weren't run by a shell. Set PWD.\n  process.env.PWD = process.cwd();\n} else if (process.cwd() !== fs.realpathSync(process.env.PWD)) {\n  // PWD was set, but its not a logical equivalent of our CWD. Reset PWD.\n  process.env.PWD = process.cwd();\n}\n\nmodule.exports = function chdir(directory) {\n  var pwd = path.resolve(process.env.PWD, directory);\n  process.chdir(pwd);\n  // Note that we only set PWD if chdir was successful.\n  process.env.PWD = pwd;\n};\n\n});": {
        "count": 1,
        "size": 1000
    },
    "(function (exports, require, module, __filename, __dirname) { // LazyTransform is a special type of Transform stream that is lazily loaded.\n// This is used for performance with bi-API-ship: when two APIs are available\n// for the stream, one conventional and one non-conventional.\n'use strict';\n\nconst stream = require('stream');\nconst util = require('util');\n\nmodule.exports = LazyTransform;\n\nfunction LazyTransform(options) {\n  this._options = options;\n}\nutil.inherits(LazyTransform, stream.Transform);\n\n[\n  '_readableState',\n  '_writableState',\n  '_transformState'\n].forEach(function(prop, i, props) {\n  Object.defineProperty(LazyTransform.prototype, prop, {\n    get: function() {\n      stream.Transform.call(this, this._options);\n      this._writableState.decodeStrings = false;\n      this._writableState.defaultEncoding = 'binary';\n      return this[prop];\n    },\n    set: function(val) {\n      Object.defineProperty(this, prop, {\n        value: val,\n        enumerable: true,\n        configurable: true,\n        writabl": {
        "count": 1,
        "size": 1136
    },
    "(function (exports, require, module, __filename, __dirname) { // Maintainers, keep in mind that ES1-style octal literals (`0666`) are not\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\n\n'use strict';\n\nconst SlowBuffer = require('buffer').SlowBuffer;\nconst util = require('util');\nconst pathModule = require('path');\n\nconst binding = process.binding('fs');\nconst constants = require('constants');\nconst fs = exports;\nconst Buffer = require('buffer').Buffer;\nconst Stream = require('stream').Stream;\nconst EventEmitter = require('events');\nconst FSReqWrap = binding.FSReqWrap;\nconst FSEvent = process.binding('fs_event_wrap').FSEvent;\n\nconst Readable = Stream.Readable;\nconst Writable = Stream.Writable;\n\nconst kMinPoolSpace = 128;\nconst kMaxLength = require('buffer').kMaxLength;\n\nconst O_APPEND = constants.O_APPEND || 0;\nconst O_CREAT = constants.O_CREAT || 0;\nconst O_EXCL = constants.O_EXCL || 0;\nconst O_RDONLY = constants.O_RDONLY || 0;\nconst O_RDWR = constants.O_RDWR || 0;\nconst O_SYNC = c": {
        "count": 2,
        "size": 100784
    },
    "(function (exports, require, module, __filename, __dirname) { // Monkey-patching the fs module.\n// It's ugly, but there is simply no other way to do this.\nvar fs = module.exports = require('./fs.js')\n\nvar assert = require('assert')\n\n// fix up some busted stuff, mostly on windows and old nodes\nrequire('./polyfills.js')\n\nvar util = require('util')\n\nfunction noop () {}\n\nvar debug = noop\nif (util.debuglog)\n  debug = util.debuglog('gfs')\nelse if (/\\bgfs\\b/i.test(process.env.NODE_DEBUG || ''))\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    m = 'GFS: ' + m.split(/\\n/).join('\\nGFS: ')\n    console.error(m)\n  }\n\nif (/\\bgfs\\b/i.test(process.env.NODE_DEBUG || '')) {\n  process.on('exit', function() {\n    debug('fds', fds)\n    debug(queue)\n    assert.equal(queue.length, 0)\n  })\n}\n\n\nvar originalOpen = fs.open\nfs.open = open\n\nfunction open(path, flags, mode, cb) {\n  if (typeof mode === \"function\") cb = mode, mode = null\n  if (typeof cb !== \"function\") cb = noop\n  new OpenReq(path, flags, mode, cb)\n": {
        "count": 1,
        "size": 3192
    },
    "(function (exports, require, module, __filename, __dirname) { // Note: In 0.8 and before, crypto functions all defaulted to using\n// binary-encoded strings rather than buffers.\n\n'use strict';\n\nexports.DEFAULT_ENCODING = 'buffer';\n\ntry {\n  var binding = process.binding('crypto');\n  var randomBytes = binding.randomBytes;\n  var getCiphers = binding.getCiphers;\n  var getHashes = binding.getHashes;\n  var getCurves = binding.getCurves;\n} catch (e) {\n  throw new Error('node.js not compiled with openssl crypto support.');\n}\n\nconst Buffer = require('buffer').Buffer;\nconst constants = require('constants');\nconst stream = require('stream');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst LazyTransform = require('internal/streams/lazy_transform');\n\nconst DH_GENERATOR = 2;\n\n// This is here because many functions accepted binary strings without\n// any explicit encoding in older versions of node, and we don't want\n// to break them unnecessarily.\nfunction toBuf(str, encoding) {\n  encoding =": {
        "count": 1,
        "size": 19104
    },
    "(function (exports, require, module, __filename, __dirname) { // Query String Utilities\n\n'use strict';\n\nconst QueryString = exports;\nconst Buffer = require('buffer').Buffer;\n\n\nfunction charCode(c) {\n  return c.charCodeAt(0);\n}\n\n\n// a safe fast alternative to decodeURIComponent\nQueryString.unescapeBuffer = function(s, decodeSpaces) {\n  var out = new Buffer(s.length);\n  var state = 'CHAR'; // states: CHAR, HEX0, HEX1\n  var n, m, hexchar;\n\n  for (var inIndex = 0, outIndex = 0; inIndex <= s.length; inIndex++) {\n    var c = s.charCodeAt(inIndex);\n    switch (state) {\n      case 'CHAR':\n        switch (c) {\n          case charCode('%'):\n            n = 0;\n            m = 0;\n            state = 'HEX0';\n            break;\n          case charCode('+'):\n            if (decodeSpaces) c = charCode(' ');\n            // falls through\n          default:\n            out[outIndex++] = c;\n            break;\n        }\n        break;\n\n      case 'HEX0':\n        state = 'HEX1';\n        hexchar = c;\n        if (charCode('0') <= c ": {
        "count": 1,
        "size": 6496
    },
    "(function (exports, require, module, __filename, __dirname) { // Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n\n});": {
        "count": 4,
        "size": 4000
    },
    "(function (exports, require, module, __filename, __dirname) { // XXX(sam) I feel a bit bad about not using an options parsing module, but I\n// was going in circles searching npmjs.org for one which would parse options in\n// order up to the first non-option (as getopt_long could do), and failing. I'll\n// keep looking, but in the meantime, this works fine.\nvar defaults = require('strong-url-defaults');\nvar fs = require('fs');\nvar os = require('os');\nvar syslogAvailable = false;\nvar url = require('url');\n\ntry {\n  syslogAvailable = !!require('strong-fork-syslog');\n} catch (e) {\n  /* eslint no-empty:0 */\n}\n\nexports.NAME = process.env.SLC_COMMAND ?\n  'slc ' + process.env.SLC_COMMAND :\n  'slr';\nexports.HELP = fs.readFileSync(require.resolve('../bin/sl-run.txt'), 'utf-8')\n  .replace(/%MAIN%/g, exports.NAME)\n  .trim();\n\n// Parse argv into options (for runner), and split off the args (for the app).\nexports.parse = function parse(argv) {\n  var options = {\n    NAME: exports.NAME,\n    HELP: exports.HELP,\n    argv: argv,  ": {
        "count": 1,
        "size": 5992
    },
    "(function (exports, require, module, __filename, __dirname) { // a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\nmodule.exports = Duplex;\n\nconst util = require('util');\nconst Readable = require('_stream_readable');\nconst Writable = require('_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = Object.keys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if ": {
        "count": 1,
        "size": 1528
    },
    "(function (exports, require, module, __filename, __dirname) { // a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nconst Transform = require('_stream_transform');\nconst util = require('util');\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough))\n    return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n});": {
        "count": 1,
        "size": 616
    },
    "(function (exports, require, module, __filename, __dirname) { // a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a tran": {
        "count": 1,
        "size": 6424
    },
    "(function (exports, require, module, __filename, __dirname) { // convert git:// form url to github URL, e.g.,\n// git://github.com/bcoe/foo.git\n// https://github.com/bcoe/foo.\nfunction githubUrlFromGit(url, opts){\n  try {\n    var m = re(opts).exec(url.replace(/\\.git(#.*)?$/, ''));\n    var host = m[1];\n    var path = m[2];\n    return 'https://' + host + '/' + path;\n  } catch (err) {\n    // ignore\n  }\n};\n\n// generate the git:// parsing regex\n// with options, e.g., the ability\n// to specify multiple GHE domains.\nfunction re(opts) {\n  opts = opts || {};\n  // whitelist of URLs that should be treated as GitHub repos.\n  var baseUrls = ['gist.github.com', 'github.com'].concat(opts.extraBaseUrls || []);\n  // build regex from whitelist.\n  return new RegExp(\n    /^(?:https?:\\/\\/|git:\\/\\/|git\\+ssh:\\/\\/|git\\+https:\\/\\/)?(?:[^@]+@)?/.source +\n    '(' + baseUrls.join('|') + ')' +\n    /[:\\/]([^\\/]+\\/[^\\/]+?|[0-9]+)$/.source\n  );\n}\n\ngithubUrlFromGit.re = re();\n\nmodule.exports = githubUrlFromGit;\n\n});": {
        "count": 1,
        "size": 1024
    },
    "(function (exports, require, module, __filename, __dirname) { // export the class if we are in a Node-like system.\nif (typeof module === 'object' && module.exports === exports)\n  exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n/* nomin */ var debug;\n/* nomin */ if (typeof process === 'object' &&\n    /* nomin */ process.env &&\n    /* nomin */ process.env.NODE_DEBUG &&\n    /* nomin */ /\\bsemver\\b/i.test(process.env.NODE_DEBUG))\n  /* nomin */ debug = function() {\n    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);\n    /* nomin */ args.unshift('SEMVER');\n    /* nomin */ console.log.apply(console, args);\n    /* nomin */ };\n/* nomin */ else\n  /* nomin */ debug = function() {};\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\nvar MAX_LENGTH = 256;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\n// The actual": {
        "count": 1,
        "size": 33088
    },
    "(function (exports, require, module, __filename, __dirname) { // http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n": {
        "count": 1,
        "size": 11264
    },
    "(function (exports, require, module, __filename, __dirname) { // run-time control channel\nvar agent = require('./agent');\nvar agentVersion = require('appmetrics/package.json').version;\nvar async = require('async');\nvar cluster = require('cluster');\nvar debug = require('./debug')('runctl');\nvar EventEmitter = require('events').EventEmitter;\nvar fs = require('fs');\nvar master = require('strong-cluster-control');\nvar npmls = require('strong-npm-ls');\nvar os = require('os');\nvar targetctl = require('./targetctl');\nvar util = require('util');\nvar wsChannel = require('strong-control-channel/ws-channel').connect;\nvar processChannel = require('strong-control-channel/process').attach;\n\nvar debuggerVersion = 'n/a';\ntry {\n  debuggerVersion = require('strong-debugger/package.json').version;\n} catch (err) {\n  debug('Cannot load strong-debugger: ', err);\n}\n\nexports.start = start;\nexports.onRequest = onRequest; // For testing\n\n// Return the number of event listeners.\nvar listenerCount = EventEmitter.listenerCount || functio": {
        "count": 1,
        "size": 9000
    },
    "(function (exports, require, module, __filename, __dirname) { // shamelessly borrowed from http://nodejs.org/api/stream.html\n\nvar util = require('util');\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar Transform = require('stream').Transform;\nutil.inherits(Parser, Transform);\n\nfunction Parser(options) {\n  if (!(this instanceof Parser))\n    return new Parser(options);\n\n  Transform.call(this, options);\n  this._writableState.objectMode = false;\n  this._readableState.objectMode = true;\n  this._buffer = '';\n  this._decoder = new StringDecoder('utf8');\n}\n\nParser.prototype._transform = function(chunk, encoding, cb) {\n  this._buffer += this._decoder.write(chunk);\n  var lines = this._buffer.split(/\\r?\\n/);\n  this._buffer = lines.pop();\n  for (var l = 0; l < lines.length; l++) {\n    var line = lines[l];\n    try {\n      var obj = JSON.parse(line);\n      this.push((obj === null || obj === undefined) ? false : obj);\n    } catch (err) {\n      var context = lines.slice(l).join('\\n')+'\\n'+this._buffer;\n     ": {
        "count": 1,
        "size": 1448
    },
    "(function (exports, require, module, __filename, __dirname) { //! moment.js\n//! version : 2.13.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, function () { 'use strict';\n\n    var hookCallback;\n\n    function utils_hooks__hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[obje": {
        "count": 1,
        "size": 135000
    },
    "(function (exports, require, module, __filename, __dirname) { exports.alphasort = alphasort\nexports.alphasorti = alphasorti\nexports.setopts = setopts\nexports.ownProp = ownProp\nexports.makeAbs = makeAbs\nexports.finish = finish\nexports.mark = mark\nexports.isIgnored = isIgnored\nexports.childrenIgnored = childrenIgnored\n\nfunction ownProp (obj, field) {\n  return Object.prototype.hasOwnProperty.call(obj, field)\n}\n\nvar path = require(\"path\")\nvar minimatch = require(\"minimatch\")\nvar isAbsolute = require(\"path-is-absolute\")\nvar Minimatch = minimatch.Minimatch\n\nfunction alphasorti (a, b) {\n  return a.toLowerCase().localeCompare(b.toLowerCase())\n}\n\nfunction alphasort (a, b) {\n  return a.localeCompare(b)\n}\n\nfunction setupIgnores (self, options) {\n  self.ignore = options.ignore || []\n\n  if (!Array.isArray(self.ignore))\n    self.ignore = [self.ignore]\n\n  if (self.ignore.length) {\n    self.ignore = self.ignore.map(ignoreMap)\n  }\n}\n\nfunction ignoreMap (pattern) {\n  var gmatcher = null\n  if (pattern.slice(-3) === '/**') {\n   ": {
        "count": 1,
        "size": 6248
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i < str.length && i >= 0 && ! result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left ": {
        "count": 1,
        "size": 1272
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = bindActor\nfunction bindActor () {\n  var args = \n        Array.prototype.slice.call\n        (arguments) // jswtf.\n    , obj = null\n    , fn\n  if (typeof args[0] === \"object\") {\n    obj = args.shift()\n    fn = args.shift()\n    if (typeof fn === \"string\")\n      fn = obj[ fn ]\n  } else fn = args.shift()\n  return function (cb) {\n    fn.apply(obj, args.concat(cb)) }\n}\n\n});": {
        "count": 1,
        "size": 472
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = chain\nvar bindActor = require(\"./bind-actor.js\")\nchain.first = {} ; chain.last = {}\nfunction chain (things, cb) {\n  var res = []\n  ;(function LOOP (i, len) {\n    if (i >= len) return cb(null,res)\n    if (Array.isArray(things[i]))\n      things[i] = bindActor.apply(null,\n        things[i].map(function(i){\n          return (i===chain.first) ? res[0]\n           : (i===chain.last)\n             ? res[res.length - 1] : i }))\n    if (!things[i]) return LOOP(i + 1, len)\n    things[i](function (er, data) {\n      if (er) return cb(er, res)\n      if (data !== undefined) res = res.concat(data)\n      LOOP(i + 1, len)\n    })\n  })(0, things.length) }\n\n});": {
        "count": 1,
        "size": 752
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = extractDescription\n\n// Extracts description from contents of a readme file in markdown format\nfunction extractDescription (d) {\n  if (!d) return;\n  if (d === \"ERROR: No README data found!\") return;\n  // the first block of text before the first heading\n  // that isn't the first line heading\n  d = d.trim().split('\\n')\n  for (var s = 0; d[s] && d[s].trim().match(/^(#|$)/); s ++);\n  var l = d.length\n  for (var e = s + 1; e < l && d[e].trim(); e ++);\n  return d.slice(s, e).join(' ').trim()\n}\n\n});": {
        "count": 1,
        "size": 600
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = function (args, opts) {\n    if (!opts) opts = {};\n    \n    var flags = { bools : {}, strings : {} };\n    \n    [].concat(opts['boolean']).filter(Boolean).forEach(function (key) {\n        flags.bools[key] = true;\n    });\n    \n    var aliases = {};\n    Object.keys(opts.alias || {}).forEach(function (key) {\n        aliases[key] = [].concat(opts.alias[key]);\n        aliases[key].forEach(function (x) {\n            aliases[x] = [key].concat(aliases[key].filter(function (y) {\n                return x !== y;\n            }));\n        });\n    });\n\n    [].concat(opts.string).filter(Boolean).forEach(function (key) {\n        flags.strings[key] = true;\n        if (aliases[key]) {\n            flags.strings[aliases[key]] = true;\n        }\n     });\n\n    var defaults = opts['default'] || {};\n    \n    var argv = { _ : [] };\n    Object.keys(flags.bools).forEach(function (key) {\n        setArg(key, defaults[key] === undefined ? false : defaults[key]);\n ": {
        "count": 1,
        "size": 5840
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = function (tree, recurseName, opts) {\n  opts = opts || {};\n  var nameFn = opts.name || function (e) { return e.name; };\n  var filterFn = opts.filter || function () { return true; };\n  var sortFn = !opts.sort ? null : function (x, y) {\n    return nameFn(x).localeCompare(nameFn(y));\n  };\n\n\n  var lines = [nameFn(tree)];\n  if (!Array.isArray(tree[recurseName])) {\n    throw new Error(\"No recurse entry for '\" + recurseName + \"' found on root\");\n  }\n\n  var recurse = function (xs, level, parentAry) {\n    var ys = (sortFn instanceof Function) ? xs.sort(sortFn) : xs;\n    ys.forEach(function (sub, idx, subAry) {\n      var children    = (sub[recurseName] || []).filter(filterFn)\n        , hasChildren = children.length > 0\n        , forkChar    = hasChildren ? \"\u252c\" : \"\u2500\"\n        , isLast      = idx === subAry.length - 1\n        , turnChar    = isLast ? \"\u2514\" : \"\u251c\"\n        , indent      = '';\n      \n      for (var i = 0; i < level; i += 1) {\n        ": {
        "count": 1,
        "size": 2872
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n});": {
        "count": 1,
        "size": 440
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = getUrl\n\nfunction getUrl (r, forBrowser) {\n  if (!r) return null\n  // Regex taken from https://github.com/npm/npm-package-arg/commit/01dce583c64afae07b66a2a8a6033aeba871c3cd\n  // Note: This does not fully test the git ref format.\n  // See https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html\n  //\n  // The only way to do this properly would be to shell out to\n  // git-check-ref-format, and as this is a fast sync function,\n  // we don't want to do that. Just let git fail if it turns\n  // out that the commit-ish is invalid.\n  // GH usernames cannot start with . or -\n  if (/^[^@%\\/\\s\\.-][^:@%\\/\\s]*\\/[^@\\s\\/%]+(?:#.*)?$/.test(r)) {\n    if (forBrowser)\n      r = r.replace(\"#\", \"/tree/\")\n    return \"https://github.com/\" + r\n  }\n\n  return null\n}\n\n});": {
        "count": 1,
        "size": 880
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = globSync\nglobSync.GlobSync = GlobSync\n\nvar fs = require('fs')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar Glob = require('./glob.js').Glob\nvar util = require('util')\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar childrenIgnored = common.childrenIgnored\n\nfunction globSync (pattern, options) {\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  return new GlobSync(pattern, options).found\n}\n\nfunction GlobSync (pattern, options) {\n  if (!pattern)\n    throw new Error('must provide pattern')\n\n  if (typeof options === 'function' || argum": {
        "count": 1,
        "size": 11552
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n   ": {
        "count": 1,
        "size": 24960
    },
    "(function (exports, require, module, __filename, __dirname) { module.exports = normalize\n\nvar fixer = require(\"./fixer\")\nvar makeWarning = require(\"./make_warning\")\n\nvar fieldsToFix = ['name','version','description','repository','modules','scripts'\n                  ,'files','bin','man','bugs','keywords','readme','homepage']\nvar otherThingsToFix = ['dependencies','people', 'typos']\n\nvar thingsToFix = fieldsToFix.map(function(fieldName) { \n  return ucFirst(fieldName) + \"Field\"\n})\n// two ways to do this in CoffeeScript on only one line, sub-70 chars:\n// thingsToFix = fieldsToFix.map (name) -> ucFirst(name) + \"Field\"\n// thingsToFix = (ucFirst(name) + \"Field\" for name in fieldsToFix)\nthingsToFix = thingsToFix.concat(otherThingsToFix)\n\nfunction normalize (data, warn, strict) {\n  if(warn === true) warn = null, strict = true\n  if(!strict) strict = false\n  if(!warn || data.private) warn = function(msg) { /* noop */ }\n\n  if (data.scripts && \n      data.scripts.install === \"node-gyp rebuild\" && \n      !data.scripts.pre": {
        "count": 1,
        "size": 1400
    },
    "(function (exports, require, module, __filename, __dirname) { var Statsd = require('strong-statsd');\nvar agent = require('./agent');\nvar assert = require('assert');\nvar cluster = require('cluster');\nvar master = require('strong-cluster-control');\nvar debug = require('./debug')('metrics');\nvar expandString = require('./expander').expand;\n\ntry {\n  var syslog = require('strong-fork-syslog');\n} catch (er) {\n  debug('syslog optional dep not present');\n}\n\nfunction sendMetrics(parentCtl, callback) {\n  callback = callback || function() {};\n\n  // Scenarios:\n  //   no STRONGLOOP_METRICS, return\n  //\n  //   called from master:\n  //     needs to .start() with expanded scope\n  //       if invalid, warn, and clear env... so children don't warn\n  //     needs to wait for start\n  //     needs to reset STRONGLOOP_METRICS *before* starting cluster\n  //       statsd://:PORT/SCOPE-TEMPLATE\n  //\n  //\n  //   called from worker:\n  //     needs to .start() with expanded scope (will always be a statsd: URL)\n  //\n  //   called from si": {
        "count": 1,
        "size": 3512
    },
    "(function (exports, require, module, __filename, __dirname) { var Stream = require(\"stream\")\nvar writeMethods = [\"write\", \"end\", \"destroy\"]\nvar readMethods = [\"resume\", \"pause\"]\nvar readEvents = [\"data\", \"close\"]\nvar slice = Array.prototype.slice\n\nmodule.exports = duplex\n\nfunction forEach (arr, fn) {\n    if (arr.forEach) {\n        return arr.forEach(fn)\n    }\n\n    for (var i = 0; i < arr.length; i++) {\n        fn(arr[i], i)\n    }\n}\n\nfunction duplex(writer, reader) {\n    var stream = new Stream()\n    var ended = false\n\n    forEach(writeMethods, proxyWriter)\n\n    forEach(readMethods, proxyReader)\n\n    forEach(readEvents, proxyStream)\n\n    reader.on(\"end\", handleEnd)\n\n    writer.on(\"drain\", function() {\n      stream.emit(\"drain\")\n    })\n\n    writer.on(\"error\", reemit)\n    reader.on(\"error\", reemit)\n\n    stream.writable = writer.writable\n    stream.readable = reader.readable\n\n    return stream\n\n    function proxyWriter(methodName) {\n        stream[methodName] = method\n\n        function method() {\n            retu": {
        "count": 1,
        "size": 1976
    },
    "(function (exports, require, module, __filename, __dirname) { var Stream = require('stream')\n\n// through\n//\n// a stream that does nothing but re-emit the input.\n// useful for aggregating a series of changing but not ending streams into one stream)\n\nexports = module.exports = through\nthrough.through = through\n\n//create a readable writable stream.\n\nfunction through (write, end, opts) {\n  write = write || function (data) { this.queue(data) }\n  end = end || function () { this.queue(null) }\n\n  var ended = false, destroyed = false, buffer = [], _ended = false\n  var stream = new Stream()\n  stream.readable = stream.writable = true\n  stream.paused = false\n\n//  stream.autoPause   = !(opts && opts.autoPause   === false)\n  stream.autoDestroy = !(opts && opts.autoDestroy === false)\n\n  stream.write = function (data) {\n    write.call(this, data)\n    return !stream.paused\n  }\n\n  function drain() {\n    while(buffer.length && !stream.paused) {\n      var data = buffer.shift()\n      if(null === data)\n        return stream.emit('": {
        "count": 1,
        "size": 2712
    },
    "(function (exports, require, module, __filename, __dirname) { var Stream = require('stream').Stream\n\nmodule.exports = legacy\n\nfunction legacy (fs) {\n  return {\n    ReadStream: ReadStream,\n    WriteStream: WriteStream\n  }\n\n  function ReadStream (path, options) {\n    if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n\n    Stream.call(this);\n\n    var self = this;\n\n    this.path = path;\n    this.fd = null;\n    this.readable = true;\n    this.paused = false;\n\n    this.flags = 'r';\n    this.mode = 438; /*=0666*/\n    this.bufferSize = 64 * 1024;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.encoding) this.setEncoding(this.encoding);\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.end ===": {
        "count": 1,
        "size": 2752
    },
    "(function (exports, require, module, __filename, __dirname) { var agent = require('../agent');\n\n// Trace format:\n//\n//   https://github.com/strongloop/strongops/pull/245#issue-53570095\n//\n// Only httpCalls is of interest, the other properties are either duplicates of\n// httpCalls, or sub-trees of httpCalls.\n\nexports.worker = function(handle) {\n  agent().on('topCalls', function(trace) {\n    if (!trace.httpCalls) return;\n\n    handle.emit({\n      cmd: 'agent:trace',\n      // startTime, worker.id added in master\n      processId: process.pid,\n      trace: trace.httpCalls,\n    });\n  });\n};\n\nexports.master = function(handle) {\n  handle.on('agent:trace', function(msg, worker) {\n    msg.pst = worker.startTime;\n    msg.workerId = worker.id;\n    handle.send(msg);\n  });\n};\n\n});": {
        "count": 1,
        "size": 800
    },
    "(function (exports, require, module, __filename, __dirname) { var agent = require('../agent');\n\nexports.worker = function(handle) {\n  agent().on('express:usage-record', function(record) {\n    handle.send({\n      cmd: 'express:usage-record',\n      record: record\n    });\n  });\n};\n\n});": {
        "count": 1,
        "size": 312
    },
    "(function (exports, require, module, __filename, __dirname) { var agent = require('./agent');\nvar assert = require('assert');\nvar cluster = require('cluster');\nvar cpuProfileWatcher = require('./watcher/cpu-profile');\nvar debug = require('./debug')('targetctl');\nvar fmt = require('util').format;\nvar fs = require('fs');\nvar capabilities = require('./capabilities');\nvar heapdump = null;\nvar async = require('async');\nvar strongDebugger = require('./debugger');\nvar extend = require('util')._extend;\n\n// override any other options since some of them will break us\nprocess.env.NODE_HEAPDUMP_OPTIONS = 'nosignal';\ntry {\n  heapdump = require('heapdump');\n} catch (e) {\n  /* eslint no-empty:0 */\n  /* Ignore. Heapdump is optional. */\n}\n\nmodule.exports = require('strong-control-channel/cluster')(onRequest);\n\nfunction getWorkerInfo() {\n  var workerId = cluster.isMaster ? 0 : cluster.worker.id;\n  var workerPid = cluster.isMaster ? process.pid : cluster.worker.process.pid;\n\n  return {\n    id: workerId,\n    pid: workerPid,\n  };": {
        "count": 1,
        "size": 6952
    },
    "(function (exports, require, module, __filename, __dirname) { var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handli": {
        "count": 1,
        "size": 4432
    },
    "(function (exports, require, module, __filename, __dirname) { var debug = require('debug');\nvar name = require('../package.json').name;\nvar MAX = 120;\n\nfunction json(js) {\n  // Don't json encode the string if debug is disabled.\n  if (this.enabled) {\n    var s = JSON.stringify(js);\n\n    if (s.length < MAX)\n      return s;\n\n    return s.substring(0, MAX) + '...';\n  }\n  return '';\n}\n\nmodule.exports = function(tag) {\n  var fn = debug(name + ':' + tag);\n  fn.json = json;\n  return fn;\n};\n\n});": {
        "count": 1,
        "size": 520
    },
    "(function (exports, require, module, __filename, __dirname) { var fs\ntry {\n  fs = require('graceful-fs')\n} catch (er) {\n  fs = require('fs')\n}\n\nvar path = require('path')\n\nvar glob = require('glob')\nvar normalizeData = require('normalize-package-data')\nvar safeJSON = require('json-parse-helpfulerror')\n\nmodule.exports = readJson\n\n// put more stuff on here to customize.\nreadJson.extraSet = [\n  gypfile,\n  serverjs,\n  scriptpath,\n  authors,\n  readme,\n  mans,\n  bins,\n  githead\n]\n\nvar typoWarned = {}\n\nfunction readJson (file, log_, strict_, cb_) {\n  var log, strict, cb\n  for (var i = 1; i < arguments.length - 1; i++) {\n    if (typeof arguments[i] === 'boolean') {\n      strict = arguments[i]\n    } else if (typeof arguments[i] === 'function') {\n      log = arguments[i]\n    }\n  }\n\n  if (!log) log = function () {}\n  cb = arguments[ arguments.length - 1 ]\n\n  readJson_(file, log, strict, cb)\n}\n\nfunction readJson_ (file, log, strict, cb) {\n  fs.readFile(file, 'utf8', function (er, d) {\n    parseJson(file, er, d, log, stri": {
        "count": 1,
        "size": 9552
    },
    "(function (exports, require, module, __filename, __dirname) { var fs = require ('graceful-fs')\nvar dz = require ('dezalgo')\nvar once = require ('once')\nvar path = require ('path')\nvar debug = require ('debuglog') ('rds')\n\nmodule . exports = readdir\n\nfunction readdir (dir, cb) {\n  fs . readdir (dir, function (er, kids) {\n    if (er)\n      return cb (er)\n\n    debug ('dir=%j, kids=%j', dir, kids)\n    readScopes (dir, kids, function (er, data) {\n      if (er)\n        return cb (er)\n\n      // Sort for bonus consistency points\n      data = data . sort (function (a, b) {\n        return a > b ? 1 : -1\n      })\n\n      return cb (null, data)\n    })\n  })\n}\n\n// Turn [ 'a', '@scope' ] into\n// ['a', '@scope/foo', '@scope/bar']\nfunction readScopes (root, kids, cb) {\n  var scopes = kids . filter (function (kid) {\n    return kid . charAt (0) === '@'\n  })\n\n  kids = kids . filter (function (kid) {\n    return kid . charAt (0) !== '@'\n  })\n\n  debug ('scopes=%j', scopes)\n\n  if (scopes . length === 0)\n    dz (cb) (null, kids) // pr": {
        "count": 1,
        "size": 1848
    },
    "(function (exports, require, module, __filename, __dirname) { var fs = require('./fs.js')\nvar constants = require('constants')\n\nvar origCwd = process.cwd\nvar cwd = null\nprocess.cwd = function() {\n  if (!cwd)\n    cwd = origCwd.call(process)\n  return cwd\n}\ntry {\n  process.cwd()\n} catch (er) {}\n\nvar chdir = process.chdir\nprocess.chdir = function(d) {\n  cwd = null\n  chdir.call(process, d)\n}\n\nmodule.exports = patch\n\nfunction patch (fs) {\n  // (re-)implement some things that are known busted or missing.\n\n  // lchmod, broken prior to 0.6.2\n  // back-port the fix here.\n  if (constants.hasOwnProperty('O_SYMLINK') &&\n      process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n    patchLchmod(fs)\n  }\n\n  // lutimes implementation, or no-op\n  if (!fs.lutimes) {\n    patchLutimes(fs)\n  }\n\n  // https://github.com/isaacs/node-graceful-fs/issues/4\n  // Chown should not fail on einval or eperm if non-root.\n  // It should not fail on enosys ever, as this just indicates\n  // that a fs doesn't support the intended operation.\n\n  fs.ch": {
        "count": 1,
        "size": 6664
    },
    "(function (exports, require, module, __filename, __dirname) { var fs = require('./fs.js')\nvar constants = require('constants')\n\nvar origCwd = process.cwd\nvar cwd = null\nprocess.cwd = function() {\n  if (!cwd)\n    cwd = origCwd.call(process)\n  return cwd\n}\nvar chdir = process.chdir\nprocess.chdir = function(d) {\n  cwd = null\n  chdir.call(process, d)\n}\n\n// (re-)implement some things that are known busted or missing.\n\n// lchmod, broken prior to 0.6.2\n// back-port the fix here.\nif (constants.hasOwnProperty('O_SYMLINK') &&\n    process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n  fs.lchmod = function (path, mode, callback) {\n    callback = callback || noop\n    fs.open( path\n           , constants.O_WRONLY | constants.O_SYMLINK\n           , mode\n           , function (err, fd) {\n      if (err) {\n        callback(err)\n        return\n      }\n      // prefer to return the chmod error, if one occurs,\n      // but still try to close, and report closing errors if they occur.\n      fs.fchmod(fd, mode, function (err) {\n      ": {
        "count": 1,
        "size": 6584
    },
    "(function (exports, require, module, __filename, __dirname) { var fs = require('fs')\nvar polyfills = require('./polyfills.js')\nvar legacy = require('./legacy-streams.js')\nvar queue = []\n\nvar util = require('util')\n\nfunction noop () {}\n\nvar debug = noop\nif (util.debuglog)\n  debug = util.debuglog('gfs4')\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || ''))\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ')\n    console.error(m)\n  }\n\nif (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n  process.on('exit', function() {\n    debug(queue)\n    require('assert').equal(queue.length, 0)\n  })\n}\n\nmodule.exports = patch(require('./fs.js'))\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {\n  module.exports = patch(fs)\n}\n\n// Always patch fs.close/closeSync, because we want to\n// retry() whenever a close happens *anywhere* in the program.\n// This is essential when multiple graceful-fs instances are\n// in play at the same time.\nmodule.exports.close =\nfs.c": {
        "count": 1,
        "size": 6920
    },
    "(function (exports, require, module, __filename, __dirname) { var fs = require('fs');\n\n// Stale files are readable, but don't have the pid of a currently existing\n// process in them.\nfunction isStale(file) {\n  try {\n    var pid = fs.readFileSync(file) | 0; // Coerce non-numerics to 0\n  } catch (er) {\n    // File doesn't exist, or can't be accessed, not stale\n    return false;\n  }\n\n  if (pid < 1) {\n    // Pid's less than 1 do not exist, it is stale\n    return true;\n  }\n\n  try {\n    process.kill(pid, 0);\n  } catch (er) {\n    if (er.code === 'ESRCH') {\n      // Pid does not exist, it is stale\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Unlink if possible, ignore if not\nfunction unlink(file) {\n  try {\n    fs.unlinkSync(file);\n  } catch (er) {\n    /* eslint no-empty:0 */\n  }\n}\n\n// Write pidfile, errors on failure, including pre-existence of file\nfunction write(file, pid) {\n  fs.writeFileSync(file, pid, {flag: 'wx'});\n}\n\nfunction create(file) {\n  if (isStale(file)) {\n    unlink(file);\n  }\n  write(file, proc": {
        "count": 1,
        "size": 1384
    },
    "(function (exports, require, module, __filename, __dirname) { var open = require('fs').openSync;\nvar spawn = require('child_process').spawn;\n\nmodule.exports = function detach(argv, log) {\n  var stdio = (function() {\n    if (log === '-') {\n      return 'inherit';\n    }\n    // output file must be opened once for each target descriptor\n    // see https://github.com/joyent/libuv/issues/1074\n    var out = open(log, 'a');\n    var err = open(log, 'a');\n    return ['ignore', out, err];\n  }());\n\n  var child = spawn(\n    argv[0],\n    argv.slice(1),\n    {\n      detached: true,\n      env: process.env,\n      stdio: stdio,\n    }\n  );\n  child.unref();\n  return child;\n};\n\n});": {
        "count": 1,
        "size": 696
    },
    "(function (exports, require, module, __filename, __dirname) { var semver = require(\"semver\")\nvar parseGitHubURL = require(\"github-url-from-git\")\nvar depTypes = [\"dependencies\",\"devDependencies\",\"optionalDependencies\"]\nvar extractDescription = require(\"./extract_description\")\nvar url = require(\"url\")\nvar typos = require(\"./typos\")\nvar coreModuleNames = require(\"./core_module_names\")\nvar githubUserRepo = require(\"github-url-from-username-repo\")\n\nvar fixer = module.exports = {\n  // default warning function\n  warn: function() {},\n\n  fixRepositoryField: function(data) {\n    if (data.repositories) {\n      this.warn(\"repositories\");\n      data.repository = data.repositories[0]\n    }\n    if (!data.repository) return this.warn(\"missingRepository\")\n    if (typeof data.repository === \"string\") {\n      data.repository = {\n        type: \"git\",\n        url: data.repository\n      }\n    }\n    var r = data.repository.url || \"\"\n    if (r) {\n      var ghurl = parseGitHubURL(r)\n      if (ghurl) {\n        r = ghurl.replace(/^http": {
        "count": 1,
        "size": 11400
    },
    "(function (exports, require, module, __filename, __dirname) { var util = require(\"util\")\nvar messages = require(\"./warning_messages.json\")\n\nmodule.exports = function() {\n  var args = Array.prototype.slice.call(arguments, 0)\n  var warningName = args.shift()\n  if (warningName == \"typo\") {\n    return makeTypoWarning.apply(null,args)\n  }\n  else {\n    var msgTemplate = messages[warningName] ? messages[warningName] : warningName + \": '%s'\"\n    args.unshift(msgTemplate)\n    return util.format.apply(null, args)\n  }\n}\n\nfunction makeTypoWarning (providedName, probableName, field) {\n  if (field) {\n    providedName = field + \"['\" + providedName + \"']\"\n    probableName = field + \"['\" + probableName + \"']\"\n  }\n  return util.format(messages.typo, providedName, probableName)\n}\n});": {
        "count": 1,
        "size": 800
    },
    "(function (exports, require, module, __filename, __dirname) { var util = require('util');\n\nmodule.exports = Logger;\n\nfunction Logger(sink) {\n  if (!(this instanceof Logger)) return new Logger(sink);\n\n  this.sink = sink;\n}\n\nLogger.prototype.info = partial(LevelLog, 'INFO');\nLogger.prototype.log = Logger.prototype.info;\nLogger.prototype.warn = partial(LevelLog, 'WARN');\nLogger.prototype.error = partial(LevelLog, 'ERROR');\n\nfunction LevelLog(level/*, items... */) {\n  var items = [].slice.call(arguments, 1);\n  this.sink.write(level + ' ' +\n                  util.format.apply(util, items) +\n                  '\\n');\n}\n\nfunction partial(fn/*, firstArgs... */) {\n  var firstArgs = [].slice.call(arguments, 1);\n  return function() {\n    var args = firstArgs.concat([].slice.call(arguments));\n    return fn.apply(this, args);\n  };\n}\n\n});": {
        "count": 1,
        "size": 864
    },
    "(function (exports, require, module, __filename, __dirname) { var util = require('util');\nvar Transform = require('stream').Transform;\nutil.inherits(Stringifier, Transform);\n\nfunction Stringifier(options) {\n  if (!options)\n    options = {};\n\n  if (!(this instanceof Stringifier))\n    return new Stringifier(options);\n\n  Transform.call(this, options);\n  this._writableState.objectMode = true;\n  this._readableState.objectMode = false;\n}\n\nStringifier.prototype._transform = function(chunk, encoding, done) {\n  this.push(JSON.stringify(chunk)+'\\n');\n  done();\n};\n\nmodule.exports = Stringifier;\n\n});": {
        "count": 1,
        "size": 624
    },
    "(function (exports, require, module, __filename, __dirname) { var util = require('util');\nvar stream = require('stream');\nvar fs = require('fs');\nvar spawn = require('child_process').spawn;\n\nvar generateLogName = require('./expander').expand;\n\nmodule.exports = LogWriter;\n\nfunction LogWriter(worker, options) {\n  if (!(this instanceof LogWriter)) return new LogWriter(worker, options);\n\n  stream.PassThrough.call(this);\n\n  this.template = options.log;\n  this.worker = {\n    id: worker.id || 0,\n    pid: worker.pid || worker.process.pid\n  };\n  this.name = generateLogName(this.template, this.worker);\n  if (/^\\|[^\\|]/.test(this.name)) {\n    this.cmd = this.name\n                .slice(1) // strip leading '|'\n                .trim()\n                .split(/\\s+/);\n    this.proc = spawn(this.cmd[0], this.cmd.slice(1),\n                      {stdio: ['pipe', process.stdout, process.stderr]});\n    this.sink = this.proc.stdin;\n  } else {\n    this.sink = fs.createWriteStream(this.name, {flags: 'a'});\n  }\n  this.pipe(this.sink)": {
        "count": 1,
        "size": 1432
    },
    "(function (exports, require, module, __filename, __dirname) { var wrappy = require('wrappy')\nmodule.exports = wrappy(dezalgo)\n\nvar asap = require('asap')\n\nfunction dezalgo (cb) {\n  var sync = true\n  asap(function () {\n    sync = false\n  })\n\n  return function zalgoSafe() {\n    var args = arguments\n    var me = this\n    if (sync)\n      asap(function() {\n        cb.apply(me, args)\n      })\n    else\n      cb.apply(me, args)\n  }\n}\n\n});": {
        "count": 1,
        "size": 464
    },
    "(function (exports, require, module, __filename, __dirname) { var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\n});": {
        "count": 2,
        "size": 1024
    },
    "(function (exports, require, module, __filename, __dirname) { var wrappy = require('wrappy')\nvar reqs = Object.create(null)\nvar once = require('once')\n\nmodule.exports = wrappy(inflight)\n\nfunction inflight (key, cb) {\n  if (reqs[key]) {\n    reqs[key].push(cb)\n    return null\n  } else {\n    reqs[key] = [cb]\n    return makeres(key)\n  }\n}\n\nfunction makeres (key) {\n  return once(function RES () {\n    var cbs = reqs[key]\n    var len = cbs.length\n    var args = slice(arguments)\n    for (var i = 0; i < len; i++) {\n      cbs[i].apply(null, args)\n    }\n    if (cbs.length > len) {\n      // added more in the interim.\n      // de-zalgo, just in case, but don't call again.\n      cbs.splice(0, len)\n      process.nextTick(function () {\n        RES.apply(null, args)\n      })\n    } else {\n      delete reqs[key]\n    }\n  })\n}\n\nfunction slice (args) {\n  var length = args.length\n  var array = []\n\n  for (var i = 0; i < length; i++) array[i] = args[i]\n  return array\n}\n\n});": {
        "count": 1,
        "size": 992
    },
    "(function bindings)": {
        "count": 15,
        "size": 512
    },
    "(function literals)": {
        "count": 1142,
        "size": 38592
    },
    "(function scope info)": {
        "count": 1311,
        "size": 191136
    },
    "(function() {})": {
        "count": 1,
        "size": 40
    },
    "(map descriptors)": {
        "count": 1254,
        "size": 219120
    },
    "(node) ": {
        "count": 1,
        "size": 32
    },
    "(node) warning: possible EventEmitter memory ": {
        "count": 1,
        "size": 72
    },
    "(object elements)": {
        "count": 853,
        "size": 105856
    },
    "(object properties)": {
        "count": 453,
        "size": 196496
    },
    "(prototype transitions": {
        "count": 11,
        "size": 696
    },
    "(shared function info)": {
        "count": 1721,
        "size": 247824
    },
    "(sliced string)": {
        "count": 47,
        "size": 1880
    },
    "(transition array)": {
        "count": 103,
        "size": 10640
    },
    ")": {
        "count": 1,
        "size": 32
    },
    ")$|^$": {
        "count": 1,
        "size": 32
    },
    ")*))": {
        "count": 1,
        "size": 32
    },
    ")?": {
        "count": 1,
        "size": 32
    },
    ")?)?": {
        "count": 1,
        "size": 32
    },
    ")\\.": {
        "count": 1,
        "size": 32
    },
    ")|": {
        "count": 1,
        "size": 32
    },
    "*": {
        "count": 3,
        "size": 96
    },
    "*?": {
        "count": 1,
        "size": 32
    },
    "*node_modules/strong-agent/*": {
        "count": 1,
        "size": 56
    },
    "+": {
        "count": 1,
        "size": 32
    },
    "+(?=": {
        "count": 1,
        "size": 32
    },
    "+|[0-9]+": {
        "count": 1,
        "size": 32
    },
    ",": {
        "count": 1,
        "size": 32
    },
    ",\n  ": {
        "count": 1,
        "size": 32
    },
    ", ": {
        "count": 1,
        "size": 32
    },
    "-": {
        "count": 1,
        "size": 32
    },
    "--cluster": {
        "count": 1,
        "size": 40
    },
    "--cluster=0": {
        "count": 1,
        "size": 40
    },
    "--debug-agent": {
        "count": 1,
        "size": 40
    },
    "--detach": {
        "count": 1,
        "size": 32
    },
    "--help": {
        "count": 1,
        "size": 32
    },
    "--log": {
        "count": 2,
        "size": 64
    },
    "--logfile=v8-%p.log": {
        "count": 1,
        "size": 48
    },
    "--metrics": {
        "count": 2,
        "size": 80
    },
    "--no-channel": {
        "count": 1,
        "size": 40
    },
    "--no-cluster": {
        "count": 1,
        "size": 40
    },
    "--no-control": {
        "count": 1,
        "size": 40
    },
    "--no-detach": {
        "count": 1,
        "size": 40
    },
    "--no-log-decoration": {
        "count": 1,
        "size": 48
    },
    "--no-profile": {
        "count": 1,
        "size": 40
    },
    "--no-timestamp-supervisor": {
        "count": 1,
        "size": 56
    },
    "--no-timestamp-workers": {
        "count": 1,
        "size": 48
    },
    "--pid": {
        "count": 1,
        "size": 32
    },
    "--profile": {
        "count": 1,
        "size": 40
    },
    "--syslog": {
        "count": 1,
        "size": 32
    },
    "--trace": {
        "count": 1,
        "size": 32
    },
    "--version": {
        "count": 1,
        "size": 40
    },
    "-0": {
        "count": 1,
        "size": 32
    },
    "-1": {
        "count": 1,
        "size": 32
    },
    "-1:runctl:-1": {
        "count": 1,
        "size": 40
    },
    "-2": {
        "count": 1,
        "size": 32
    },
    "-3": {
        "count": 1,
        "size": 32
    },
    "-4": {
        "count": 1,
        "size": 32
    },
    "-5": {
        "count": 1,
        "size": 32
    },
    "-6": {
        "count": 1,
        "size": 32
    },
    "-C": {
        "count": 1,
        "size": 32
    },
    "-Infinity": {
        "count": 1,
        "size": 40
    },
    "-d": {
        "count": 1,
        "size": 32
    },
    "-h": {
        "count": 1,
        "size": 32
    },
    "-l": {
        "count": 1,
        "size": 32
    },
    "-m": {
        "count": 1,
        "size": 32
    },
    "-p": {
        "count": 1,
        "size": 32
    },
    "-q": {
        "count": 1,
        "size": 32
    },
    "-v": {
        "count": 1,
        "size": 32
    },
    ".": {
        "count": 1,
        "size": 32
    },
    ".*?": {
        "count": 1,
        "size": 32
    },
    "..": {
        "count": 1,
        "size": 32
    },
    "...": {
        "count": 1,
        "size": 32
    },
    "...<omitted>...": {
        "count": 1,
        "size": 40
    },
    "../": {
        "count": 1,
        "size": 32
    },
    "../../deps/icu/source/data/in/icudt56l.dat": {
        "count": 1,
        "size": 72
    },
    "../agent": {
        "count": 1,
        "size": 32
    },
    "../bin/sl-run.txt": {
        "count": 1,
        "size": 48
    },
    "../build/Debug/addon": {
        "count": 1,
        "size": 48
    },
    "../build/Release/addon": {
        "count": 1,
        "size": 48
    },
    "../lib/aspect.js": {
        "count": 1,
        "size": 40
    },
    "../lib/probe.js": {
        "count": 1,
        "size": 40
    },
    "../lib/request.js": {
        "count": 1,
        "size": 48
    },
    "../package.json": {
        "count": 1,
        "size": 40
    },
    "../tracer": {
        "count": 1,
        "size": 40
    },
    "..js": {
        "count": 1,
        "size": 32
    },
    "..json": {
        "count": 1,
        "size": 32
    },
    "..node": {
        "count": 1,
        "size": 32
    },
    "./": {
        "count": 1,
        "size": 32
    },
    "./BufferPool": {
        "count": 1,
        "size": 40
    },
    "./BufferUtil": {
        "count": 1,
        "size": 40
    },
    "./ErrorCodes": {
        "count": 1,
        "size": 40
    },
    "./Extensions": {
        "count": 1,
        "size": 40
    },
    "./PerMessageDeflate": {
        "count": 1,
        "size": 48
    },
    "./Receiver": {
        "count": 1,
        "size": 40
    },
    "./Receiver.hixie": {
        "count": 1,
        "size": 40
    },
    "./Sender": {
        "count": 1,
        "size": 32
    },
    "./Sender.hixie": {
        "count": 1,
        "size": 40
    },
    "./Validation": {
        "count": 1,
        "size": 40
    },
    "./WebSocket": {
        "count": 1,
        "size": 40
    },
    "./adapter": {
        "count": 1,
        "size": 40
    },
    "./agent": {
        "count": 1,
        "size": 32
    },
    "./appmetrics": {
        "count": 1,
        "size": 40
    },
    "./appmetrics-api.js": {
        "count": 1,
        "size": 48
    },
    "./asap.js": {
        "count": 1,
        "size": 40
    },
    "./aspect.js": {
        "count": 1,
        "size": 40
    },
    "./aspects": {
        "count": 1,
        "size": 40
    },
    "./backend/context.js": {
        "count": 1,
        "size": 48
    },
    "./backends/console": {
        "count": 1,
        "size": 48
    },
    "./backends/graphite": {
        "count": 1,
        "size": 48
    },
    "./backends/internal": {
        "count": 1,
        "size": 48
    },
    "./backends/log": {
        "count": 1,
        "size": 40
    },
    "./backends/repeater": {
        "count": 1,
        "size": 48
    },
    "./backends/splunk": {
        "count": 1,
        "size": 48
    },
    "./backends/syslog": {
        "count": 1,
        "size": 48
    },
    "./bin/sl-run.js": {
        "count": 2,
        "size": 80
    },
    "./bin/sl-runctl.js": {
        "count": 2,
        "size": 96
    },
    "./bind-actor.js": {
        "count": 1,
        "size": 40
    },
    "./bindings.js": {
        "count": 3,
        "size": 120
    },
    "./capabilities": {
        "count": 1,
        "size": 40
    },
    "./channel": {
        "count": 1,
        "size": 40
    },
    "./chdir": {
        "count": 1,
        "size": 32
    },
    "./commands/base_command": {
        "count": 1,
        "size": 48
    },
    "./common.js": {
        "count": 1,
        "size": 40
    },
    "./core_module_names": {
        "count": 1,
        "size": 48
    },
    "./debug": {
        "count": 1,
        "size": 32
    },
    "./debugger": {
        "count": 1,
        "size": 40
    },
    "./deps/icu": {
        "count": 1,
        "size": 40
    },
    "./detach": {
        "count": 1,
        "size": 32
    },
    "./expander": {
        "count": 1,
        "size": 40
    },
    "./extract_description": {
        "count": 1,
        "size": 48
    },
    "./fixer": {
        "count": 1,
        "size": 32
    },
    "./fs.js": {
        "count": 1,
        "size": 32
    },
    "./glob.js": {
        "count": 1,
        "size": 40
    },
    "./helpers": {
        "count": 1,
        "size": 40
    },
    "./index": {
        "count": 1,
        "size": 32
    },
    "./inherits.js": {
        "count": 1,
        "size": 40
    },
    "./legacy-streams.js": {
        "count": 1,
        "size": 48
    },
    "./lib/Receiver": {
        "count": 1,
        "size": 40
    },
    "./lib/Sender": {
        "count": 1,
        "size": 40
    },
    "./lib/WebSocket": {
        "count": 1,
        "size": 40
    },
    "./lib/WebSocketServer": {
        "count": 1,
        "size": 48
    },
    "./lib/aspect.js": {
        "count": 1,
        "size": 40
    },
    "./lib/byline.js": {
        "count": 1,
        "size": 40
    },
    "./lib/log": {
        "count": 1,
        "size": 40
    },
    "./lib/main": {
        "count": 1,
        "size": 40
    },
    "./lib/request.js": {
        "count": 1,
        "size": 40
    },
    "./lib/serializer": {
        "count": 1,
        "size": 40
    },
    "./lib/server": {
        "count": 1,
        "size": 40
    },
    "./lib/servers/ipc": {
        "count": 1,
        "size": 48
    },
    "./lib/slide.js": {
        "count": 1,
        "size": 40
    },
    "./locale/": {
        "count": 1,
        "size": 40
    },
    "./log-writer": {
        "count": 1,
        "size": 40
    },
    "./logger": {
        "count": 1,
        "size": 32
    },
    "./make_warning": {
        "count": 1,
        "size": 40
    },
    "./message": {
        "count": 1,
        "size": 40
    },
    "./metrics": {
        "count": 1,
        "size": 40
    },
    "./moment.js": {
        "count": 1,
        "size": 40
    },
    "./msg": {
        "count": 1,
        "size": 32
    },
    "./node.js": {
        "count": 1,
        "size": 40
    },
    "./options": {
        "count": 1,
        "size": 40
    },
    "./pidfile": {
        "count": 1,
        "size": 40
    },
    "./pipe": {
        "count": 1,
        "size": 32
    },
    "./polyfills.js": {
        "count": 1,
        "size": 40
    },
    "./printf-replacer": {
        "count": 1,
        "size": 48
    },
    "./process_metrics": {
        "count": 1,
        "size": 48
    },
    "./raw": {
        "count": 1,
        "size": 32
    },
    "./request.js": {
        "count": 1,
        "size": 40
    },
    "./runctl": {
        "count": 1,
        "size": 32
    },
    "./servers/ipc": {
        "count": 1,
        "size": 40
    },
    "./set": {
        "count": 1,
        "size": 32
    },
    "./start-command": {
        "count": 1,
        "size": 40
    },
    "./sync.js": {
        "count": 1,
        "size": 40
    },
    "./syslog-stream": {
        "count": 1,
        "size": 40
    },
    "./targetctl": {
        "count": 1,
        "size": 40
    },
    "./timer.js": {
        "count": 1,
        "size": 40
    },
    "./typos": {
        "count": 1,
        "size": 32
    },
    "./util": {
        "count": 1,
        "size": 32
    },
    "./warning_messages.json": {
        "count": 1,
        "size": 48
    },
    "./watcher": {
        "count": 1,
        "size": 40
    },
    "./watcher/cpu-profile": {
        "count": 1,
        "size": 48
    },
    ".FreeList": {
        "count": 3,
        "size": 120
    },
    ".ISO_8601": {
        "count": 1,
        "size": 40
    },
    ".QueryString": {
        "count": 2,
        "size": 80
    },
    ".\\/$": {
        "count": 3,
        "size": 176
    },
    "._attach": {
        "count": 1,
        "size": 32
    },
    "._buffer": {
        "count": 1,
        "size": 32
    },
    "._compile": {
        "count": 1,
        "size": 40
    },
    "._connect": {
        "count": 1,
        "size": 40
    },
    "._deprecate": {
        "count": 1,
        "size": 40
    },
    "._destroy": {
        "count": 1,
        "size": 40
    },
    "._detach": {
        "count": 1,
        "size": 32
    },
    "._disconnect": {
        "count": 1,
        "size": 40
    },
    "._done": {
        "count": 1,
        "size": 32
    },
    "._dump": {
        "count": 1,
        "size": 32
    },
    "._emitMatch": {
        "count": 2,
        "size": 80
    },
    "._extend": {
        "count": 1,
        "size": 32
    },
    "._extensions": {
        "count": 3,
        "size": 120
    },
    "._fatalError": {
        "count": 1,
        "size": 40
    },
    "._findPath": {
        "count": 1,
        "size": 40
    },
    "._finish": {
        "count": 4,
        "size": 128
    },
    "._finishInit": {
        "count": 1,
        "size": 40
    },
    "._flush": {
        "count": 4,
        "size": 128
    },
    "._forkChild": {
        "count": 1,
        "size": 40
    },
    "._handle": {
        "count": 1,
        "size": 32
    },
    "._init": {
        "count": 1,
        "size": 32
    },
    "._initPaths": {
        "count": 1,
        "size": 40
    },
    "._isOpen": {
        "count": 1,
        "size": 32
    },
    "._listen2": {
        "count": 1,
        "size": 40
    },
    "._makeAbs": {
        "count": 2,
        "size": 80
    },
    "._makeLong": {
        "count": 2,
        "size": 80
    },
    "._mark": {
        "count": 1,
        "size": 32
    },
    "._onOpen": {
        "count": 1,
        "size": 32
    },
    "._onTimeout": {
        "count": 2,
        "size": 80
    },
    "._onmessage": {
        "count": 1,
        "size": 40
    },
    "._process": {
        "count": 2,
        "size": 80
    },
    "._pushBuffer": {
        "count": 1,
        "size": 40
    },
    "._rawDebug": {
        "count": 1,
        "size": 40
    },
    "._read": {
        "count": 5,
        "size": 160
    },
    "._readdir": {
        "count": 2,
        "size": 80
    },
    "._realpath": {
        "count": 1,
        "size": 40
    },
    "._reconnect": {
        "count": 1,
        "size": 40
    },
    "._reencode": {
        "count": 1,
        "size": 40
    },
    "._request": {
        "count": 1,
        "size": 40
    },
    "._send": {
        "count": 2,
        "size": 64
    },
    "._sendAck": {
        "count": 1,
        "size": 40
    },
    "._setupSlave": {
        "count": 1,
        "size": 40
    },
    "._start": {
        "count": 1,
        "size": 32
    },
    "._stat": {
        "count": 1,
        "size": 32
    },
    "._tlsError": {
        "count": 1,
        "size": 40
    },
    "._transform": {
        "count": 8,
        "size": 320
    },
    "._wrapHandle": {
        "count": 1,
        "size": 40
    },
    "._write": {
        "count": 5,
        "size": 160
    },
    "._writeRaw": {
        "count": 1,
        "size": 40
    },
    "._writev": {
        "count": 3,
        "size": 96
    },
    ".aC": {
        "count": 1,
        "size": 32
    },
    ".aJ": {
        "count": 1,
        "size": 32
    },
    ".aV": {
        "count": 1,
        "size": 32
    },
    ".abort": {
        "count": 1,
        "size": 32
    },
    ".accept": {
        "count": 2,
        "size": 64
    },
    ".accessSync": {
        "count": 2,
        "size": 80
    },
    ".active": {
        "count": 1,
        "size": 32
    },
    ".add": {
        "count": 3,
        "size": 96
    },
    ".addContext": {
        "count": 1,
        "size": 40
    },
    ".addRequest": {
        "count": 1,
        "size": 40
    },
    ".addTrailers": {
        "count": 1,
        "size": 40
    },
    ".address": {
        "count": 6,
        "size": 192
    },
    ".after": {
        "count": 1,
        "size": 32
    },
    ".alloc": {
        "count": 1,
        "size": 32
    },
    ".appendFile": {
        "count": 2,
        "size": 80
    },
    ".around": {
        "count": 1,
        "size": 32
    },
    ".assert": {
        "count": 2,
        "size": 64
    },
    ".async": {
        "count": 9,
        "size": 288
    },
    ".attach": {
        "count": 18,
        "size": 576
    },
    ".bad_lines_seen": {
        "count": 1,
        "size": 40
    },
    ".basename": {
        "count": 2,
        "size": 80
    },
    ".bd": {
        "count": 1,
        "size": 32
    },
    ".before": {
        "count": 1,
        "size": 32
    },
    ".braceExpand": {
        "count": 1,
        "size": 40
    },
    ".cache": {
        "count": 1,
        "size": 32
    },
    ".chdir": {
        "count": 2,
        "size": 64
    },
    ".check": {
        "count": 8,
        "size": 256
    },
    ".checks": {
        "count": 8,
        "size": 256
    },
    ".cleanup": {
        "count": 3,
        "size": 96
    },
    ".clearLine": {
        "count": 1,
        "size": 40
    },
    ".close": {
        "count": 10,
        "size": 320
    },
    ".colors": {
        "count": 1,
        "size": 32
    },
    ".compact": {
        "count": 1,
        "size": 32
    },
    ".compare": {
        "count": 1,
        "size": 32
    },
    ".compareMain": {
        "count": 1,
        "size": 40
    },
    ".comparePre": {
        "count": 1,
        "size": 40
    },
    ".compile": {
        "count": 1,
        "size": 32
    },
    ".compose": {
        "count": 2,
        "size": 64
    },
    ".compress": {
        "count": 1,
        "size": 40
    },
    ".concat": {
        "count": 1,
        "size": 32
    },
    ".config": {
        "count": 1,
        "size": 32
    },
    ".connect": {
        "count": 5,
        "size": 160
    },
    ".cork": {
        "count": 1,
        "size": 32
    },
    ".count": {
        "count": 1,
        "size": 32
    },
    ".cpuprofile": {
        "count": 1,
        "size": 40
    },
    ".create": {
        "count": 2,
        "size": 64
    },
    ".createGzip": {
        "count": 1,
        "size": 40
    },
    ".createUnzip": {
        "count": 1,
        "size": 40
    },
    ".cursorTo": {
        "count": 1,
        "size": 40
    },
    ".debug": {
        "count": 1,
        "size": 32
    },
    ".debugger": {
        "count": 1,
        "size": 40
    },
    ".debuglog": {
        "count": 1,
        "size": 40
    },
    ".decode": {
        "count": 1,
        "size": 32
    },
    ".decompress": {
        "count": 1,
        "size": 40
    },
    ".defaults": {
        "count": 2,
        "size": 80
    },
    ".deflate": {
        "count": 1,
        "size": 32
    },
    ".deflateRaw": {
        "count": 1,
        "size": 40
    },
    ".deflateSync": {
        "count": 1,
        "size": 40
    },
    ".deprecate": {
        "count": 1,
        "size": 40
    },
    ".deserialize": {
        "count": 1,
        "size": 40
    },
    ".destroy": {
        "count": 15,
        "size": 480
    },
    ".destroySoon": {
        "count": 4,
        "size": 160
    },
    ".dirname": {
        "count": 2,
        "size": 64
    },
    ".disable": {
        "count": 2,
        "size": 64
    },
    ".disconnect": {
        "count": 3,
        "size": 120
    },
    ".distribute": {
        "count": 1,
        "size": 40
    },
    ".doDuring": {
        "count": 1,
        "size": 40
    },
    ".doUntil": {
        "count": 2,
        "size": 64
    },
    ".doWhilst": {
        "count": 2,
        "size": 80
    },
    ".done": {
        "count": 1,
        "size": 32
    },
    ".each": {
        "count": 1,
        "size": 32
    },
    ".eachLimit": {
        "count": 2,
        "size": 80
    },
    ".eachOf": {
        "count": 1,
        "size": 32
    },
    ".eachOfLimit": {
        "count": 1,
        "size": 40
    },
    ".eachSeries": {
        "count": 2,
        "size": 80
    },
    ".emit": {
        "count": 1,
        "size": 32
    },
    ".enable": {
        "count": 2,
        "size": 64
    },
    ".encode": {
        "count": 1,
        "size": 32
    },
    ".end": {
        "count": 5,
        "size": 160
    },
    ".endPacket": {
        "count": 1,
        "size": 40
    },
    ".endianness": {
        "count": 2,
        "size": 80
    },
    ".enroll": {
        "count": 1,
        "size": 32
    },
    ".env": {
        "count": 1,
        "size": 32
    },
    ".error": {
        "count": 3,
        "size": 96
    },
    ".escape": {
        "count": 1,
        "size": 32
    },
    ".execFile": {
        "count": 1,
        "size": 40
    },
    ".exists": {
        "count": 1,
        "size": 32
    },
    ".existsSync": {
        "count": 2,
        "size": 80
    },
    ".expand": {
        "count": 1,
        "size": 32
    },
    ".expectData": {
        "count": 1,
        "size": 40
    },
    ".exports": {
        "count": 39,
        "size": 1248
    },
    ".extname": {
        "count": 2,
        "size": 64
    },
    ".fchmodSync": {
        "count": 2,
        "size": 80
    },
    ".fchownSync": {
        "count": 2,
        "size": 80
    },
    ".fetchStack": {
        "count": 1,
        "size": 40
    },
    ".filterUrl": {
        "count": 1,
        "size": 40
    },
    ".finish": {
        "count": 5,
        "size": 160
    },
    ".fixBinField": {
        "count": 1,
        "size": 40
    },
    ".fixManField": {
        "count": 1,
        "size": 40
    },
    ".fixPeople": {
        "count": 1,
        "size": 40
    },
    ".fixTypos": {
        "count": 1,
        "size": 40
    },
    ".flush": {
        "count": 1,
        "size": 32
    },
    ".foldl": {
        "count": 1,
        "size": 32
    },
    ".for": {
        "count": 1,
        "size": 32
    },
    ".forEach": {
        "count": 1,
        "size": 32
    },
    ".forEachOf": {
        "count": 1,
        "size": 40
    },
    ".forever": {
        "count": 2,
        "size": 64
    },
    ".format": {
        "count": 2,
        "size": 64
    },
    ".formatApi": {
        "count": 1,
        "size": 40
    },
    ".formatCPU": {
        "count": 1,
        "size": 40
    },
    ".formatHeap": {
        "count": 1,
        "size": 40
    },
    ".formatOSEnv": {
        "count": 1,
        "size": 40
    },
    ".formatters": {
        "count": 1,
        "size": 40
    },
    ".free": {
        "count": 1,
        "size": 32
    },
    ".fromSocket": {
        "count": 1,
        "size": 40
    },
    ".futimesSync": {
        "count": 2,
        "size": 80
    },
    ".get": {
        "count": 10,
        "size": 320
    },
    ".getAPI": {
        "count": 1,
        "size": 32
    },
    ".getAuthTag": {
        "count": 1,
        "size": 40
    },
    ".getCached": {
        "count": 1,
        "size": 40
    },
    ".getCipher": {
        "count": 2,
        "size": 80
    },
    ".getCiphers": {
        "count": 2,
        "size": 80
    },
    ".getCurves": {
        "count": 1,
        "size": 40
    },
    ".getData": {
        "count": 5,
        "size": 160
    },
    ".getHashes": {
        "count": 1,
        "size": 40
    },
    ".getHeader": {
        "count": 1,
        "size": 40
    },
    ".getName": {
        "count": 2,
        "size": 64
    },
    ".getServers": {
        "count": 1,
        "size": 40
    },
    ".getSession": {
        "count": 2,
        "size": 80
    },
    ".getSource": {
        "count": 1,
        "size": 40
    },
    ".getToken": {
        "count": 1,
        "size": 40
    },
    ".got": {
        "count": 5,
        "size": 160
    },
    ".gunzip": {
        "count": 1,
        "size": 32
    },
    ".gunzipSync": {
        "count": 1,
        "size": 40
    },
    ".gzipSync": {
        "count": 1,
        "size": 40
    },
    ".handoff": {
        "count": 1,
        "size": 32
    },
    ".hasMagic": {
        "count": 1,
        "size": 40
    },
    ".ifError": {
        "count": 1,
        "size": 32
    },
    ".inflate": {
        "count": 1,
        "size": 32
    },
    ".inflateRaw": {
        "count": 1,
        "size": 40
    },
    ".inflateSync": {
        "count": 1,
        "size": 40
    },
    ".inherits": {
        "count": 1,
        "size": 40
    },
    ".init": {
        "count": 1,
        "size": 32
    },
    ".inspect": {
        "count": 4,
        "size": 128
    },
    ".intercept": {
        "count": 1,
        "size": 40
    },
    ".isAbsolute": {
        "count": 2,
        "size": 80
    },
    ".isDirectory": {
        "count": 2,
        "size": 80
    },
    ".isEncoding": {
        "count": 1,
        "size": 40
    },
    ".isFIFO": {
        "count": 2,
        "size": 64
    },
    ".isFile": {
        "count": 2,
        "size": 64
    },
    ".isIPv4": {
        "count": 1,
        "size": 32
    },
    ".isIPv6": {
        "count": 1,
        "size": 32
    },
    ".isInternal": {
        "count": 2,
        "size": 80
    },
    ".isPaused": {
        "count": 1,
        "size": 40
    },
    ".isSocket": {
        "count": 2,
        "size": 80
    },
    ".isatty": {
        "count": 1,
        "size": 32
    },
    ".iterator": {
        "count": 3,
        "size": 120
    },
    ".js": {
        "count": 1,
        "size": 32
    },
    ".json": {
        "count": 1,
        "size": 32
    },
    ".kill": {
        "count": 1,
        "size": 32
    },
    ".lchmodSync": {
        "count": 5,
        "size": 200
    },
    ".lchownSync": {
        "count": 4,
        "size": 160
    },
    ".length": {
        "count": 1,
        "size": 32
    },
    ".listen": {
        "count": 2,
        "size": 64
    },
    ".lutimesSync": {
        "count": 5,
        "size": 200
    },
    ".makeRe": {
        "count": 1,
        "size": 32
    },
    ".mapLimit": {
        "count": 1,
        "size": 40
    },
    ".master": {
        "count": 3,
        "size": 96
    },
    ".match": {
        "count": 1,
        "size": 32
    },
    ".matchOne": {
        "count": 1,
        "size": 40
    },
    ".memoize": {
        "count": 2,
        "size": 64
    },
    ".metrics": {
        "count": 1,
        "size": 32
    },
    ".metricsEnd": {
        "count": 18,
        "size": 720
    },
    ".monitor": {
        "count": 1,
        "size": 32
    },
    ".moveCursor": {
        "count": 1,
        "size": 40
    },
    ".net.Native": {
        "count": 2,
        "size": 80
    },
    ".net.Server": {
        "count": 2,
        "size": 80
    },
    ".net.Socket": {
        "count": 3,
        "size": 120
    },
    ".nextTick": {
        "count": 2,
        "size": 80
    },
    ".noConflict": {
        "count": 2,
        "size": 80
    },
    ".node": {
        "count": 1,
        "size": 32
    },
    ".node_libraries": {
        "count": 1,
        "size": 40
    },
    ".node_modules": {
        "count": 1,
        "size": 40
    },
    ".normalize": {
        "count": 2,
        "size": 80
    },
    ".notify": {
        "count": 1,
        "size": 32
    },
    ".o": {
        "count": 1,
        "size": 32
    },
    ".offer": {
        "count": 1,
        "size": 32
    },
    ".onSocket": {
        "count": 1,
        "size": 40
    },
    ".oncomplete": {
        "count": 1,
        "size": 40
    },
    ".onexit": {
        "count": 1,
        "size": 32
    },
    ".onread": {
        "count": 1,
        "size": 32
    },
    ".onsignal": {
        "count": 1,
        "size": 40
    },
    ".onwrite": {
        "count": 1,
        "size": 32
    },
    ".open": {
        "count": 4,
        "size": 128
    },
    ".openStdin": {
        "count": 1,
        "size": 40
    },
    ".ordinal": {
        "count": 1,
        "size": 32
    },
    ".packets_received": {
        "count": 1,
        "size": 48
    },
    ".parallel": {
        "count": 2,
        "size": 80
    },
    ".parse": {
        "count": 4,
        "size": 128
    },
    ".parseHost": {
        "count": 1,
        "size": 40
    },
    ".parseRange": {
        "count": 1,
        "size": 40
    },
    ".patch": {
        "count": 1,
        "size": 32
    },
    ".pause": {
        "count": 1,
        "size": 32
    },
    ".pbkdf2": {
        "count": 1,
        "size": 32
    },
    ".pbkdf2Sync": {
        "count": 1,
        "size": 40
    },
    ".pipe": {
        "count": 2,
        "size": 64
    },
    ".platform": {
        "count": 1,
        "size": 40
    },
    ".pong": {
        "count": 1,
        "size": 32
    },
    ".postSend": {
        "count": 1,
        "size": 40
    },
    ".process": {
        "count": 3,
        "size": 96
    },
    ".push": {
        "count": 3,
        "size": 96
    },
    ".raiseEvent": {
        "count": 1,
        "size": 40
    },
    ".read": {
        "count": 4,
        "size": 128
    },
    ".readInt16BE": {
        "count": 1,
        "size": 40
    },
    ".readInt16LE": {
        "count": 1,
        "size": 40
    },
    ".readInt32BE": {
        "count": 1,
        "size": 40
    },
    ".readInt32LE": {
        "count": 1,
        "size": 40
    },
    ".readInt8": {
        "count": 1,
        "size": 40
    },
    ".readIntBE": {
        "count": 1,
        "size": 40
    },
    ".readIntLE": {
        "count": 1,
        "size": 40
    },
    ".readUInt8": {
        "count": 1,
        "size": 40
    },
    ".readUIntBE": {
        "count": 1,
        "size": 40
    },
    ".readUIntLE": {
        "count": 1,
        "size": 40
    },
    ".readdirSync": {
        "count": 2,
        "size": 80
    },
    ".reduce": {
        "count": 1,
        "size": 32
    },
    ".reduceRight": {
        "count": 2,
        "size": 80
    },
    ".ref": {
        "count": 1,
        "size": 32
    },
    ".reject": {
        "count": 1,
        "size": 32
    },
    ".relative": {
        "count": 2,
        "size": 80
    },
    ".remove": {
        "count": 3,
        "size": 96
    },
    ".renameSync": {
        "count": 2,
        "size": 80
    },
    ".renegotiate": {
        "count": 1,
        "size": 40
    },
    ".request": {
        "count": 4,
        "size": 128
    },
    ".requestEnd": {
        "count": 18,
        "size": 720
    },
    ".require": {
        "count": 2,
        "size": 64
    },
    ".requireRepl": {
        "count": 1,
        "size": 40
    },
    ".reset": {
        "count": 3,
        "size": 96
    },
    ".resolve": {
        "count": 4,
        "size": 128
    },
    ".result": {
        "count": 1,
        "size": 32
    },
    ".resume": {
        "count": 2,
        "size": 64
    },
    ".runMain": {
        "count": 1,
        "size": 32
    },
    ".sample": {
        "count": 1,
        "size": 32
    },
    ".send": {
        "count": 5,
        "size": 160
    },
    ".sender": {
        "count": 1,
        "size": 32
    },
    ".sendto": {
        "count": 1,
        "size": 32
    },
    ".serialize": {
        "count": 1,
        "size": 40
    },
    ".set": {
        "count": 2,
        "size": 64
    },
    ".setAAD": {
        "count": 1,
        "size": 32
    },
    ".setAuthTag": {
        "count": 1,
        "size": 40
    },
    ".setConfig": {
        "count": 4,
        "size": 160
    },
    ".setContext": {
        "count": 1,
        "size": 40
    },
    ".setEncoding": {
        "count": 1,
        "size": 40
    },
    ".setHeader": {
        "count": 1,
        "size": 40
    },
    ".setInterval": {
        "count": 1,
        "size": 40
    },
    ".setNoDelay": {
        "count": 3,
        "size": 120
    },
    ".setOptions": {
        "count": 1,
        "size": 40
    },
    ".setRawMode": {
        "count": 1,
        "size": 40
    },
    ".setServers": {
        "count": 1,
        "size": 40
    },
    ".setSession": {
        "count": 1,
        "size": 40
    },
    ".setTTL": {
        "count": 1,
        "size": 32
    },
    ".setTimeout": {
        "count": 7,
        "size": 280
    },
    ".setupMaster": {
        "count": 1,
        "size": 40
    },
    ".size": {
        "count": 1,
        "size": 32
    },
    ".slice": {
        "count": 1,
        "size": 32
    },
    ".spawn": {
        "count": 2,
        "size": 64
    },
    ".stallout": {
        "count": 1,
        "size": 40
    },
    ".start": {
        "count": 13,
        "size": 416
    },
    ".startMethod": {
        "count": 1,
        "size": 40
    },
    ".statsd.json": {
        "count": 1,
        "size": 40
    },
    ".status": {
        "count": 1,
        "size": 32
    },
    ".stderr": {
        "count": 1,
        "size": 32
    },
    ".stdout": {
        "count": 1,
        "size": 32
    },
    ".stop": {
        "count": 3,
        "size": 96
    },
    ".stream": {
        "count": 1,
        "size": 32
    },
    ".stringify": {
        "count": 1,
        "size": 40
    },
    ".symlinkSync": {
        "count": 2,
        "size": 80
    },
    ".test": {
        "count": 1,
        "size": 32
    },
    ".this_function": {
        "count": 1,
        "size": 40
    },
    ".throws": {
        "count": 1,
        "size": 32
    },
    ".timeEnd": {
        "count": 1,
        "size": 32
    },
    ".timesLimit": {
        "count": 1,
        "size": 40
    },
    ".timesSeries": {
        "count": 1,
        "size": 40
    },
    ".timestamp_lag": {
        "count": 1,
        "size": 40
    },
    ".tmpdir": {
        "count": 1,
        "size": 32
    },
    ".toArray": {
        "count": 1,
        "size": 32
    },
    ".toJSON": {
        "count": 1,
        "size": 32
    },
    ".toString": {
        "count": 4,
        "size": 160
    },
    ".traceStart": {
        "count": 1,
        "size": 40
    },
    ".traceStop": {
        "count": 1,
        "size": 40
    },
    ".tracing": {
        "count": 2,
        "size": 64
    },
    ".transform": {
        "count": 1,
        "size": 40
    },
    ".uncork": {
        "count": 1,
        "size": 32
    },
    ".unenroll": {
        "count": 1,
        "size": 40
    },
    ".unescape": {
        "count": 1,
        "size": 40
    },
    ".unlinkSync": {
        "count": 2,
        "size": 80
    },
    ".unmask": {
        "count": 1,
        "size": 32
    },
    ".unmemoize": {
        "count": 2,
        "size": 80
    },
    ".unpipe": {
        "count": 1,
        "size": 32
    },
    ".unref": {
        "count": 4,
        "size": 128
    },
    ".unshift": {
        "count": 1,
        "size": 32
    },
    ".unwatchFile": {
        "count": 2,
        "size": 80
    },
    ".unzip": {
        "count": 1,
        "size": 32
    },
    ".unzipSync": {
        "count": 1,
        "size": 40
    },
    ".update": {
        "count": 1,
        "size": 32
    },
    ".util": {
        "count": 1,
        "size": 32
    },
    ".utimesSync": {
        "count": 2,
        "size": 80
    },
    ".verify": {
        "count": 1,
        "size": 32
    },
    ".verifySpkac": {
        "count": 1,
        "size": 40
    },
    ".warn": {
        "count": 1,
        "size": 32
    },
    ".watchdog": {
        "count": 1,
        "size": 40
    },
    ".waterfall": {
        "count": 2,
        "size": 80
    },
    ".worker": {
        "count": 5,
        "size": 160
    },
    ".wrap": {
        "count": 2,
        "size": 64
    },
    ".write": {
        "count": 5,
        "size": 160
    },
    ".writeHead": {
        "count": 1,
        "size": 40
    },
    ".writeHeader": {
        "count": 1,
        "size": 40
    },
    ".writeInt8": {
        "count": 1,
        "size": 40
    },
    ".writeIntBE": {
        "count": 1,
        "size": 40
    },
    ".writeIntLE": {
        "count": 1,
        "size": 40
    },
    ".writeUInt8": {
        "count": 1,
        "size": 40
    },
    ".writeUIntBE": {
        "count": 1,
        "size": 40
    },
    ".writeUIntLE": {
        "count": 1,
        "size": 40
    },
    "/": {
        "count": 2,
        "size": 64
    },
    "/* A repl library that you can include in your own code to get a runtime\n * interface to your program.\n *\n *   var repl = require(\"repl\");\n *   // start repl on stdin\n *   repl.start(\"prompt> \");\n *\n *   // listen for unix socket connections and start repl on them\n *   net.createServer(function(socket) {\n *     repl.start(\"node via Unix socket> \", socket);\n *   }).listen(\"/tmp/node-repl-sock\");\n *\n *   // listen for TCP socket connections and start repl on them\n *   net.createServer(function(socket) {\n *     repl.start(\"node via TCP socket> \", socket);\n *   }).listen(5001);\n *\n *   // expose foo to repl context\n *   repl.start(\"node > \").context.foo = \"stdin is fun\";\n */\n\n'use strict';\n\nconst util = require('util');\nconst inherits = util.inherits;\nconst Stream = require('stream');\nconst vm = require('vm');\nconst path = require('path');\nconst fs = require('fs');\nconst rl = require('readline');\nconst Console = require('console').Console;\nconst domain = require('domain');\nconst debug = util.debuglog('repl');\n\ntr": {
        "count": 1,
        "size": 34792
    },
    "/* eslint-disable require-buffer */\n'use strict';\n\nconst binding = process.binding('buffer');\nconst internalUtil = require('internal/util');\nconst bindingObj = {};\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nexports.kMaxLength = binding.kMaxLength;\n\n\nBuffer.poolSize = 8 * 1024;\nvar poolSize, poolOffset, allocPool;\n\n\nbinding.setupBufferJS(Buffer.prototype, bindingObj);\nconst flags = bindingObj.flags;\nconst kNoZeroFill = 0;\n\n\nfunction createPool() {\n  poolSize = Buffer.poolSize;\n  if (poolSize > 0)\n    flags[kNoZeroFill] = 1;\n  allocPool = new Uint8Array(poolSize);\n  Object.setPrototypeOf(allocPool, Buffer.prototype);\n  poolOffset = 0;\n}\ncreatePool();\n\n\nfunction alignPool() {\n  // Ensure aligned slices\n  if (poolOffset & 0x7) {\n    poolOffset |= 0x7;\n    poolOffset++;\n  }\n}\n\n\nfunction Buffer(arg) {\n  // Common case.\n  if (typeof arg === 'number') {\n    // If less than zero, or NaN.\n    if (arg < 0 || arg !== arg)\n      arg = 0;\n    return allocate(arg);\n  }\n\n  // S": {
        "count": 1,
        "size": 25776
    },
    "/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 34": {
        "count": 1,
        "size": 14680
    },
    "//": {
        "count": 1,
        "size": 32
    },
    "// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\nWritable.WritableState = WritableState;\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst Stream = require('stream');\nconst Buffer = require('buffer').Buffer;\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Stream.Duplex)\n    this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the": {
        "count": 1,
        "size": 13032
    },
    "// Copyright (c) 2014, StrongLoop Inc.\n//\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n'use strict';\n\nconst v8binding = process.binding('v8');\n\nconst heapStatisticsBuffer =\n    new Uint32Array(v8binding.heapStatisticsArrayBuffer);\n\nconst kTotalHeapSizeIndex = v8binding.kTotalHeapSizeIndex;\nconst kTotalHeapSizeExecutableIndex = v8binding.": {
        "count": 1,
        "size": 1880
    },
    "// Hello, and welcome to hacking node.js!\n//\n// This file is invoked by node::LoadEnvironment in src/node.cc, and is\n// responsible for bootstrapping the node.js core. As special caution is given\n// to the performance of the startup process, many dependencies are invoked\n// lazily.\n\n'use strict';\n\n(function(process) {\n  this.global = this;\n\n  function startup() {\n    var EventEmitter = NativeModule.require('events');\n\n    process.__proto__ = Object.create(EventEmitter.prototype, {\n      constructor: {\n        value: process.constructor\n      }\n    });\n    EventEmitter.call(process);\n\n    process.EventEmitter = EventEmitter; // process.EventEmitter is deprecated\n\n    // do this good and early, since it handles errors.\n    startup.processFatal();\n\n    startup.globalVariables();\n    startup.globalTimeouts();\n    startup.globalConsole();\n\n    startup.processAssert();\n    startup.processConfig();\n    startup.processNextTick();\n    startup.processPromises();\n    startup.processStdio();\n    startup.processKillAndExi": {
        "count": 1,
        "size": 28320
    },
    "// Inspiration for this code comes from Salvatore Sanfilippo's linenoise.\n// https://github.com/antirez/linenoise\n// Reference:\n// * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n// * http://www.3waylabs.com/nw/WWW/products/wizcon/vt220.html\n\n'use strict';\n\nconst kHistorySize = 30;\n\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst inherits = util.inherits;\nconst Buffer = require('buffer').Buffer;\nconst EventEmitter = require('events');\n\n\nexports.createInterface = function(input, output, completer, terminal) {\n  var rl;\n  if (arguments.length === 1) {\n    rl = new Interface(input);\n  } else {\n    rl = new Interface(input, output, completer, terminal);\n  }\n  return rl;\n};\n\n\nfunction Interface(input, output, completer, terminal) {\n  if (!(this instanceof Interface)) {\n    // call the constructor preserving original number of arguments\n    const self = Object.create(Interface.prototype);\n    Interface.apply(self, arguments);\n    return self;\n  }\n\n  this._sawReturn = fals": {
        "count": 1,
        "size": 38144
    },
    "// LazyTransform is a special type of Transform stream that is lazily loaded.\n// This is used for performance with bi-API-ship: when two APIs are available\n// for the stream, one conventional and one non-conventional.\n'use strict';\n\nconst stream = require('stream');\nconst util = require('util');\n\nmodule.exports = LazyTransform;\n\nfunction LazyTransform(options) {\n  this._options = options;\n}\nutil.inherits(LazyTransform, stream.Transform);\n\n[\n  '_readableState',\n  '_writableState',\n  '_transformState'\n].forEach(function(prop, i, props) {\n  Object.defineProperty(LazyTransform.prototype, prop, {\n    get: function() {\n      stream.Transform.call(this, this._options);\n      this._writableState.decodeStrings = false;\n      this._writableState.defaultEncoding = 'binary';\n      return this[prop];\n    },\n    set: function(val) {\n      Object.defineProperty(this, prop, {\n        value: val,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    },\n    configurable: true,\n    enumerabl": {
        "count": 1,
        "size": 1072
    },
    "// Maintainers, keep in mind that ES1-style octal literals (`0666`) are not\n// allowed in strict mode. Use ES6-style octal literals instead (`0o666`).\n\n'use strict';\n\nconst SlowBuffer = require('buffer').SlowBuffer;\nconst util = require('util');\nconst pathModule = require('path');\n\nconst binding = process.binding('fs');\nconst constants = require('constants');\nconst fs = exports;\nconst Buffer = require('buffer').Buffer;\nconst Stream = require('stream').Stream;\nconst EventEmitter = require('events');\nconst FSReqWrap = binding.FSReqWrap;\nconst FSEvent = process.binding('fs_event_wrap').FSEvent;\n\nconst Readable = Stream.Readable;\nconst Writable = Stream.Writable;\n\nconst kMinPoolSpace = 128;\nconst kMaxLength = require('buffer').kMaxLength;\n\nconst O_APPEND = constants.O_APPEND || 0;\nconst O_CREAT = constants.O_CREAT || 0;\nconst O_EXCL = constants.O_EXCL || 0;\nconst O_RDONLY = constants.O_RDONLY || 0;\nconst O_RDWR = constants.O_RDWR || 0;\nconst O_SYNC = constants.O_SYNC || 0;\nconst O_TRUNC = constants.O_TRUNC || 0;\n": {
        "count": 1,
        "size": 50328
    },
    "// Note: In 0.8 and before, crypto functions all defaulted to using\n// binary-encoded strings rather than buffers.\n\n'use strict';\n\nexports.DEFAULT_ENCODING = 'buffer';\n\ntry {\n  var binding = process.binding('crypto');\n  var randomBytes = binding.randomBytes;\n  var getCiphers = binding.getCiphers;\n  var getHashes = binding.getHashes;\n  var getCurves = binding.getCurves;\n} catch (e) {\n  throw new Error('node.js not compiled with openssl crypto support.');\n}\n\nconst Buffer = require('buffer').Buffer;\nconst constants = require('constants');\nconst stream = require('stream');\nconst util = require('util');\nconst internalUtil = require('internal/util');\nconst LazyTransform = require('internal/streams/lazy_transform');\n\nconst DH_GENERATOR = 2;\n\n// This is here because many functions accepted binary strings without\n// any explicit encoding in older versions of node, and we don't want\n// to break them unnecessarily.\nfunction toBuf(str, encoding) {\n  encoding = encoding || 'binary';\n  if (typeof str === 'string') {\n    if": {
        "count": 1,
        "size": 19032
    },
    "// Query String Utilities\n\n'use strict';\n\nconst QueryString = exports;\nconst Buffer = require('buffer').Buffer;\n\n\nfunction charCode(c) {\n  return c.charCodeAt(0);\n}\n\n\n// a safe fast alternative to decodeURIComponent\nQueryString.unescapeBuffer = function(s, decodeSpaces) {\n  var out = new Buffer(s.length);\n  var state = 'CHAR'; // states: CHAR, HEX0, HEX1\n  var n, m, hexchar;\n\n  for (var inIndex = 0, outIndex = 0; inIndex <= s.length; inIndex++) {\n    var c = s.charCodeAt(inIndex);\n    switch (state) {\n      case 'CHAR':\n        switch (c) {\n          case charCode('%'):\n            n = 0;\n            m = 0;\n            state = 'HEX0';\n            break;\n          case charCode('+'):\n            if (decodeSpaces) c = charCode(' ');\n            // falls through\n          default:\n            out[outIndex++] = c;\n            break;\n        }\n        break;\n\n      case 'HEX0':\n        state = 'HEX1';\n        hexchar = c;\n        if (charCode('0') <= c && c <= charCode('9')) {\n          n = c - charCode('0');\n    ": {
        "count": 1,
        "size": 6432
    },
    "// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\nmodule.exports = Duplex;\n\nconst util = require('util');\nconst Readable = require('_stream_readable');\nconst Writable = require('_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = Object.keys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHal": {
        "count": 1,
        "size": 1464
    },
    "// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nconst Transform = require('_stream_transform');\nconst util = require('util');\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough))\n    return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n  cb(null, chunk);\n};\n": {
        "count": 1,
        "size": 552
    },
    "// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n//": {
        "count": 1,
        "size": 6360
    },
    "// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO": {
        "count": 1,
        "size": 11200
    },
    "/bin/cat": {
        "count": 1,
        "size": 32
    },
    "/bin/zsh": {
        "count": 1,
        "size": 32
    },
    "/deps/uv/": {
        "count": 1,
        "size": 40
    },
    "/home": {
        "count": 2,
        "size": 80
    },
    "/home/iojs/bin/python": {
        "count": 1,
        "size": 48
    },
    "/home/node_modules": {
        "count": 178,
        "size": 11392
    },
    "/home/sam": {
        "count": 3,
        "size": 136
    },
    "/home/sam/.node_libraries": {
        "count": 1,
        "size": 80
    },
    "/home/sam/.node_modules": {
        "count": 1,
        "size": 72
    },
    "/home/sam/.nvm/versions/node/v4.2.1/bin/node": {
        "count": 1,
        "size": 72
    },
    "/home/sam/.nvm/versions/node/v4.2.1/lib/node": {
        "count": 1,
        "size": 72
    },
    "/home/sam/node_modules": {
        "count": 178,
        "size": 12816
    },
    "/home/sam/w": {
        "count": 2,
        "size": 96
    },
    "/home/sam/w/node_modules": {
        "count": 178,
        "size": 12816
    },
    "/home/sam/w/sn": {
        "count": 2,
        "size": 112
    },
    "/home/sam/w/sn/node_modules": {
        "count": 178,
        "size": 14240
    },
    "/home/sam/w/sn/strong-supervisor": {
        "count": 2,
        "size": 176
    },
    "/home/sam/w/sn/strong-supervisor/bin": {
        "count": 2,
        "size": 192
    },
    "/home/sam/w/sn/strong-supervisor/bin/node_modules": {
        "count": 1,
        "size": 128
    },
    "/home/sam/w/sn/strong-supervisor/bin/sl-run.js": {
        "count": 4,
        "size": 488
    },
    "/home/sam/w/sn/strong-supervisor/bin/sl-run.txt": {
        "count": 2,
        "size": 240
    },
    "/home/sam/w/sn/strong-supervisor/lib": {
        "count": 2,
        "size": 192
    },
    "/home/sam/w/sn/strong-supervisor/lib/adapter.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/agent.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/capabilities.js": {
        "count": 3,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/lib/chdir.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/config.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/debug.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/debugger.js": {
        "count": 2,
        "size": 240
    },
    "/home/sam/w/sn/strong-supervisor/lib/detach.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/expander.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/log-writer.js": {
        "count": 3,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/lib/logger.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/metrics.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/node_modules": {
        "count": 25,
        "size": 3200
    },
    "/home/sam/w/sn/strong-supervisor/lib/options.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/pidfile.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/printf-replacer.js": {
        "count": 3,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/lib/runctl.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/start-command.js": {
        "count": 3,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/lib/targetctl.js": {
        "count": 3,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/lib/tracer.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/watcher": {
        "count": 3,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/lib/watcher.js": {
        "count": 3,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/lib/watcher/agent-trace.js": {
        "count": 3,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/lib/watcher/cpu-profile.js": {
        "count": 3,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/lib/watcher/express-records.js": {
        "count": 3,
        "size": 432
    },
    "/home/sam/w/sn/strong-supervisor/lib/watcher/node_modules": {
        "count": 5,
        "size": 720
    },
    "/home/sam/w/sn/strong-supervisor/lib/watcher/status-wd.js": {
        "count": 3,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/lib/watcher/trace-object.js": {
        "count": 3,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/node_modules": {
        "count": 180,
        "size": 21600
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics": {
        "count": 2,
        "size": 272
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/appmetrics-api.js": {
        "count": 3,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/appmetrics.node": {
        "count": 2,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/index.js": {
        "count": 3,
        "size": 448
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib": {
        "count": 2,
        "size": 288
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib/aspect.js": {
        "count": 3,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib/node_modules": {
        "count": 5,
        "size": 880
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib/probe.js": {
        "count": 3,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib/request.js": {
        "count": 3,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib/serializer.js": {
        "count": 3,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib/timer.js": {
        "count": 3,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/node_modules": {
        "count": 27,
        "size": 4536
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/package.json": {
        "count": 2,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes": {
        "count": 3,
        "size": 456
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/axon-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/basho-riak-client-probe.js": {
        "count": 3,
        "size": 544
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/http-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/leveldown-probe.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/loopback-probe.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/memcached-probe.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/mongo-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/mqlight-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/mqtt-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/mysql-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/node_modules": {
        "count": 18,
        "size": 3168
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/oracle-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/oracledb-probe.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/postgres-probe.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/redis-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/socketio-probe.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/strong-mq-probe.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/strongoracle-probe.js": {
        "count": 3,
        "size": 528
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/trace-probe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/async": {
        "count": 2,
        "size": 256
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/async/lib": {
        "count": 2,
        "size": 272
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/async/lib/async.js": {
        "count": 3,
        "size": 432
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/async/lib/node_modules": {
        "count": 1,
        "size": 160
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/async/node_modules": {
        "count": 1,
        "size": 152
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/byline": {
        "count": 2,
        "size": 256
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/byline/lib": {
        "count": 2,
        "size": 272
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/byline/lib/byline.js": {
        "count": 3,
        "size": 448
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/byline/lib/node_modules": {
        "count": 1,
        "size": 168
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/byline/node_modules": {
        "count": 1,
        "size": 160
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/debug": {
        "count": 2,
        "size": 256
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/debug/debug.js": {
        "count": 3,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/debug/node.js": {
        "count": 3,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/debug/node_modules": {
        "count": 5,
        "size": 760
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/debug/node_modules/ms": {
        "count": 2,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/debug/node_modules/ms/index.js": {
        "count": 3,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/debug/node_modules/ms/node_modules": {
        "count": 1,
        "size": 184
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/dotenv": {
        "count": 2,
        "size": 256
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/dotenv/lib": {
        "count": 2,
        "size": 272
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/dotenv/lib/main.js": {
        "count": 3,
        "size": 432
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/dotenv/lib/node_modules": {
        "count": 1,
        "size": 168
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/dotenv/node_modules": {
        "count": 1,
        "size": 160
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump": {
        "count": 2,
        "size": 272
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/build": {
        "count": 2,
        "size": 288
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/build/Release": {
        "count": 2,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/build/Release/addon.node": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/build/Release/node_modules": {
        "count": 1,
        "size": 192
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/build/node_modules": {
        "count": 1,
        "size": 176
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/lib": {
        "count": 2,
        "size": 288
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/lib/main.js": {
        "count": 3,
        "size": 448
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/lib/node_modules": {
        "count": 1,
        "size": 168
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/heapdump/node_modules": {
        "count": 2,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/lodash": {
        "count": 2,
        "size": 256
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/lodash/index.js": {
        "count": 3,
        "size": 432
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/lodash/node_modules": {
        "count": 1,
        "size": 160
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control": {
        "count": 2,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/index.js": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib": {
        "count": 2,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib/master.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib/msg.js": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib/node_modules": {
        "count": 3,
        "size": 600
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib/util.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/node_modules": {
        "count": 5,
        "size": 960
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/package.json": {
        "count": 2,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel": {
        "count": 2,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/cluster.js": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib": {
        "count": 2,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/channel.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/cluster.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/debug.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/message.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/node_modules": {
        "count": 8,
        "size": 1600
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/pipe.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/process.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/server.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/ws-channel.js": {
        "count": 3,
        "size": 528
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules": {
        "count": 39,
        "size": 7488
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/newline-json": {
        "count": 2,
        "size": 432
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/newline-json/index.js": {
        "count": 2,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/newline-json/node_modules": {
        "count": 3,
        "size": 720
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/newline-json/parser.js": {
        "count": 3,
        "size": 592
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/newline-json/stringifier.js": {
        "count": 3,
        "size": 624
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws": {
        "count": 2,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/index.js": {
        "count": 3,
        "size": 560
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib": {
        "count": 2,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/BufferPool.js": {
        "count": 3,
        "size": 592
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/BufferUtil.js": {
        "count": 2,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/ErrorCodes.js": {
        "count": 3,
        "size": 592
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/Extensions.js": {
        "count": 3,
        "size": 592
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/PerMessageDeflate.js": {
        "count": 3,
        "size": 624
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/Receiver.hixie.js": {
        "count": 3,
        "size": 608
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/Receiver.js": {
        "count": 3,
        "size": 576
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/Sender.hixie.js": {
        "count": 3,
        "size": 592
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/Sender.js": {
        "count": 3,
        "size": 576
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/Validation.js": {
        "count": 2,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/WebSocket.js": {
        "count": 3,
        "size": 592
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/WebSocketServer.js": {
        "count": 3,
        "size": 608
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/node_modules": {
        "count": 12,
        "size": 2784
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules": {
        "count": 23,
        "size": 5152
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil": {
        "count": 2,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/build": {
        "count": 2,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/build/Release": {
        "count": 2,
        "size": 544
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/build/Release/bufferutil.node": {
        "count": 3,
        "size": 912
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/build/Release/node_modules": {
        "count": 1,
        "size": 296
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/build/node_modules": {
        "count": 1,
        "size": 280
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/index.js": {
        "count": 2,
        "size": 528
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/node_modules": {
        "count": 5,
        "size": 1360
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/node_modules/bindings": {
        "count": 2,
        "size": 576
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/node_modules/bindings/bindings.js": {
        "count": 3,
        "size": 752
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/node_modules/bindings/node_modules": {
        "count": 1,
        "size": 312
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/options": {
        "count": 2,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/options/lib": {
        "count": 2,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/options/lib/node_modules": {
        "count": 1,
        "size": 272
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/options/lib/options.js": {
        "count": 3,
        "size": 656
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/options/node_modules": {
        "count": 1,
        "size": 264
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/ultron": {
        "count": 2,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/ultron/index.js": {
        "count": 3,
        "size": 640
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/ultron/node_modules": {
        "count": 1,
        "size": 264
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate": {
        "count": 2,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/build": {
        "count": 2,
        "size": 528
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/build/Release": {
        "count": 2,
        "size": 560
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/build/Release/node_modules": {
        "count": 1,
        "size": 304
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/build/Release/validation.node": {
        "count": 3,
        "size": 936
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/build/node_modules": {
        "count": 1,
        "size": 288
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/index.js": {
        "count": 2,
        "size": 544
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/node_modules": {
        "count": 5,
        "size": 1400
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/node_modules/bindings": {
        "count": 2,
        "size": 592
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/node_modules/bindings/bindings.js": {
        "count": 3,
        "size": 768
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/node_modules/bindings/node_modules": {
        "count": 1,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/package.json": {
        "count": 2,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/process.js": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/server.js": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/ws-channel.js": {
        "count": 2,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger": {
        "count": 2,
        "size": 304
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/backend": {
        "count": 2,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/backend/context.js": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/build": {
        "count": 2,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/build/Release": {
        "count": 2,
        "size": 352
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/build/Release/debugger.node": {
        "count": 3,
        "size": 624
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/build/Release/node_modules": {
        "count": 1,
        "size": 200
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/build/node_modules": {
        "count": 1,
        "size": 184
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/index.js": {
        "count": 3,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/node_modules": {
        "count": 6,
        "size": 1056
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/node_modules/bindings": {
        "count": 2,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/node_modules/bindings/bindings.js": {
        "count": 3,
        "size": 560
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/node_modules/bindings/node_modules": {
        "count": 1,
        "size": 216
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/package.json": {
        "count": 2,
        "size": 352
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer": {
        "count": 2,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/index.js": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib": {
        "count": 2,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib/cli.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib/logger.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib/node_modules": {
        "count": 2,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules": {
        "count": 10,
        "size": 1920
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/duplexer": {
        "count": 2,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/duplexer/index.js": {
        "count": 3,
        "size": 576
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/duplexer/node_modules": {
        "count": 1,
        "size": 232
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/minimist": {
        "count": 2,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/minimist/index.js": {
        "count": 3,
        "size": 576
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/minimist/node_modules": {
        "count": 1,
        "size": 232
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/moment": {
        "count": 2,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/moment/moment.js": {
        "count": 3,
        "size": 576
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/moment/node_modules": {
        "count": 1,
        "size": 232
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/through": {
        "count": 2,
        "size": 416
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/through/index.js": {
        "count": 3,
        "size": 576
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules/through/node_modules": {
        "count": 1,
        "size": 232
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/package.json": {
        "count": 2,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls": {
        "count": 2,
        "size": 288
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/index.js": {
        "count": 3,
        "size": 448
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules": {
        "count": 51,
        "size": 8568
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed": {
        "count": 2,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules": {
        "count": 49,
        "size": 10976
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/debuglog": {
        "count": 2,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/debuglog/debuglog.js": {
        "count": 2,
        "size": 544
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/debuglog/node_modules": {
        "count": 1,
        "size": 272
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/graceful-fs": {
        "count": 2,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/graceful-fs/fs.js": {
        "count": 2,
        "size": 528
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/graceful-fs/graceful-fs.js": {
        "count": 3,
        "size": 688
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/graceful-fs/node_modules": {
        "count": 3,
        "size": 840
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/graceful-fs/polyfills.js": {
        "count": 3,
        "size": 688
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json": {
        "count": 2,
        "size": 528
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules": {
        "count": 27,
        "size": 7776
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob": {
        "count": 2,
        "size": 592
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/common.js": {
        "count": 3,
        "size": 768
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/glob.js": {
        "count": 3,
        "size": 752
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules": {
        "count": 15,
        "size": 4920
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inflight": {
        "count": 2,
        "size": 688
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inflight/inflight.js": {
        "count": 3,
        "size": 864
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inflight/node_modules": {
        "count": 4,
        "size": 1472
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inflight/node_modules/wrappy": {
        "count": 2,
        "size": 768
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inflight/node_modules/wrappy/node_modules": {
        "count": 1,
        "size": 408
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inflight/node_modules/wrappy/wrappy.js": {
        "count": 3,
        "size": 928
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inherits": {
        "count": 2,
        "size": 688
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inherits/inherits.js": {
        "count": 2,
        "size": 736
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inherits/node_modules": {
        "count": 1,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch": {
        "count": 2,
        "size": 688
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/minimatch.js": {
        "count": 3,
        "size": 864
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules": {
        "count": 6,
        "size": 2208
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion": {
        "count": 2,
        "size": 800
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/index.js": {
        "count": 3,
        "size": 976
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules": {
        "count": 5,
        "size": 2160
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match": {
        "count": 2,
        "size": 912
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/index.js": {
        "count": 3,
        "size": 1088
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/balanced-match/node_modules": {
        "count": 1,
        "size": 488
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map": {
        "count": 2,
        "size": 896
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/index.js": {
        "count": 3,
        "size": 1072
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules/concat-map/node_modules": {
        "count": 1,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/once": {
        "count": 2,
        "size": 672
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/once/node_modules": {
        "count": 4,
        "size": 1440
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/once/node_modules/wrappy": {
        "count": 2,
        "size": 752
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/once/node_modules/wrappy/node_modules": {
        "count": 1,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/once/node_modules/wrappy/wrappy.js": {
        "count": 3,
        "size": 912
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/once/once.js": {
        "count": 3,
        "size": 832
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/path-is-absolute": {
        "count": 2,
        "size": 720
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/path-is-absolute/index.js": {
        "count": 3,
        "size": 880
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/path-is-absolute/node_modules": {
        "count": 1,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/sync.js": {
        "count": 3,
        "size": 752
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/json-parse-helpfulerror": {
        "count": 2,
        "size": 672
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/json-parse-helpfulerror/index.js": {
        "count": 3,
        "size": 832
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules": {
        "count": 4,
        "size": 1440
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju": {
        "count": 2,
        "size": 736
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/index.js": {
        "count": 3,
        "size": 912
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules/jju/node_modules": {
        "count": 1,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data": {
        "count": 2,
        "size": 672
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib": {
        "count": 2,
        "size": 688
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/core_module_names.json": {
        "count": 2,
        "size": 784
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/extract_description.js": {
        "count": 3,
        "size": 912
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/fixer.js": {
        "count": 3,
        "size": 848
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/make_warning.js": {
        "count": 3,
        "size": 880
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/node_modules": {
        "count": 7,
        "size": 2576
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/normalize.js": {
        "count": 3,
        "size": 864
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/typos.json": {
        "count": 2,
        "size": 736
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/warning_messages.json": {
        "count": 2,
        "size": 768
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules": {
        "count": 11,
        "size": 3960
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules/github-url-from-git": {
        "count": 2,
        "size": 800
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules/github-url-from-git/index.js": {
        "count": 3,
        "size": 960
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules/github-url-from-git/node_modules": {
        "count": 1,
        "size": 424
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules/github-url-from-username-repo": {
        "count": 2,
        "size": 848
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules/github-url-from-username-repo/index.js": {
        "count": 3,
        "size": 1008
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules/github-url-from-username-repo/node_modules": {
        "count": 1,
        "size": 448
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/read-json.js": {
        "count": 3,
        "size": 704
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules": {
        "count": 2,
        "size": 544
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules": {
        "count": 13,
        "size": 3848
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo": {
        "count": 2,
        "size": 624
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/dezalgo.js": {
        "count": 3,
        "size": 800
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules": {
        "count": 6,
        "size": 2064
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules/asap": {
        "count": 2,
        "size": 704
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules/asap/asap.js": {
        "count": 3,
        "size": 864
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules/asap/node_modules": {
        "count": 2,
        "size": 752
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules/asap/raw.js": {
        "count": 3,
        "size": 864
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules/wrappy": {
        "count": 2,
        "size": 704
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules/wrappy/node_modules": {
        "count": 1,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules/wrappy/wrappy.js": {
        "count": 3,
        "size": 880
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs": {
        "count": 2,
        "size": 640
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs/fs.js": {
        "count": 2,
        "size": 672
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs/graceful-fs.js": {
        "count": 3,
        "size": 832
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs/legacy-streams.js": {
        "count": 3,
        "size": 848
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs/node_modules": {
        "count": 4,
        "size": 1408
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs/polyfills.js": {
        "count": 3,
        "size": 832
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/once": {
        "count": 2,
        "size": 624
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/once/node_modules": {
        "count": 4,
        "size": 1344
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/once/node_modules/wrappy": {
        "count": 2,
        "size": 704
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/once/node_modules/wrappy/node_modules": {
        "count": 1,
        "size": 376
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/once/node_modules/wrappy/wrappy.js": {
        "count": 3,
        "size": 864
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/once/once.js": {
        "count": 3,
        "size": 784
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/readdir.js": {
        "count": 3,
        "size": 720
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/semver": {
        "count": 2,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/semver/node_modules": {
        "count": 1,
        "size": 264
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/semver/semver.js": {
        "count": 3,
        "size": 656
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide": {
        "count": 2,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib": {
        "count": 2,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib/async-map.js": {
        "count": 3,
        "size": 672
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib/bind-actor.js": {
        "count": 3,
        "size": 672
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib/chain.js": {
        "count": 3,
        "size": 656
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib/node_modules": {
        "count": 4,
        "size": 1088
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib/slide.js": {
        "count": 2,
        "size": 528
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/node_modules": {
        "count": 4,
        "size": 1056
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/util-extend": {
        "count": 2,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/util-extend/extend.js": {
        "count": 3,
        "size": 672
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/util-extend/node_modules": {
        "count": 1,
        "size": 280
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/read-installed.js": {
        "count": 3,
        "size": 608
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/topiary": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/topiary/node_modules": {
        "count": 1,
        "size": 216
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/topiary/topiary.js": {
        "count": 3,
        "size": 544
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd": {
        "count": 2,
        "size": 288
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/index.js": {
        "count": 3,
        "size": 448
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib": {
        "count": 2,
        "size": 304
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/backends": {
        "count": 2,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/backends/internal.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/backends/node_modules": {
        "count": 2,
        "size": 400
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/backends/repeater.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/helpers.js": {
        "count": 3,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/log.js": {
        "count": 3,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/node_modules": {
        "count": 8,
        "size": 1408
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/process_metrics.js": {
        "count": 3,
        "size": 512
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/server.js": {
        "count": 3,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/servers": {
        "count": 2,
        "size": 336
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/servers/ipc.js": {
        "count": 3,
        "size": 496
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/servers/node_modules": {
        "count": 1,
        "size": 192
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/set.js": {
        "count": 3,
        "size": 464
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules": {
        "count": 12,
        "size": 2016
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules/async": {
        "count": 2,
        "size": 368
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules/async/lib": {
        "count": 2,
        "size": 384
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules/async/lib/async.js": {
        "count": 3,
        "size": 544
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules/async/lib/node_modules": {
        "count": 1,
        "size": 216
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules/async/node_modules": {
        "count": 1,
        "size": 208
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-url-defaults": {
        "count": 2,
        "size": 320
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-url-defaults/index.js": {
        "count": 3,
        "size": 480
    },
    "/home/sam/w/sn/strong-supervisor/node_modules/strong-url-defaults/node_modules": {
        "count": 1,
        "size": 184
    },
    "/home/sam/w/sn/strong-supervisor/package.json": {
        "count": 2,
        "size": 240
    },
    "/home/sam/w/sn/strong-supervisor/test": {
        "count": 2,
        "size": 208
    },
    "/home/sam/w/sn/strong-supervisor/test/module-app": {
        "count": 3,
        "size": 312
    },
    "/home/sam/w/sn/strong-supervisor/test/module-app/node_modules": {
        "count": 1,
        "size": 152
    },
    "/home/sam/w/sn/strong-supervisor/test/module-app/package.json": {
        "count": 2,
        "size": 304
    },
    "/home/sam/w/sn/strong-supervisor/test/node_modules": {
        "count": 1,
        "size": 128
    },
    "/node_modules": {
        "count": 178,
        "size": 9968
    },
    "0": {
        "count": 1,
        "size": 32
    },
    "0.0.0": {
        "count": 1,
        "size": 32
    },
    "0.0.0.0": {
        "count": 1,
        "size": 32
    },
    "0.003129366785287857": {
        "count": 1,
        "size": 48
    },
    "0.41958400793373585": {
        "count": 1,
        "size": 48
    },
    "0.5066828078124672": {
        "count": 1,
        "size": 48
    },
    "0.6371373564470559": {
        "count": 1,
        "size": 48
    },
    "0.7048023634124547": {
        "count": 1,
        "size": 48
    },
    "0|[1-9]\\d*": {
        "count": 2,
        "size": 112
    },
    "0|[1-9]\\d*|x|X|\\*": {
        "count": 2,
        "size": 120
    },
    "1": {
        "count": 1,
        "size": 32
    },
    "1.0.0": {
        "count": 1,
        "size": 32
    },
    "1.0.12-dev": {
        "count": 1,
        "size": 40
    },
    "1.0.2d": {
        "count": 1,
        "size": 32
    },
    "1.0.5": {
        "count": 1,
        "size": 32
    },
    "1.10.1-DEV": {
        "count": 1,
        "size": 40
    },
    "1.2.8": {
        "count": 2,
        "size": 64
    },
    "1.3.2": {
        "count": 1,
        "size": 32
    },
    "1.4.x": {
        "count": 1,
        "size": 32
    },
    "1.7.5": {
        "count": 1,
        "size": 32
    },
    "100-continue": {
        "count": 3,
        "size": 184
    },
    "1468006400": {
        "count": 1,
        "size": 40
    },
    "1501560832": {
        "count": 1,
        "size": 40
    },
    "1535115264": {
        "count": 1,
        "size": 40
    },
    "16777216": {
        "count": 1,
        "size": 32
    },
    "18924": {
        "count": 1,
        "size": 32
    },
    "19cb3a6d693a59da48a84935d997275e4f2d0211": {
        "count": 1,
        "size": 64
    },
    "2": {
        "count": 1,
        "size": 32
    },
    "2.0.0": {
        "count": 1,
        "size": 32
    },
    "2.13.0": {
        "count": 1,
        "size": 32
    },
    "2.2.2": {
        "count": 1,
        "size": 32
    },
    "2.2.3": {
        "count": 1,
        "size": 32
    },
    "2.23": {
        "count": 1,
        "size": 32
    },
    "2.5.0": {
        "count": 1,
        "size": 32
    },
    "2.x": {
        "count": 4,
        "size": 128
    },
    "3": {
        "count": 1,
        "size": 32
    },
    "3.10.1": {
        "count": 1,
        "size": 32
    },
    "3.3.2": {
        "count": 1,
        "size": 32
    },
    "30": {
        "count": 1,
        "size": 32
    },
    "33209": {
        "count": 1,
        "size": 32
    },
    "4": {
        "count": 1,
        "size": 32
    },
    "4.2.1": {
        "count": 1,
        "size": 32
    },
    "4.4.0-22-generic": {
        "count": 1,
        "size": 40
    },
    "4.5.103.35": {
        "count": 1,
        "size": 40
    },
    "46": {
        "count": 1,
        "size": 32
    },
    "4608": {
        "count": 1,
        "size": 32
    },
    "48234500": {
        "count": 1,
        "size": 32
    },
    "5": {
        "count": 1,
        "size": 32
    },
    "56": {
        "count": 1,
        "size": 32
    },
    "56.1": {
        "count": 1,
        "size": 32
    },
    "5eca9ae2e9a84843a11b3fdd21e8bc1dc4187c6b": {
        "count": 1,
        "size": 64
    },
    "6": {
        "count": 1,
        "size": 32
    },
    "69a3bf9029c2723b1680bc5cfca313815685a0ba": {
        "count": 1,
        "size": 64
    },
    "6::::0": {
        "count": 1,
        "size": 32
    },
    "6da14d0f2dc3a2d89370e37240197e4c3b6d19bc": {
        "count": 1,
        "size": 64
    },
    "7": {
        "count": 1,
        "size": 32
    },
    "7fffffff": {
        "count": 1,
        "size": 32
    },
    "8": {
        "count": 1,
        "size": 32
    },
    "9": {
        "count": 1,
        "size": 32
    },
    ":": {
        "count": 1,
        "size": 32
    },
    ": ": {
        "count": 1,
        "size": 32
    },
    ":0.0": {
        "count": 1,
        "size": 32
    },
    ":0:4::0": {
        "count": 2,
        "size": 64
    },
    "::": {
        "count": 1,
        "size": 32
    },
    ":[0-9]*$": {
        "count": 3,
        "size": 176
    },
    ":master:": {
        "count": 1,
        "size": 32
    },
    ":worker:": {
        "count": 1,
        "size": 32
    },
    ";": {
        "count": 1,
        "size": 32
    },
    ";1m": {
        "count": 1,
        "size": 32
    },
    "<": {
        "count": 1,
        "size": 32
    },
    "<%([\\s\\S]+?)%>": {
        "count": 3,
        "size": 184
    },
    "<%-([\\s\\S]+?)%>": {
        "count": 3,
        "size": 184
    },
    "<%=([\\s\\S]+?)%>": {
        "count": 3,
        "size": 184
    },
    "<error: ": {
        "count": 1,
        "size": 32
    },
    "<error>": {
        "count": 1,
        "size": 32
    },
    "<unknown>": {
        "count": 1,
        "size": 40
    },
    "=": {
        "count": 1,
        "size": 32
    },
    "==": {
        "count": 1,
        "size": 32
    },
    "===": {
        "count": 1,
        "size": 32
    },
    ">": {
        "count": 1,
        "size": 32
    },
    ">=0.10.0": {
        "count": 1,
        "size": 32
    },
    "?": {
        "count": 1,
        "size": 32
    },
    "@": {
        "count": 1,
        "size": 32
    },
    "@#": {
        "count": 1,
        "size": 32
    },
    "A": {
        "count": 1,
        "size": 32
    },
    "AAAA": {
        "count": 1,
        "size": 32
    },
    "ADD": {
        "count": 3,
        "size": 248
    },
    "ADDRCONFIG": {
        "count": 1,
        "size": 40
    },
    "ADDRGETNETWORKPARAMS": {
        "count": 1,
        "size": 48
    },
    "ADD_STRONG": {
        "count": 3,
        "size": 256
    },
    "ADNAME": {
        "count": 1,
        "size": 32
    },
    "AF_INET": {
        "count": 1,
        "size": 32
    },
    "AF_INET6": {
        "count": 1,
        "size": 32
    },
    "AF_UNSPEC": {
        "count": 1,
        "size": 40
    },
    "AI_ADDRCONFIG": {
        "count": 1,
        "size": 40
    },
    "AI_V4MAPPED": {
        "count": 1,
        "size": 40
    },
    "ANY": {
        "count": 1,
        "size": 32
    },
    "API": {
        "count": 4,
        "size": 368
    },
    "API.disable": {
        "count": 1,
        "size": 40
    },
    "API.enable": {
        "count": 1,
        "size": 40
    },
    "API.formatGC": {
        "count": 1,
        "size": 40
    },
    "API.setEnv": {
        "count": 1,
        "size": 40
    },
    "APPLY_PREPARE": {
        "count": 3,
        "size": 256
    },
    "ARY_FLAG": {
        "count": 1,
        "size": 32
    },
    "AT_SYMLINK_NOFOLLOW": {
        "count": 1,
        "size": 48
    },
    "AVAILABLE_WINDOW_BITS": {
        "count": 1,
        "size": 48
    },
    "Abort": {
        "count": 1,
        "size": 32
    },
    "AbortJS": {
        "count": 1,
        "size": 32
    },
    "Accepted": {
        "count": 1,
        "size": 32
    },
    "AddArrayElement": {
        "count": 3,
        "size": 256
    },
    "AddElement": {
        "count": 1,
        "size": 40
    },
    "AddNamedProperty": {
        "count": 1,
        "size": 40
    },
    "Ae": {
        "count": 1,
        "size": 32
    },
    "Agent": {
        "count": 7,
        "size": 696
    },
    "AllocateHeapNumber": {
        "count": 1,
        "size": 48
    },
    "AllocateInNewSpace": {
        "count": 1,
        "size": 48
    },
    "AllocateInTargetSpace": {
        "count": 1,
        "size": 48
    },
    "Already Reported": {
        "count": 1,
        "size": 40
    },
    "Apache-2.0 and proprietary": {
        "count": 1,
        "size": 56
    },
    "AppendElement": {
        "count": 1,
        "size": 40
    },
    "Apply": {
        "count": 1,
        "size": 32
    },
    "Apr": {
        "count": 1,
        "size": 32
    },
    "April": {
        "count": 1,
        "size": 32
    },
    "Argon": {
        "count": 1,
        "size": 32
    },
    "Arguments": {
        "count": 4,
        "size": 296
    },
    "ArgumentsLength": {
        "count": 1,
        "size": 40
    },
    "Array": {
        "count": 1077,
        "size": 34616
    },
    "Array Iterator": {
        "count": 1,
        "size": 40
    },
    "Array Iterator.prototype.next": {
        "count": 1,
        "size": 56
    },
    "Array.prototype.concat": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.filter": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.forEach": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.indexOf": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.join": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.map": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.reduce": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.slice": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.some": {
        "count": 1,
        "size": 48
    },
    "Array.prototype.sort": {
        "count": 1,
        "size": 48
    },
    "ArrayBuffer": {
        "count": 14,
        "size": 960
    },
    "ArrayBufferConstructor": {
        "count": 2,
        "size": 192
    },
    "ArrayBufferGetByteLen": {
        "count": 1,
        "size": 48
    },
    "ArrayBufferGetByteLength": {
        "count": 1,
        "size": 48
    },
    "ArrayBufferInitialize": {
        "count": 1,
        "size": 48
    },
    "ArrayBufferIsView": {
        "count": 1,
        "size": 48
    },
    "ArrayBufferIsViewJS": {
        "count": 1,
        "size": 48
    },
    "ArrayBufferNeuter": {
        "count": 1,
        "size": 48
    },
    "ArrayBufferSlice": {
        "count": 1,
        "size": 40
    },
    "ArrayBufferSliceImpl": {
        "count": 1,
        "size": 48
    },
    "ArrayBufferViewGetByteLength": {
        "count": 1,
        "size": 56
    },
    "ArrayBufferViewGetByteOffset": {
        "count": 1,
        "size": 56
    },
    "ArrayConcat": {
        "count": 1,
        "size": 40
    },
    "ArrayConcatJS": {
        "count": 3,
        "size": 256
    },
    "ArrayConstructor": {
        "count": 1,
        "size": 40
    },
    "ArrayConstructorWithSubclassing": {
        "count": 1,
        "size": 56
    },
    "ArrayCopyWithin": {
        "count": 1,
        "size": 40
    },
    "ArrayEntries": {
        "count": 1,
        "size": 40
    },
    "ArrayEvery": {
        "count": 1,
        "size": 40
    },
    "ArrayFill": {
        "count": 1,
        "size": 40
    },
    "ArrayFilter": {
        "count": 1,
        "size": 40
    },
    "ArrayFind": {
        "count": 1,
        "size": 40
    },
    "ArrayFindIndex": {
        "count": 1,
        "size": 40
    },
    "ArrayForEach": {
        "count": 1,
        "size": 40
    },
    "ArrayFrom": {
        "count": 1,
        "size": 40
    },
    "ArrayIndexOf": {
        "count": 1,
        "size": 40
    },
    "ArrayIsArray": {
        "count": 1,
        "size": 40
    },
    "ArrayIterator": {
        "count": 3,
        "size": 256
    },
    "ArrayIterator#kind": {
        "count": 1,
        "size": 48
    },
    "ArrayIterator#next": {
        "count": 1,
        "size": 48
    },
    "ArrayIterator#object": {
        "count": 1,
        "size": 48
    },
    "ArrayIteratorCreateResultObject": {
        "count": 1,
        "size": 56
    },
    "ArrayIteratorIterator": {
        "count": 1,
        "size": 48
    },
    "ArrayIteratorNext": {
        "count": 1,
        "size": 48
    },
    "ArrayJoin": {
        "count": 1,
        "size": 40
    },
    "ArrayKeys": {
        "count": 1,
        "size": 40
    },
    "ArrayLastIndexOf": {
        "count": 1,
        "size": 40
    },
    "ArrayMap": {
        "count": 1,
        "size": 32
    },
    "ArrayObserve": {
        "count": 1,
        "size": 40
    },
    "ArrayOf": {
        "count": 1,
        "size": 32
    },
    "ArrayPop": {
        "count": 3,
        "size": 248
    },
    "ArrayPush": {
        "count": 3,
        "size": 256
    },
    "ArrayReduce": {
        "count": 1,
        "size": 40
    },
    "ArrayReduceRight": {
        "count": 1,
        "size": 40
    },
    "ArrayReverse": {
        "count": 1,
        "size": 40
    },
    "ArrayShift": {
        "count": 3,
        "size": 256
    },
    "ArraySlice": {
        "count": 3,
        "size": 256
    },
    "ArraySome": {
        "count": 1,
        "size": 40
    },
    "ArraySort": {
        "count": 1,
        "size": 40
    },
    "ArraySplice": {
        "count": 3,
        "size": 256
    },
    "ArrayToLocaleString": {
        "count": 1,
        "size": 48
    },
    "ArrayToString": {
        "count": 1,
        "size": 40
    },
    "ArrayUnobserve": {
        "count": 1,
        "size": 40
    },
    "ArrayUnshift": {
        "count": 3,
        "size": 256
    },
    "ArrayValues": {
        "count": 3,
        "size": 256
    },
    "Artistic-2.0": {
        "count": 4,
        "size": 160
    },
    "AssertionError": {
        "count": 3,
        "size": 256
    },
    "Asynchronous forks do not support Buffer input: ": {
        "count": 1,
        "size": 72
    },
    "AtomicsAdd": {
        "count": 1,
        "size": 40
    },
    "AtomicsAnd": {
        "count": 1,
        "size": 40
    },
    "AtomicsCompareExchange": {
        "count": 1,
        "size": 48
    },
    "AtomicsExchange": {
        "count": 1,
        "size": 40
    },
    "AtomicsIsLockFree": {
        "count": 1,
        "size": 48
    },
    "AtomicsLoad": {
        "count": 1,
        "size": 40
    },
    "AtomicsOr": {
        "count": 1,
        "size": 40
    },
    "AtomicsStore": {
        "count": 1,
        "size": 40
    },
    "AtomicsSub": {
        "count": 1,
        "size": 40
    },
    "AtomicsXor": {
        "count": 1,
        "size": 40
    },
    "Aug": {
        "count": 1,
        "size": 32
    },
    "August": {
        "count": 1,
        "size": 32
    },
    "AvailableLocalesOf": {
        "count": 1,
        "size": 48
    },
    "AxonProbe": {
        "count": 4,
        "size": 360
    },
    "B": {
        "count": 1,
        "size": 32
    },
    "BADFAMILY": {
        "count": 1,
        "size": 40
    },
    "BADFLAGS": {
        "count": 1,
        "size": 32
    },
    "BADHINTS": {
        "count": 1,
        "size": 32
    },
    "BADNAME": {
        "count": 1,
        "size": 32
    },
    "BADQUERY": {
        "count": 1,
        "size": 32
    },
    "BADRESP": {
        "count": 1,
        "size": 32
    },
    "BADSTR": {
        "count": 1,
        "size": 32
    },
    "BINARYBODY": {
        "count": 1,
        "size": 40
    },
    "BINARYLENGTH": {
        "count": 1,
        "size": 40
    },
    "BIND_FLAG": {
        "count": 1,
        "size": 40
    },
    "BIND_KEY_FLAG": {
        "count": 1,
        "size": 40
    },
    "BIND_STATE_BINDING": {
        "count": 1,
        "size": 48
    },
    "BIND_STATE_BOUND": {
        "count": 1,
        "size": 40
    },
    "BIND_STATE_UNBOUND": {
        "count": 1,
        "size": 48
    },
    "BIT_AND": {
        "count": 3,
        "size": 248
    },
    "BIT_AND_STRONG": {
        "count": 3,
        "size": 256
    },
    "BIT_OR": {
        "count": 3,
        "size": 248
    },
    "BIT_OR_STRONG": {
        "count": 3,
        "size": 256
    },
    "BIT_XOR": {
        "count": 3,
        "size": 248
    },
    "BIT_XOR_STRONG": {
        "count": 3,
        "size": 256
    },
    "BODY": {
        "count": 1,
        "size": 32
    },
    "BUILD": {
        "count": 1,
        "size": 32
    },
    "BUILDIDENTIFIER": {
        "count": 1,
        "size": 40
    },
    "BYTES_PER_ELEMENT": {
        "count": 1,
        "size": 48
    },
    "Bad Gateway": {
        "count": 1,
        "size": 40
    },
    "Bad Request": {
        "count": 1,
        "size": 40
    },
    "Bad cluster.schedulingPolicy: ": {
        "count": 1,
        "size": 56
    },
    "Bad socket type specified. Valid types are: udp4, udp6": {
        "count": 1,
        "size": 80
    },
    "Bandwidth Limit Exceeded": {
        "count": 1,
        "size": 48
    },
    "BasicJSONStringify": {
        "count": 1,
        "size": 48
    },
    "BeginPerformSplice": {
        "count": 3,
        "size": 264
    },
    "BinField": {
        "count": 1,
        "size": 32
    },
    "Binding buffer": {
        "count": 1,
        "size": 40
    },
    "Binding cares_wrap": {
        "count": 1,
        "size": 48
    },
    "Binding constants": {
        "count": 1,
        "size": 48
    },
    "Binding contextify": {
        "count": 1,
        "size": 48
    },
    "Binding crypto": {
        "count": 1,
        "size": 40
    },
    "Binding fs": {
        "count": 1,
        "size": 40
    },
    "Binding fs_event_wrap": {
        "count": 1,
        "size": 48
    },
    "Binding http_parser": {
        "count": 1,
        "size": 48
    },
    "Binding js_stream": {
        "count": 1,
        "size": 48
    },
    "Binding natives": {
        "count": 1,
        "size": 40
    },
    "Binding os": {
        "count": 1,
        "size": 40
    },
    "Binding pipe_wrap": {
        "count": 1,
        "size": 48
    },
    "Binding process_wrap": {
        "count": 1,
        "size": 48
    },
    "Binding signal_wrap": {
        "count": 1,
        "size": 48
    },
    "Binding spawn_sync": {
        "count": 1,
        "size": 48
    },
    "Binding stream_wrap": {
        "count": 1,
        "size": 48
    },
    "Binding tcp_wrap": {
        "count": 1,
        "size": 40
    },
    "Binding timer_wrap": {
        "count": 1,
        "size": 48
    },
    "Binding tls_wrap": {
        "count": 1,
        "size": 40
    },
    "Binding tty_wrap": {
        "count": 1,
        "size": 40
    },
    "Binding udp_wrap": {
        "count": 1,
        "size": 40
    },
    "Binding util": {
        "count": 1,
        "size": 40
    },
    "Binding uv": {
        "count": 1,
        "size": 40
    },
    "Binding zlib": {
        "count": 1,
        "size": 40
    },
    "Boolean": {
        "count": 4,
        "size": 280
    },
    "BooleanConstructor": {
        "count": 2,
        "size": 192
    },
    "BooleanToString": {
        "count": 1,
        "size": 40
    },
    "BooleanValueOf": {
        "count": 1,
        "size": 40
    },
    "BoundFunctionGetBindings": {
        "count": 1,
        "size": 48
    },
    "BreakIteratorAdoptText": {
        "count": 1,
        "size": 48
    },
    "BreakIteratorBreakType": {
        "count": 1,
        "size": 48
    },
    "BreakIteratorCurrent": {
        "count": 1,
        "size": 48
    },
    "BreakIteratorFirst": {
        "count": 1,
        "size": 48
    },
    "BreakIteratorNext": {
        "count": 1,
        "size": 48
    },
    "Buffer": {
        "count": 3,
        "size": 248
    },
    "Buffer.get is deprecated. Use array indexes instead.": {
        "count": 1,
        "size": 80
    },
    "Buffer.set is deprecated. Use array indexes instead.": {
        "count": 1,
        "size": 80
    },
    "Buffer.write": {
        "count": 1,
        "size": 40
    },
    "Buffer.write(string, encoding, offset, length) is ": {
        "count": 1,
        "size": 80
    },
    "BufferPool": {
        "count": 3,
        "size": 256
    },
    "BufferUtil": {
        "count": 1,
        "size": 40
    },
    "Bug string field must be url, email, or {email,url}": {
        "count": 1,
        "size": 80
    },
    "BugsField": {
        "count": 1,
        "size": 40
    },
    "BuildLanguageTagREs": {
        "count": 3,
        "size": 264
    },
    "C": {
        "count": 1,
        "size": 32
    },
    "CALL_FUNCTION_PROXY": {
        "count": 3,
        "size": 264
    },
    "CALL_FUNCTION_PROXY_AS_CONSTRUCTOR": {
        "count": 3,
        "size": 280
    },
    "CALL_NON_FUNCTION": {
        "count": 3,
        "size": 264
    },
    "CALL_NON_FUNCTION_AS_CONSTRUCTOR": {
        "count": 3,
        "size": 272
    },
    "CANCELLED": {
        "count": 1,
        "size": 40
    },
    "CARET": {
        "count": 1,
        "size": 32
    },
    "CARETLOOSE": {
        "count": 1,
        "size": 40
    },
    "CARETTRIM": {
        "count": 1,
        "size": 40
    },
    "CHECKOUT": {
        "count": 1,
        "size": 32
    },
    "CHILD_PROCESS": {
        "count": 2,
        "size": 80
    },
    "CIRCULAR": {
        "count": 1,
        "size": 32
    },
    "CIRCULAR-": {
        "count": 1,
        "size": 40
    },
    "CLIENT_RENEG_LIMIT": {
        "count": 1,
        "size": 48
    },
    "CLIENT_RENEG_WINDOW": {
        "count": 1,
        "size": 48
    },
    "CLOSED": {
        "count": 1,
        "size": 32
    },
    "CLOSING": {
        "count": 1,
        "size": 32
    },
    "CLUSTER_CONTROL_": {
        "count": 1,
        "size": 40
    },
    "CNAME": {
        "count": 1,
        "size": 32
    },
    "COMMAND": {
        "count": 1,
        "size": 32
    },
    "COMPARATOR": {
        "count": 1,
        "size": 40
    },
    "COMPARATORLOOSE": {
        "count": 1,
        "size": 40
    },
    "COMPARATORTRIM": {
        "count": 1,
        "size": 40
    },
    "COMPARE": {
        "count": 3,
        "size": 248
    },
    "COMPARE_STRONG": {
        "count": 3,
        "size": 256
    },
    "CONCAT_ITERABLE_TO_ARRAY": {
        "count": 3,
        "size": 264
    },
    "CONNECT": {
        "count": 1,
        "size": 32
    },
    "CONNECTING": {
        "count": 1,
        "size": 40
    },
    "CONNREFUSED": {
        "count": 1,
        "size": 40
    },
    "COPY": {
        "count": 1,
        "size": 32
    },
    "COUNTED": {
        "count": 1,
        "size": 32
    },
    "CPU": {
        "count": 1,
        "size": 32
    },
    "CPU profiling": {
        "count": 1,
        "size": 40
    },
    "CPUS": {
        "count": 1,
        "size": 32
    },
    "CRIT": {
        "count": 1,
        "size": 32
    },
    "CRLF": {
        "count": 1,
        "size": 32
    },
    "CURRY_BOUND_FLAG": {
        "count": 1,
        "size": 40
    },
    "CURRY_FLAG": {
        "count": 1,
        "size": 40
    },
    "CURRY_RIGHT_FLAG": {
        "count": 1,
        "size": 40
    },
    "Cache": {
        "count": 1,
        "size": 32
    },
    "Call": {
        "count": 1,
        "size": 32
    },
    "CallFunction": {
        "count": 1,
        "size": 40
    },
    "CallSite": {
        "count": 3,
        "size": 248
    },
    "CallSite#function": {
        "count": 1,
        "size": 48
    },
    "CallSite#position": {
        "count": 1,
        "size": 48
    },
    "CallSite#receiver": {
        "count": 1,
        "size": 48
    },
    "CallSite#strict_mode": {
        "count": 1,
        "size": 48
    },
    "CallSiteGetColumnNumber": {
        "count": 3,
        "size": 264
    },
    "CallSiteGetColumnNumberRT": {
        "count": 1,
        "size": 56
    },
    "CallSiteGetEvalOrigin": {
        "count": 3,
        "size": 264
    },
    "CallSiteGetFileName": {
        "count": 3,
        "size": 264
    },
    "CallSiteGetFileNameRT": {
        "count": 1,
        "size": 48
    },
    "CallSiteGetFunction": {
        "count": 3,
        "size": 264
    },
    "CallSiteGetFunctionName": {
        "count": 3,
        "size": 264
    },
    "CallSiteGetFunctionNameRT": {
        "count": 1,
        "size": 56
    },
    "CallSiteGetLineNumber": {
        "count": 3,
        "size": 264
    },
    "CallSiteGetLineNumberRT": {
        "count": 1,
        "size": 48
    },
    "CallSiteGetMethodName": {
        "count": 3,
        "size": 264
    },
    "CallSiteGetMethodNameRT": {
        "count": 1,
        "size": 48
    },
    "CallSiteGetPosition": {
        "count": 3,
        "size": 264
    },
    "CallSiteGetScriptNameOrSourceURL": {
        "count": 3,
        "size": 272
    },
    "CallSiteGetScriptNameOrSourceUrlRT": {
        "count": 1,
        "size": 64
    },
    "CallSiteGetThis": {
        "count": 3,
        "size": 256
    },
    "CallSiteGetTypeName": {
        "count": 3,
        "size": 264
    },
    "CallSiteIsConstructor": {
        "count": 3,
        "size": 264
    },
    "CallSiteIsConstructorRT": {
        "count": 1,
        "size": 48
    },
    "CallSiteIsEval": {
        "count": 3,
        "size": 256
    },
    "CallSiteIsEvalRT": {
        "count": 1,
        "size": 40
    },
    "CallSiteIsNative": {
        "count": 3,
        "size": 256
    },
    "CallSiteIsNativeRT": {
        "count": 1,
        "size": 48
    },
    "CallSiteIsToplevel": {
        "count": 3,
        "size": 264
    },
    "CallSiteIsToplevelRT": {
        "count": 1,
        "size": 48
    },
    "CallSiteToString": {
        "count": 3,
        "size": 256
    },
    "CallSuperWithSpread": {
        "count": 1,
        "size": 48
    },
    "CallTrap0": {
        "count": 3,
        "size": 256
    },
    "CallTrap1": {
        "count": 3,
        "size": 256
    },
    "CallTrap2": {
        "count": 3,
        "size": 256
    },
    "Callback was already called.": {
        "count": 1,
        "size": 56
    },
    "CallbackDeliverPending": {
        "count": 3,
        "size": 264
    },
    "CallbackInfoGet": {
        "count": 3,
        "size": 256
    },
    "CallbackInfoGetOrCreate": {
        "count": 3,
        "size": 264
    },
    "CallbackInfoGetPriority": {
        "count": 3,
        "size": 264
    },
    "CallbackInfoNormalize": {
        "count": 3,
        "size": 264
    },
    "CallbackInfoSet": {
        "count": 3,
        "size": 256
    },
    "CanBeSafelyTreatedAsAnErrorObject": {
        "count": 3,
        "size": 280
    },
    "Cannot create final Buffer. ": {
        "count": 1,
        "size": 56
    },
    "Cannot find module '": {
        "count": 1,
        "size": 48
    },
    "Cannot load strong-debugger: ": {
        "count": 1,
        "size": 56
    },
    "CanonicalizeLanguageTag": {
        "count": 1,
        "size": 48
    },
    "CaptureString": {
        "count": 3,
        "size": 256
    },
    "Certificate": {
        "count": 3,
        "size": 256
    },
    "ChangeBreakOnException": {
        "count": 1,
        "size": 48
    },
    "ChangeObserversIsOptimized": {
        "count": 3,
        "size": 272
    },
    "CharAt": {
        "count": 1,
        "size": 32
    },
    "CharFromCode": {
        "count": 1,
        "size": 40
    },
    "CheckDateCacheCurrent": {
        "count": 3,
        "size": 264
    },
    "CheckExecutionState": {
        "count": 1,
        "size": 48
    },
    "CheckIsBootstrapping": {
        "count": 1,
        "size": 48
    },
    "Child process can have only one IPC pipe": {
        "count": 1,
        "size": 64
    },
    "ChildProcess": {
        "count": 4,
        "size": 408
    },
    "Chrome Developer Tools": {
        "count": 1,
        "size": 48
    },
    "Cipher": {
        "count": 3,
        "size": 248
    },
    "Cipher.final": {
        "count": 1,
        "size": 40
    },
    "CipherBase": {
        "count": 1,
        "size": 40
    },
    "Cipheriv": {
        "count": 3,
        "size": 248
    },
    "ClassGetSourceCode": {
        "count": 1,
        "size": 48
    },
    "ClassOf": {
        "count": 1,
        "size": 32
    },
    "ClearBreakPoint": {
        "count": 1,
        "size": 40
    },
    "ClearFunctionTypeFeedback": {
        "count": 1,
        "size": 56
    },
    "ClearStepping": {
        "count": 1,
        "size": 40
    },
    "CleartextStream": {
        "count": 3,
        "size": 256
    },
    "Client": {
        "count": 3,
        "size": 248
    },
    "ClientRequest": {
        "count": 3,
        "size": 256
    },
    "CloseEvent": {
        "count": 3,
        "size": 256
    },
    "Collator": {
        "count": 1,
        "size": 32
    },
    "CollectGarbage": {
        "count": 1,
        "size": 40
    },
    "CollectStackTrace": {
        "count": 1,
        "size": 48
    },
    "Comparator": {
        "count": 3,
        "size": 256
    },
    "CompileForOnStackReplacement": {
        "count": 1,
        "size": 56
    },
    "CompileLazy": {
        "count": 1,
        "size": 40
    },
    "CompileOptimized": {
        "count": 1,
        "size": 40
    },
    "CompileString": {
        "count": 1,
        "size": 40
    },
    "ComputeIntegerHash": {
        "count": 3,
        "size": 264
    },
    "ComputeSpliceDeleteCount": {
        "count": 3,
        "size": 264
    },
    "ComputeSpliceStartIndex": {
        "count": 3,
        "size": 264
    },
    "ConcatIterableToArray": {
        "count": 3,
        "size": 264
    },
    "Conflict": {
        "count": 1,
        "size": 32
    },
    "Connection": {
        "count": 4,
        "size": 296
    },
    "Console": {
        "count": 4,
        "size": 344
    },
    "Console expects a writable stream instance": {
        "count": 1,
        "size": 72
    },
    "Console.dir": {
        "count": 1,
        "size": 40
    },
    "Console.log": {
        "count": 1,
        "size": 40
    },
    "Console.time": {
        "count": 1,
        "size": 40
    },
    "Console.warn": {
        "count": 1,
        "size": 40
    },
    "ConstructDouble": {
        "count": 1,
        "size": 40
    },
    "ConstructTypedArray": {
        "count": 3,
        "size": 264
    },
    "ConstructTypedArrayLike": {
        "count": 3,
        "size": 264
    },
    "ContextifyScript": {
        "count": 4,
        "size": 296
    },
    "Continue": {
        "count": 1,
        "size": 32
    },
    "ConvertAcceptListToTypeMap": {
        "count": 3,
        "size": 272
    },
    "ConvertDescriptorArrayToDescriptor": {
        "count": 3,
        "size": 280
    },
    "ConvertToLocaleString": {
        "count": 3,
        "size": 264
    },
    "ConvertToString": {
        "count": 3,
        "size": 256
    },
    "CopyFromPrototype": {
        "count": 2,
        "size": 192
    },
    "Could not find module root given file: \"": {
        "count": 1,
        "size": 64
    },
    "Could not locate the bindings file. Tried:\n": {
        "count": 1,
        "size": 72
    },
    "CreateArrayIterator": {
        "count": 3,
        "size": 264
    },
    "CreateArrayLiteral": {
        "count": 1,
        "size": 48
    },
    "CreateArrayLiteralStubBailout": {
        "count": 1,
        "size": 56
    },
    "CreateBreakIterator": {
        "count": 1,
        "size": 48
    },
    "CreateCollator": {
        "count": 1,
        "size": 40
    },
    "CreateDate": {
        "count": 3,
        "size": 256
    },
    "CreateDateTimeFormat": {
        "count": 1,
        "size": 48
    },
    "CreateGlobalPrivateSymbol": {
        "count": 1,
        "size": 56
    },
    "CreateIteratorResultObject": {
        "count": 3,
        "size": 272
    },
    "CreateJSFunctionProxy": {
        "count": 1,
        "size": 48
    },
    "CreateJSGeneratorObject": {
        "count": 1,
        "size": 48
    },
    "CreateJSProxy": {
        "count": 1,
        "size": 40
    },
    "CreateNumberFormat": {
        "count": 1,
        "size": 48
    },
    "CreateObjectLiteral": {
        "count": 1,
        "size": 48
    },
    "CreatePrivateSymbol": {
        "count": 1,
        "size": 48
    },
    "CreateStringIterator": {
        "count": 3,
        "size": 264
    },
    "CreateSymbol": {
        "count": 1,
        "size": 40
    },
    "Created": {
        "count": 1,
        "size": 32
    },
    "Credentials": {
        "count": 1,
        "size": 40
    },
    "CryptoStream": {
        "count": 3,
        "size": 256
    },
    "Ctor": {
        "count": 1,
        "size": 32
    },
    "CubeRoot": {
        "count": 3,
        "size": 248
    },
    "D": {
        "count": 1,
        "size": 32
    },
    "DATE": {
        "count": 1,
        "size": 32
    },
    "DD": {
        "count": 1,
        "size": 32
    },
    "DDD": {
        "count": 1,
        "size": 32
    },
    "DDDD": {
        "count": 1,
        "size": 32
    },
    "DDDo": {
        "count": 1,
        "size": 32
    },
    "DEBUG": {
        "count": 1,
        "size": 32
    },
    "DEBUG_COLORS": {
        "count": 1,
        "size": 40
    },
    "DEBUG_FD": {
        "count": 1,
        "size": 32
    },
    "DEFAULTS": {
        "count": 1,
        "size": 32
    },
    "DEFAULT_CIPHERS": {
        "count": 1,
        "size": 40
    },
    "DEFAULT_ECDH_CURVE": {
        "count": 1,
        "size": 48
    },
    "DEFAULT_ENCODING": {
        "count": 1,
        "size": 40
    },
    "DEFAULT_MEM_LEVEL": {
        "count": 1,
        "size": 48
    },
    "DEFAULT_TRUNC_LENGTH": {
        "count": 1,
        "size": 48
    },
    "DEFAULT_TRUNC_OMISSION": {
        "count": 1,
        "size": 48
    },
    "DEFAULT_WINDOW_BITS": {
        "count": 1,
        "size": 48
    },
    "DEFLATE": {
        "count": 1,
        "size": 32
    },
    "DEFLATERAW": {
        "count": 1,
        "size": 40
    },
    "DELETE": {
        "count": 4,
        "size": 280
    },
    "DESTRUCTION": {
        "count": 1,
        "size": 40
    },
    "DH_CHECK_P_NOT_PRIME": {
        "count": 1,
        "size": 48
    },
    "DH_CHECK_P_NOT_SAFE_PRIME": {
        "count": 1,
        "size": 56
    },
    "DH_GENERATOR": {
        "count": 1,
        "size": 40
    },
    "DH_NOT_SUITABLE_GENERATOR": {
        "count": 1,
        "size": 56
    },
    "DH_UNABLE_TO_CHECK_GENERATOR": {
        "count": 1,
        "size": 56
    },
    "DIS": {
        "count": 1,
        "size": 32
    },
    "DIV": {
        "count": 3,
        "size": 248
    },
    "DIV_STRONG": {
        "count": 3,
        "size": 256
    },
    "D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?": {
        "count": 3,
        "size": 200
    },
    "DataView": {
        "count": 3,
        "size": 248
    },
    "DataViewConstructor": {
        "count": 2,
        "size": 192
    },
    "DataViewGetBuffer": {
        "count": 1,
        "size": 48
    },
    "DataViewGetBufferJS": {
        "count": 1,
        "size": 48
    },
    "DataViewGetByteLength": {
        "count": 1,
        "size": 48
    },
    "DataViewGetByteOffset": {
        "count": 1,
        "size": 48
    },
    "DataViewGetFloat32": {
        "count": 1,
        "size": 48
    },
    "DataViewGetFloat32JS": {
        "count": 1,
        "size": 48
    },
    "DataViewGetFloat64": {
        "count": 1,
        "size": 48
    },
    "DataViewGetFloat64JS": {
        "count": 1,
        "size": 48
    },
    "DataViewGetInt16": {
        "count": 1,
        "size": 40
    },
    "DataViewGetInt16JS": {
        "count": 1,
        "size": 48
    },
    "DataViewGetInt32": {
        "count": 1,
        "size": 40
    },
    "DataViewGetInt32JS": {
        "count": 1,
        "size": 48
    },
    "DataViewGetInt8": {
        "count": 1,
        "size": 40
    },
    "DataViewGetInt8JS": {
        "count": 1,
        "size": 48
    },
    "DataViewGetUint16": {
        "count": 1,
        "size": 48
    },
    "DataViewGetUint16JS": {
        "count": 1,
        "size": 48
    },
    "DataViewGetUint32": {
        "count": 1,
        "size": 48
    },
    "DataViewGetUint32JS": {
        "count": 1,
        "size": 48
    },
    "DataViewGetUint8": {
        "count": 1,
        "size": 40
    },
    "DataViewGetUint8JS": {
        "count": 1,
        "size": 48
    },
    "DataViewInitialize": {
        "count": 1,
        "size": 48
    },
    "DataViewSetFloat32": {
        "count": 1,
        "size": 48
    },
    "DataViewSetFloat32JS": {
        "count": 1,
        "size": 48
    },
    "DataViewSetFloat64": {
        "count": 1,
        "size": 48
    },
    "DataViewSetFloat64JS": {
        "count": 1,
        "size": 48
    },
    "DataViewSetInt16": {
        "count": 1,
        "size": 40
    },
    "DataViewSetInt16JS": {
        "count": 1,
        "size": 48
    },
    "DataViewSetInt32": {
        "count": 1,
        "size": 40
    },
    "DataViewSetInt32JS": {
        "count": 1,
        "size": 48
    },
    "DataViewSetInt8": {
        "count": 1,
        "size": 40
    },
    "DataViewSetInt8JS": {
        "count": 1,
        "size": 48
    },
    "DataViewSetUint16": {
        "count": 1,
        "size": 48
    },
    "DataViewSetUint16JS": {
        "count": 1,
        "size": 48
    },
    "DataViewSetUint32": {
        "count": 1,
        "size": 48
    },
    "DataViewSetUint32JS": {
        "count": 1,
        "size": 48
    },
    "DataViewSetUint8": {
        "count": 1,
        "size": 40
    },
    "DataViewSetUint8JS": {
        "count": 1,
        "size": 48
    },
    "Date": {
        "count": 4,
        "size": 344
    },
    "DateCacheVersion": {
        "count": 1,
        "size": 40
    },
    "DateConstructor": {
        "count": 2,
        "size": 184
    },
    "DateCurrentTime": {
        "count": 1,
        "size": 40
    },
    "DateField": {
        "count": 1,
        "size": 40
    },
    "DateGetDate": {
        "count": 1,
        "size": 40
    },
    "DateGetDay": {
        "count": 1,
        "size": 40
    },
    "DateGetFullYear": {
        "count": 1,
        "size": 40
    },
    "DateGetHours": {
        "count": 1,
        "size": 40
    },
    "DateGetMilliseconds": {
        "count": 1,
        "size": 48
    },
    "DateGetMinutes": {
        "count": 1,
        "size": 40
    },
    "DateGetMonth": {
        "count": 1,
        "size": 40
    },
    "DateGetSeconds": {
        "count": 1,
        "size": 40
    },
    "DateGetTime": {
        "count": 1,
        "size": 40
    },
    "DateGetTimezoneOffset": {
        "count": 1,
        "size": 48
    },
    "DateGetUTCDate": {
        "count": 1,
        "size": 40
    },
    "DateGetUTCDay": {
        "count": 1,
        "size": 40
    },
    "DateGetUTCFullYear": {
        "count": 1,
        "size": 48
    },
    "DateGetUTCHours": {
        "count": 1,
        "size": 40
    },
    "DateGetUTCMilliseconds": {
        "count": 1,
        "size": 48
    },
    "DateGetUTCMinutes": {
        "count": 1,
        "size": 48
    },
    "DateGetUTCMonth": {
        "count": 1,
        "size": 40
    },
    "DateGetUTCSeconds": {
        "count": 1,
        "size": 48
    },
    "DateGetYear": {
        "count": 1,
        "size": 40
    },
    "DateLocalTimezone": {
        "count": 1,
        "size": 48
    },
    "DateMakeDay": {
        "count": 1,
        "size": 40
    },
    "DateNow": {
        "count": 1,
        "size": 32
    },
    "DateParse": {
        "count": 1,
        "size": 40
    },
    "DateParseString": {
        "count": 1,
        "size": 40
    },
    "DatePrintString": {
        "count": 3,
        "size": 256
    },
    "DateSetDate": {
        "count": 1,
        "size": 40
    },
    "DateSetFullYear": {
        "count": 1,
        "size": 40
    },
    "DateSetHours": {
        "count": 1,
        "size": 40
    },
    "DateSetMilliseconds": {
        "count": 1,
        "size": 48
    },
    "DateSetMinutes": {
        "count": 1,
        "size": 40
    },
    "DateSetMonth": {
        "count": 1,
        "size": 40
    },
    "DateSetSeconds": {
        "count": 1,
        "size": 40
    },
    "DateSetTime": {
        "count": 1,
        "size": 40
    },
    "DateSetUTCDate": {
        "count": 1,
        "size": 40
    },
    "DateSetUTCFullYear": {
        "count": 1,
        "size": 48
    },
    "DateSetUTCHours": {
        "count": 1,
        "size": 40
    },
    "DateSetUTCMilliseconds": {
        "count": 1,
        "size": 48
    },
    "DateSetUTCMinutes": {
        "count": 1,
        "size": 48
    },
    "DateSetUTCMonth": {
        "count": 1,
        "size": 40
    },
    "DateSetUTCSeconds": {
        "count": 1,
        "size": 48
    },
    "DateSetValue": {
        "count": 1,
        "size": 40
    },
    "DateSetYear": {
        "count": 1,
        "size": 40
    },
    "DateString": {
        "count": 3,
        "size": 256
    },
    "DateTimeFormat": {
        "count": 1,
        "size": 40
    },
    "DateToDateString": {
        "count": 1,
        "size": 40
    },
    "DateToGMTString": {
        "count": 1,
        "size": 40
    },
    "DateToISOString": {
        "count": 1,
        "size": 40
    },
    "DateToJSON": {
        "count": 1,
        "size": 40
    },
    "DateToLocaleDateString": {
        "count": 1,
        "size": 48
    },
    "DateToLocaleString": {
        "count": 1,
        "size": 48
    },
    "DateToLocaleTimeString": {
        "count": 1,
        "size": 48
    },
    "DateToString": {
        "count": 1,
        "size": 40
    },
    "DateToTimeString": {
        "count": 1,
        "size": 40
    },
    "DateToUTC": {
        "count": 1,
        "size": 40
    },
    "DateToUTCString": {
        "count": 1,
        "size": 40
    },
    "DateUTC": {
        "count": 1,
        "size": 32
    },
    "DateValueOf": {
        "count": 1,
        "size": 40
    },
    "Debug": {
        "count": 1,
        "size": 32
    },
    "DebugAsyncTaskEvent": {
        "count": 1,
        "size": 48
    },
    "DebugBreak": {
        "count": 1,
        "size": 40
    },
    "DebugBreakInOptimizedCode": {
        "count": 1,
        "size": 56
    },
    "DebugCallbackSupportsStepping": {
        "count": 1,
        "size": 56
    },
    "DebugConstructedBy": {
        "count": 1,
        "size": 48
    },
    "DebugEvaluate": {
        "count": 1,
        "size": 40
    },
    "DebugEvaluateGlobal": {
        "count": 1,
        "size": 48
    },
    "DebugGetInternalProperties": {
        "count": 1,
        "size": 56
    },
    "DebugGetLoadedScripts": {
        "count": 1,
        "size": 48
    },
    "DebugGetProperty": {
        "count": 1,
        "size": 40
    },
    "DebugGetPropertyDetails": {
        "count": 1,
        "size": 48
    },
    "DebugGetPrototype": {
        "count": 1,
        "size": 48
    },
    "DebugIndexedInterceptorElementValue": {
        "count": 1,
        "size": 64
    },
    "DebugIsActive": {
        "count": 1,
        "size": 40
    },
    "DebugNamedInterceptorPropertyValue": {
        "count": 1,
        "size": 64
    },
    "DebugPopPromise": {
        "count": 1,
        "size": 40
    },
    "DebugPrepareStepInIfStepping": {
        "count": 1,
        "size": 56
    },
    "DebugPrint": {
        "count": 1,
        "size": 40
    },
    "DebugPrintScopes": {
        "count": 1,
        "size": 40
    },
    "DebugPromiseEvent": {
        "count": 1,
        "size": 48
    },
    "DebugPropertyAttributesFromDetails": {
        "count": 1,
        "size": 64
    },
    "DebugPropertyIndexFromDetails": {
        "count": 1,
        "size": 56
    },
    "DebugPropertyTypeFromDetails": {
        "count": 1,
        "size": 56
    },
    "DebugPushPromise": {
        "count": 1,
        "size": 40
    },
    "DebugReferencedBy": {
        "count": 1,
        "size": 48
    },
    "DebugSetScriptSource": {
        "count": 1,
        "size": 48
    },
    "DebugTrace": {
        "count": 1,
        "size": 40
    },
    "Debugger": {
        "count": 1,
        "size": 32
    },
    "Dec": {
        "count": 1,
        "size": 32
    },
    "December": {
        "count": 1,
        "size": 32
    },
    "Decipher": {
        "count": 3,
        "size": 248
    },
    "Decipheriv": {
        "count": 3,
        "size": 256
    },
    "DeclareGlobals": {
        "count": 1,
        "size": 40
    },
    "DeclareLookupSlot": {
        "count": 1,
        "size": 48
    },
    "DeclareModules": {
        "count": 1,
        "size": 40
    },
    "Decode": {
        "count": 3,
        "size": 248
    },
    "DefaultConstructorCallSuper": {
        "count": 1,
        "size": 56
    },
    "DefaultNumber": {
        "count": 3,
        "size": 256
    },
    "DefaultString": {
        "count": 3,
        "size": 256
    },
    "DefineAccessorPropertyUnchecked": {
        "count": 1,
        "size": 56
    },
    "DefineArrayProperty": {
        "count": 3,
        "size": 264
    },
    "DefineClass": {
        "count": 1,
        "size": 40
    },
    "DefineClassMethod": {
        "count": 1,
        "size": 48
    },
    "DefineDataPropertyUnchecked": {
        "count": 1,
        "size": 56
    },
    "DefineError": {
        "count": 3,
        "size": 256
    },
    "DefineError.aV": {
        "count": 1,
        "size": 104
    },
    "DefineGetterPropertyUnchecked": {
        "count": 1,
        "size": 56
    },
    "DefineObjectProperty": {
        "count": 3,
        "size": 264
    },
    "DefineOwnProperty": {
        "count": 3,
        "size": 264
    },
    "DefineOwnPropertyFromAPI": {
        "count": 3,
        "size": 264
    },
    "DefineProxyProperty": {
        "count": 3,
        "size": 264
    },
    "DefineSetterPropertyUnchecked": {
        "count": 1,
        "size": 56
    },
    "Deflate": {
        "count": 3,
        "size": 248
    },
    "DeflateRaw": {
        "count": 3,
        "size": 256
    },
    "Delete": {
        "count": 3,
        "size": 248
    },
    "DeleteLookupSlot": {
        "count": 1,
        "size": 40
    },
    "DeleteProperty": {
        "count": 1,
        "size": 40
    },
    "DeliverObservationChangeRecords": {
        "count": 1,
        "size": 56
    },
    "DeoptimizeFunction": {
        "count": 1,
        "size": 48
    },
    "DeoptimizeNow": {
        "count": 1,
        "size": 40
    },
    "Description": {
        "count": 1,
        "size": 40
    },
    "DevTools": {
        "count": 1,
        "size": 32
    },
    "DevTools Remote Debugging Protocol provider for Node.js and io.js": {
        "count": 1,
        "size": 96
    },
    "DiffieHellman": {
        "count": 3,
        "size": 256
    },
    "DiffieHellmanGroup": {
        "count": 3,
        "size": 264
    },
    "DisassembleFunction": {
        "count": 1,
        "size": 48
    },
    "Do": {
        "count": 1,
        "size": 32
    },
    "DoConstructRegExp": {
        "count": 3,
        "size": 264
    },
    "DoRegExpExec": {
        "count": 3,
        "size": 256
    },
    "Domain": {
        "count": 3,
        "size": 248
    },
    "Domain.add": {
        "count": 1,
        "size": 40
    },
    "Domain.bind": {
        "count": 1,
        "size": 40
    },
    "Domain.enter": {
        "count": 1,
        "size": 40
    },
    "Domain.exit": {
        "count": 1,
        "size": 40
    },
    "Domain.run": {
        "count": 1,
        "size": 40
    },
    "DoubleHi": {
        "count": 1,
        "size": 32
    },
    "DoubleLo": {
        "count": 1,
        "size": 32
    },
    "Duplex": {
        "count": 3,
        "size": 248
    },
    "Duration": {
        "count": 3,
        "size": 248
    },
    "E": {
        "count": 1,
        "size": 32
    },
    "E2BIG": {
        "count": 1,
        "size": 32
    },
    "EACCES": {
        "count": 1,
        "size": 32
    },
    "EADDRGETNETWORKPARAMS": {
        "count": 1,
        "size": 48
    },
    "EADDRINUSE": {
        "count": 1,
        "size": 40
    },
    "EADDRNOTAVAIL": {
        "count": 1,
        "size": 40
    },
    "EADNAME": {
        "count": 1,
        "size": 32
    },
    "EAFNOSUPPORT": {
        "count": 1,
        "size": 40
    },
    "EAGAIN": {
        "count": 1,
        "size": 32
    },
    "EALREADY": {
        "count": 1,
        "size": 32
    },
    "EBADF": {
        "count": 1,
        "size": 32
    },
    "EBADFAMILY": {
        "count": 1,
        "size": 40
    },
    "EBADFLAGS": {
        "count": 1,
        "size": 40
    },
    "EBADHINTS": {
        "count": 1,
        "size": 40
    },
    "EBADMSG": {
        "count": 1,
        "size": 32
    },
    "EBADNAME": {
        "count": 1,
        "size": 32
    },
    "EBADQUERY": {
        "count": 1,
        "size": 40
    },
    "EBADRESP": {
        "count": 1,
        "size": 32
    },
    "EBADSTR": {
        "count": 1,
        "size": 32
    },
    "EBUSY": {
        "count": 1,
        "size": 32
    },
    "ECANCELED": {
        "count": 1,
        "size": 40
    },
    "ECANCELLED": {
        "count": 1,
        "size": 40
    },
    "ECDH": {
        "count": 3,
        "size": 248
    },
    "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA": {
        "count": 2,
        "size": 736
    },
    "ECHILD": {
        "count": 1,
        "size": 32
    },
    "ECONNABORTED": {
        "count": 1,
        "size": 40
    },
    "ECONNREFUSED": {
        "count": 1,
        "size": 40
    },
    "ECONNRESET": {
        "count": 1,
        "size": 40
    },
    "EDEADLK": {
        "count": 1,
        "size": 32
    },
    "EDESTADDRREQ": {
        "count": 1,
        "size": 40
    },
    "EDESTRUCTION": {
        "count": 1,
        "size": 40
    },
    "EDOM": {
        "count": 1,
        "size": 32
    },
    "EDQUOT": {
        "count": 1,
        "size": 32
    },
    "EE": {
        "count": 1,
        "size": 32
    },
    "EEXIST": {
        "count": 1,
        "size": 32
    },
    "EFAULT": {
        "count": 1,
        "size": 32
    },
    "EFBIG": {
        "count": 1,
        "size": 32
    },
    "EFILE": {
        "count": 1,
        "size": 32
    },
    "EFORMERR": {
        "count": 1,
        "size": 32
    },
    "EHOSTUNREACH": {
        "count": 1,
        "size": 40
    },
    "EIDRM": {
        "count": 1,
        "size": 32
    },
    "EILSEQ": {
        "count": 1,
        "size": 32
    },
    "EINPROGRESS": {
        "count": 1,
        "size": 40
    },
    "EINTR": {
        "count": 1,
        "size": 32
    },
    "EINVAL": {
        "count": 1,
        "size": 32
    },
    "EIO": {
        "count": 1,
        "size": 32
    },
    "EISCONN": {
        "count": 1,
        "size": 32
    },
    "EISDIR": {
        "count": 1,
        "size": 32
    },
    "EL": {
        "count": 1,
        "size": 32
    },
    "ELOADIPHLPAPI": {
        "count": 1,
        "size": 40
    },
    "ELOOP": {
        "count": 1,
        "size": 32
    },
    "EMFILE": {
        "count": 1,
        "size": 32
    },
    "EMLINK": {
        "count": 1,
        "size": 32
    },
    "EMPTY": {
        "count": 1,
        "size": 32
    },
    "EMSGSIZE": {
        "count": 1,
        "size": 32
    },
    "EMULTIHOP": {
        "count": 1,
        "size": 40
    },
    "ENAMETOOLONG": {
        "count": 1,
        "size": 40
    },
    "ENETDOWN": {
        "count": 1,
        "size": 32
    },
    "ENETRESET": {
        "count": 1,
        "size": 40
    },
    "ENETUNREACH": {
        "count": 1,
        "size": 40
    },
    "ENFILE": {
        "count": 1,
        "size": 32
    },
    "ENGINE_METHOD_ALL": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_CIPHERS": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_DH": {
        "count": 1,
        "size": 40
    },
    "ENGINE_METHOD_DIGESTS": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_DSA": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_ECDH": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_ECDSA": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_NONE": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_PKEY_ASN1_METHS": {
        "count": 1,
        "size": 56
    },
    "ENGINE_METHOD_PKEY_METHS": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_RAND": {
        "count": 1,
        "size": 48
    },
    "ENGINE_METHOD_STORE": {
        "count": 1,
        "size": 48
    },
    "ENOBUFS": {
        "count": 1,
        "size": 32
    },
    "ENODATA": {
        "count": 1,
        "size": 32
    },
    "ENODEV": {
        "count": 1,
        "size": 32
    },
    "ENOENT": {
        "count": 1,
        "size": 32
    },
    "ENOEXEC": {
        "count": 1,
        "size": 32
    },
    "ENOLCK": {
        "count": 1,
        "size": 32
    },
    "ENOLINK": {
        "count": 1,
        "size": 32
    },
    "ENOMEM": {
        "count": 1,
        "size": 32
    },
    "ENOMSG": {
        "count": 1,
        "size": 32
    },
    "ENONAME": {
        "count": 1,
        "size": 32
    },
    "ENOPROTOOPT": {
        "count": 1,
        "size": 40
    },
    "ENOSPC": {
        "count": 1,
        "size": 32
    },
    "ENOSR": {
        "count": 1,
        "size": 32
    },
    "ENOSTR": {
        "count": 1,
        "size": 32
    },
    "ENOSYS": {
        "count": 1,
        "size": 32
    },
    "ENOTCONN": {
        "count": 1,
        "size": 32
    },
    "ENOTDIR": {
        "count": 1,
        "size": 32
    },
    "ENOTEMPTY": {
        "count": 1,
        "size": 40
    },
    "ENOTFOUND": {
        "count": 1,
        "size": 40
    },
    "ENOTIMP": {
        "count": 1,
        "size": 32
    },
    "ENOTINITIALIZED": {
        "count": 1,
        "size": 40
    },
    "ENOTSOCK": {
        "count": 1,
        "size": 32
    },
    "ENOTSUP": {
        "count": 1,
        "size": 32
    },
    "ENOTTY": {
        "count": 1,
        "size": 32
    },
    "ENXIO": {
        "count": 1,
        "size": 32
    },
    "EOF": {
        "count": 1,
        "size": 32
    },
    "EOL": {
        "count": 1,
        "size": 32
    },
    "EOPNOTSUPP": {
        "count": 1,
        "size": 40
    },
    "EOVERFLOW": {
        "count": 1,
        "size": 40
    },
    "EPERM": {
        "count": 1,
        "size": 32
    },
    "EPIPE": {
        "count": 1,
        "size": 32
    },
    "EPROTO": {
        "count": 1,
        "size": 32
    },
    "EPROTONOSUPPORT": {
        "count": 1,
        "size": 40
    },
    "EPROTOTYPE": {
        "count": 1,
        "size": 40
    },
    "EPSILON": {
        "count": 1,
        "size": 32
    },
    "EQUALS": {
        "count": 3,
        "size": 248
    },
    "ERANGE": {
        "count": 1,
        "size": 32
    },
    "EREFUSED": {
        "count": 1,
        "size": 32
    },
    "EROFS": {
        "count": 1,
        "size": 32
    },
    "ERROR": {
        "count": 1,
        "size": 32
    },
    "ESERVFAIL": {
        "count": 1,
        "size": 40
    },
    "ESPIPE": {
        "count": 1,
        "size": 32
    },
    "ESRCH": {
        "count": 1,
        "size": 32
    },
    "ESTALE": {
        "count": 1,
        "size": 32
    },
    "ETIME": {
        "count": 1,
        "size": 32
    },
    "ETIMEDOUT": {
        "count": 1,
        "size": 40
    },
    "ETIMEOUT": {
        "count": 1,
        "size": 32
    },
    "ETXTBSY": {
        "count": 1,
        "size": 32
    },
    "EWOULDBLOCK": {
        "count": 1,
        "size": 40
    },
    "EXDEV": {
        "count": 1,
        "size": 32
    },
    "EXPOSE_INTERNALS": {
        "count": 1,
        "size": 40
    },
    "Encode": {
        "count": 3,
        "size": 248
    },
    "EncryptedStream": {
        "count": 3,
        "size": 256
    },
    "EndPerformSplice": {
        "count": 3,
        "size": 256
    },
    "EnqueueMicrotask": {
        "count": 1,
        "size": 40
    },
    "EnqueueSpliceRecord": {
        "count": 3,
        "size": 264
    },
    "Error": {
        "count": 9,
        "size": 872
    },
    "Error parsing ": {
        "count": 1,
        "size": 40
    },
    "Error.prototype.toString": {
        "count": 1,
        "size": 48
    },
    "ErrorCodes": {
        "count": 1,
        "size": 40
    },
    "ErrorToString": {
        "count": 1,
        "size": 40
    },
    "ErrorToStringDetectCycle": {
        "count": 3,
        "size": 264
    },
    "EstimateNumberOfElements": {
        "count": 1,
        "size": 48
    },
    "EvalError": {
        "count": 3,
        "size": 256
    },
    "EventEmitter": {
        "count": 11,
        "size": 1088
    },
    "ExecuteInDebugContext": {
        "count": 1,
        "size": 48
    },
    "ExpandReplacement": {
        "count": 3,
        "size": 264
    },
    "Expectation Failed": {
        "count": 1,
        "size": 48
    },
    "Expected a function": {
        "count": 1,
        "size": 48
    },
    "Export": {
        "count": 2,
        "size": 176
    },
    "Extensions": {
        "count": 1,
        "size": 40
    },
    "F": {
        "count": 2,
        "size": 176
    },
    "FILE": {
        "count": 1,
        "size": 32
    },
    "FORMERR": {
        "count": 1,
        "size": 32
    },
    "FSEvent": {
        "count": 3,
        "size": 248
    },
    "FSInitialize": {
        "count": 1,
        "size": 40
    },
    "FSReqWrap": {
        "count": 4,
        "size": 296
    },
    "FSWatcher": {
        "count": 5,
        "size": 472
    },
    "FULL": {
        "count": 1,
        "size": 32
    },
    "FULLPLAIN": {
        "count": 1,
        "size": 40
    },
    "FUNC_ERROR_TEXT": {
        "count": 1,
        "size": 40
    },
    "F_OK": {
        "count": 1,
        "size": 32
    },
    "Failed Dependency": {
        "count": 1,
        "size": 48
    },
    "Failed to load backend: ": {
        "count": 1,
        "size": 48
    },
    "Failed to load server: ": {
        "count": 1,
        "size": 48
    },
    "FastOneByteArrayJoin": {
        "count": 1,
        "size": 48
    },
    "Feb": {
        "count": 1,
        "size": 32
    },
    "February": {
        "count": 1,
        "size": 32
    },
    "Field": {
        "count": 1,
        "size": 32
    },
    "FileReadStream": {
        "count": 1,
        "size": 40
    },
    "FileWriteStream": {
        "count": 1,
        "size": 40
    },
    "FilesField": {
        "count": 1,
        "size": 40
    },
    "FinalizeInstanceSize": {
        "count": 1,
        "size": 48
    },
    "FinishArrayPrototypeSetup": {
        "count": 1,
        "size": 56
    },
    "Fix": {
        "count": 1,
        "size": 32
    },
    "FixedArrayGet": {
        "count": 1,
        "size": 40
    },
    "FixedArraySet": {
        "count": 1,
        "size": 40
    },
    "FlattenString": {
        "count": 1,
        "size": 40
    },
    "Float32Array": {
        "count": 3,
        "size": 256
    },
    "Float32ArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 280
    },
    "Float32ArrayConstructByArrayLike": {
        "count": 3,
        "size": 272
    },
    "Float32ArrayConstructByIterable": {
        "count": 3,
        "size": 272
    },
    "Float32ArrayConstructByLength": {
        "count": 3,
        "size": 272
    },
    "Float32ArrayConstructor": {
        "count": 2,
        "size": 192
    },
    "Float32ArraySubArray": {
        "count": 1,
        "size": 48
    },
    "Float32Array_GetBuffer": {
        "count": 1,
        "size": 48
    },
    "Float32Array_GetByteLength": {
        "count": 1,
        "size": 56
    },
    "Float32Array_GetByteOffset": {
        "count": 1,
        "size": 56
    },
    "Float32Array_GetLength": {
        "count": 1,
        "size": 48
    },
    "Float64Array": {
        "count": 5,
        "size": 416
    },
    "Float64ArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 280
    },
    "Float64ArrayConstructByArrayLike": {
        "count": 3,
        "size": 272
    },
    "Float64ArrayConstructByIterable": {
        "count": 3,
        "size": 272
    },
    "Float64ArrayConstructByLength": {
        "count": 3,
        "size": 272
    },
    "Float64ArrayConstructor": {
        "count": 2,
        "size": 192
    },
    "Float64ArraySubArray": {
        "count": 1,
        "size": 48
    },
    "Float64Array_GetBuffer": {
        "count": 1,
        "size": 48
    },
    "Float64Array_GetByteLength": {
        "count": 1,
        "size": 56
    },
    "Float64Array_GetByteOffset": {
        "count": 1,
        "size": 56
    },
    "Float64Array_GetLength": {
        "count": 1,
        "size": 48
    },
    "ForInDone": {
        "count": 1,
        "size": 40
    },
    "ForInFilter": {
        "count": 1,
        "size": 40
    },
    "ForInNext": {
        "count": 1,
        "size": 40
    },
    "ForInStep": {
        "count": 1,
        "size": 40
    },
    "Forbidden": {
        "count": 1,
        "size": 40
    },
    "FormatErrorString": {
        "count": 3,
        "size": 264
    },
    "FormatEvalOrigin": {
        "count": 3,
        "size": 256
    },
    "FormatMessage": {
        "count": 3,
        "size": 256
    },
    "FormatMessageString": {
        "count": 1,
        "size": 48
    },
    "FormatStackTrace": {
        "count": 3,
        "size": 256
    },
    "Found": {
        "count": 1,
        "size": 32
    },
    "Fr": {
        "count": 1,
        "size": 32
    },
    "FreeList": {
        "count": 1,
        "size": 32
    },
    "Fri": {
        "count": 1,
        "size": 32
    },
    "Friday": {
        "count": 1,
        "size": 32
    },
    "FromGenericPropertyDescriptor": {
        "count": 3,
        "size": 272
    },
    "FromPropertyDescriptor": {
        "count": 3,
        "size": 264
    },
    "FullYear": {
        "count": 1,
        "size": 32
    },
    "Function": {
        "count": 3,
        "size": 248
    },
    "Function.prototype.apply": {
        "count": 1,
        "size": 48
    },
    "Function.prototype.toString": {
        "count": 1,
        "size": 56
    },
    "FunctionBind": {
        "count": 1,
        "size": 40
    },
    "FunctionBindArguments": {
        "count": 1,
        "size": 48
    },
    "FunctionConstructor": {
        "count": 3,
        "size": 264
    },
    "FunctionGetInferredName": {
        "count": 1,
        "size": 48
    },
    "FunctionGetName": {
        "count": 1,
        "size": 40
    },
    "FunctionGetPositionForOffset": {
        "count": 1,
        "size": 56
    },
    "FunctionGetScript": {
        "count": 1,
        "size": 48
    },
    "FunctionGetScriptSourcePosition": {
        "count": 1,
        "size": 56
    },
    "FunctionGetSourceCode": {
        "count": 1,
        "size": 48
    },
    "FunctionIsAPIFunction": {
        "count": 1,
        "size": 48
    },
    "FunctionIsArrow": {
        "count": 1,
        "size": 40
    },
    "FunctionIsBuiltin": {
        "count": 1,
        "size": 48
    },
    "FunctionIsConciseMethod": {
        "count": 1,
        "size": 48
    },
    "FunctionIsGenerator": {
        "count": 1,
        "size": 48
    },
    "FunctionMarkNameShouldPrintAsAnonymous": {
        "count": 1,
        "size": 64
    },
    "FunctionNameShouldPrintAsAnonymous": {
        "count": 1,
        "size": 64
    },
    "FunctionRemovePrototype": {
        "count": 1,
        "size": 48
    },
    "FunctionSetInstanceClassName": {
        "count": 1,
        "size": 56
    },
    "FunctionSetLength": {
        "count": 1,
        "size": 48
    },
    "FunctionSetName": {
        "count": 1,
        "size": 40
    },
    "FunctionSetPrototype": {
        "count": 1,
        "size": 48
    },
    "FunctionSourceString": {
        "count": 3,
        "size": 264
    },
    "FunctionToString": {
        "count": 1,
        "size": 40
    },
    "G": {
        "count": 1,
        "size": 32
    },
    "GET": {
        "count": 1,
        "size": 32
    },
    "GFS": {
        "count": 2,
        "size": 64
    },
    "GFS4": {
        "count": 2,
        "size": 64
    },
    "GG": {
        "count": 1,
        "size": 32
    },
    "GGGG": {
        "count": 1,
        "size": 32
    },
    "GGGG-[W]WW": {
        "count": 1,
        "size": 40
    },
    "GGGG-[W]WW-E": {
        "count": 1,
        "size": 40
    },
    "GGGGG": {
        "count": 1,
        "size": 32
    },
    "GGGG[W]WW": {
        "count": 1,
        "size": 40
    },
    "GGGG[W]WWE": {
        "count": 1,
        "size": 40
    },
    "GLOBAL": {
        "count": 1,
        "size": 32
    },
    "GLOBSTAR": {
        "count": 1,
        "size": 32
    },
    "GTLT": {
        "count": 1,
        "size": 32
    },
    "GUNZIP": {
        "count": 1,
        "size": 32
    },
    "GZIP": {
        "count": 1,
        "size": 32
    },
    "Gateway Timeout": {
        "count": 1,
        "size": 40
    },
    "Generator": {
        "count": 1,
        "size": 40
    },
    "GeneratorClose": {
        "count": 1,
        "size": 40
    },
    "GeneratorFunction": {
        "count": 3,
        "size": 264
    },
    "GeneratorFunctionConstructor": {
        "count": 3,
        "size": 272
    },
    "GeneratorFunctionPrototype": {
        "count": 1,
        "size": 56
    },
    "GeneratorGetContext": {
        "count": 1,
        "size": 48
    },
    "GeneratorGetContinuation": {
        "count": 1,
        "size": 48
    },
    "GeneratorGetFunction": {
        "count": 1,
        "size": 48
    },
    "GeneratorGetReceiver": {
        "count": 1,
        "size": 48
    },
    "GeneratorGetSourcePosition": {
        "count": 1,
        "size": 56
    },
    "GeneratorNext": {
        "count": 1,
        "size": 40
    },
    "GeneratorObjectNext": {
        "count": 1,
        "size": 48
    },
    "GeneratorObjectThrow": {
        "count": 1,
        "size": 48
    },
    "GeneratorThrow": {
        "count": 1,
        "size": 40
    },
    "GenericHash": {
        "count": 1,
        "size": 40
    },
    "GetAddrInfoReqWrap": {
        "count": 4,
        "size": 312
    },
    "GetAllScopesDetails": {
        "count": 1,
        "size": 48
    },
    "GetAnyExtensionRE": {
        "count": 3,
        "size": 264
    },
    "GetArgumentsProperty": {
        "count": 1,
        "size": 48
    },
    "GetArrayKeys": {
        "count": 1,
        "size": 40
    },
    "GetBreakLocations": {
        "count": 1,
        "size": 48
    },
    "GetCachedArrayIndex": {
        "count": 1,
        "size": 48
    },
    "GetCachedCallSite": {
        "count": 3,
        "size": 264
    },
    "GetCallTrap": {
        "count": 1,
        "size": 40
    },
    "GetCallerJSFunction": {
        "count": 1,
        "size": 48
    },
    "GetConstructTrap": {
        "count": 1,
        "size": 40
    },
    "GetConstructorDelegate": {
        "count": 1,
        "size": 48
    },
    "GetDataProperty": {
        "count": 1,
        "size": 40
    },
    "GetDebugContext": {
        "count": 1,
        "size": 40
    },
    "GetDefaultICULocale": {
        "count": 1,
        "size": 48
    },
    "GetExistingHash": {
        "count": 3,
        "size": 256
    },
    "GetFrameCount": {
        "count": 1,
        "size": 40
    },
    "GetFrameDetails": {
        "count": 1,
        "size": 40
    },
    "GetFromCache": {
        "count": 1,
        "size": 40
    },
    "GetFromCacheRT": {
        "count": 1,
        "size": 40
    },
    "GetFunctionCodePositionFromSource": {
        "count": 1,
        "size": 64
    },
    "GetFunctionDelegate": {
        "count": 1,
        "size": 48
    },
    "GetFunctionScopeCount": {
        "count": 1,
        "size": 48
    },
    "GetFunctionScopeDetails": {
        "count": 1,
        "size": 48
    },
    "GetHandler": {
        "count": 1,
        "size": 40
    },
    "GetHash": {
        "count": 3,
        "size": 248
    },
    "GetHeapUsage": {
        "count": 1,
        "size": 40
    },
    "GetImplFromInitializedIntlObject": {
        "count": 1,
        "size": 56
    },
    "GetIndexedInterceptorElementNames": {
        "count": 1,
        "size": 64
    },
    "GetInterceptorInfo": {
        "count": 1,
        "size": 48
    },
    "GetIterator": {
        "count": 3,
        "size": 256
    },
    "GetLanguageSingletonRE": {
        "count": 3,
        "size": 264
    },
    "GetLanguageTagRE": {
        "count": 3,
        "size": 256
    },
    "GetLanguageTagVariants": {
        "count": 1,
        "size": 48
    },
    "GetLanguageVariantRE": {
        "count": 3,
        "size": 264
    },
    "GetLineNumber": {
        "count": 3,
        "size": 256
    },
    "GetMethod": {
        "count": 3,
        "size": 256
    },
    "GetNameInfoReqWrap": {
        "count": 4,
        "size": 312
    },
    "GetNamedInterceptorPropertyNames": {
        "count": 1,
        "size": 56
    },
    "GetNextCallbackPriority": {
        "count": 3,
        "size": 264
    },
    "GetObjectContextNotifierPerformChange": {
        "count": 1,
        "size": 64
    },
    "GetObjectContextObjectGetNotifier": {
        "count": 1,
        "size": 64
    },
    "GetObjectContextObjectObserve": {
        "count": 1,
        "size": 56
    },
    "GetObservationState": {
        "count": 1,
        "size": 48
    },
    "GetObservationStateJS": {
        "count": 3,
        "size": 264
    },
    "GetOptimizationCount": {
        "count": 1,
        "size": 48
    },
    "GetOptimizationStatus": {
        "count": 1,
        "size": 48
    },
    "GetOriginalConstructor": {
        "count": 1,
        "size": 48
    },
    "GetOwnElementNames": {
        "count": 1,
        "size": 48
    },
    "GetOwnEnumerablePropertyNames": {
        "count": 3,
        "size": 272
    },
    "GetOwnProperty": {
        "count": 1,
        "size": 40
    },
    "GetOwnPropertyJS": {
        "count": 3,
        "size": 256
    },
    "GetOwnPropertyNames": {
        "count": 1,
        "size": 48
    },
    "GetPendingObservers": {
        "count": 3,
        "size": 264
    },
    "GetPositionInLine": {
        "count": 3,
        "size": 264
    },
    "GetProperty": {
        "count": 1,
        "size": 40
    },
    "GetPropertyNames": {
        "count": 1,
        "size": 40
    },
    "GetPropertyNamesFast": {
        "count": 1,
        "size": 48
    },
    "GetPropertyStrong": {
        "count": 1,
        "size": 48
    },
    "GetPropertyWithoutInvokingMonkeyGetters": {
        "count": 3,
        "size": 280
    },
    "GetPrototype": {
        "count": 1,
        "size": 40
    },
    "GetQuotedStringRE": {
        "count": 3,
        "size": 264
    },
    "GetRootNaN": {
        "count": 1,
        "size": 40
    },
    "GetScopeCount": {
        "count": 1,
        "size": 40
    },
    "GetScopeDetails": {
        "count": 1,
        "size": 40
    },
    "GetScript": {
        "count": 1,
        "size": 40
    },
    "GetServiceRE": {
        "count": 3,
        "size": 256
    },
    "GetSortedArrayKeys": {
        "count": 3,
        "size": 264
    },
    "GetSourceLine": {
        "count": 3,
        "size": 256
    },
    "GetStackFrames": {
        "count": 3,
        "size": 256
    },
    "GetStackTraceLine": {
        "count": 3,
        "size": 264
    },
    "GetStepInPositions": {
        "count": 1,
        "size": 48
    },
    "GetThreadCount": {
        "count": 1,
        "size": 40
    },
    "GetThreadDetails": {
        "count": 1,
        "size": 40
    },
    "GetTimezoneNameCheckRE": {
        "count": 3,
        "size": 264
    },
    "GetTrap": {
        "count": 3,
        "size": 248
    },
    "GetTypeFeedbackVector": {
        "count": 1,
        "size": 48
    },
    "GetTypeName": {
        "count": 3,
        "size": 256
    },
    "GetUndetectable": {
        "count": 1,
        "size": 40
    },
    "GetUnicodeExtensionRE": {
        "count": 3,
        "size": 264
    },
    "GetV8Version": {
        "count": 1,
        "size": 40
    },
    "GetWeakMapEntries": {
        "count": 1,
        "size": 48
    },
    "GetWeakSetValues": {
        "count": 1,
        "size": 40
    },
    "Glob": {
        "count": 3,
        "size": 248
    },
    "Glob._finish": {
        "count": 1,
        "size": 40
    },
    "Glob._mark": {
        "count": 1,
        "size": 40
    },
    "Glob._stat": {
        "count": 1,
        "size": 40
    },
    "Glob._stat2": {
        "count": 1,
        "size": 40
    },
    "Glob.abort": {
        "count": 1,
        "size": 40
    },
    "Glob.pause": {
        "count": 1,
        "size": 40
    },
    "Glob.resume": {
        "count": 1,
        "size": 40
    },
    "GlobSync": {
        "count": 3,
        "size": 248
    },
    "GlobalEval": {
        "count": 1,
        "size": 40
    },
    "GlobalIsFinite": {
        "count": 1,
        "size": 40
    },
    "GlobalIsNaN": {
        "count": 1,
        "size": 40
    },
    "GlobalParseFloat": {
        "count": 1,
        "size": 40
    },
    "GlobalParseInt": {
        "count": 1,
        "size": 40
    },
    "GlobalPrint": {
        "count": 1,
        "size": 40
    },
    "GlobalProxy": {
        "count": 1,
        "size": 40
    },
    "Gone": {
        "count": 1,
        "size": 32
    },
    "GrowArrayElements": {
        "count": 1,
        "size": 48
    },
    "Gunzip": {
        "count": 3,
        "size": 248
    },
    "Gzip": {
        "count": 3,
        "size": 248
    },
    "H": {
        "count": 1,
        "size": 32
    },
    "HALF_MAX_ARRAY_LENGTH": {
        "count": 1,
        "size": 48
    },
    "HEAD": {
        "count": 1,
        "size": 32
    },
    "HELP": {
        "count": 1,
        "size": 32
    },
    "HH": {
        "count": 1,
        "size": 32
    },
    "HH:mm": {
        "count": 1,
        "size": 32
    },
    "HH:mm:ss": {
        "count": 1,
        "size": 32
    },
    "HH:mm:ss,SSSS": {
        "count": 1,
        "size": 40
    },
    "HH:mm:ss.SSSS": {
        "count": 1,
        "size": 40
    },
    "HHmm": {
        "count": 1,
        "size": 32
    },
    "HHmmss": {
        "count": 1,
        "size": 32
    },
    "HHmmss,SSSS": {
        "count": 1,
        "size": 40
    },
    "HHmmss.SSSS": {
        "count": 1,
        "size": 40
    },
    "HOME": {
        "count": 1,
        "size": 32
    },
    "HOT_COUNT": {
        "count": 1,
        "size": 40
    },
    "HOT_SPAN": {
        "count": 1,
        "size": 32
    },
    "HOUR": {
        "count": 1,
        "size": 32
    },
    "HTTP": {
        "count": 2,
        "size": 64
    },
    "HTTP Version Not Supported": {
        "count": 1,
        "size": 56
    },
    "HTTPParser": {
        "count": 4,
        "size": 296
    },
    "HTTPS": {
        "count": 2,
        "size": 64
    },
    "HYPHENRANGE": {
        "count": 1,
        "size": 40
    },
    "HYPHENRANGELOOSE": {
        "count": 1,
        "size": 40
    },
    "HandleStepInForDerivedConstructors": {
        "count": 1,
        "size": 64
    },
    "HarmonyToString": {
        "count": 1,
        "size": 40
    },
    "HasCachedArrayIndex": {
        "count": 1,
        "size": 48
    },
    "HasComplexElements": {
        "count": 1,
        "size": 48
    },
    "HasDictionaryElements": {
        "count": 1,
        "size": 48
    },
    "HasElement": {
        "count": 1,
        "size": 40
    },
    "HasExternalArrayElements": {
        "count": 1,
        "size": 48
    },
    "HasExternalFloat32Elements": {
        "count": 1,
        "size": 56
    },
    "HasExternalFloat64Elements": {
        "count": 1,
        "size": 56
    },
    "HasExternalInt16Elements": {
        "count": 1,
        "size": 48
    },
    "HasExternalInt32Elements": {
        "count": 1,
        "size": 48
    },
    "HasExternalInt8Elements": {
        "count": 1,
        "size": 48
    },
    "HasExternalUint16Elements": {
        "count": 1,
        "size": 56
    },
    "HasExternalUint32Elements": {
        "count": 1,
        "size": 56
    },
    "HasExternalUint8ClampedElements": {
        "count": 1,
        "size": 56
    },
    "HasExternalUint8Elements": {
        "count": 1,
        "size": 48
    },
    "HasFastDoubleElements": {
        "count": 1,
        "size": 48
    },
    "HasFastHoleyElements": {
        "count": 1,
        "size": 48
    },
    "HasFastObjectElements": {
        "count": 1,
        "size": 48
    },
    "HasFastPackedElements": {
        "count": 1,
        "size": 48
    },
    "HasFastProperties": {
        "count": 1,
        "size": 48
    },
    "HasFastSmiElements": {
        "count": 1,
        "size": 48
    },
    "HasFastSmiOrObjectElements": {
        "count": 1,
        "size": 56
    },
    "HasFixedFloat32Elements": {
        "count": 1,
        "size": 48
    },
    "HasFixedFloat64Elements": {
        "count": 1,
        "size": 48
    },
    "HasFixedInt16Elements": {
        "count": 1,
        "size": 48
    },
    "HasFixedInt32Elements": {
        "count": 1,
        "size": 48
    },
    "HasFixedInt8Elements": {
        "count": 1,
        "size": 48
    },
    "HasFixedUint16Elements": {
        "count": 1,
        "size": 48
    },
    "HasFixedUint32Elements": {
        "count": 1,
        "size": 48
    },
    "HasFixedUint8ClampedElements": {
        "count": 1,
        "size": 56
    },
    "HasFixedUint8Elements": {
        "count": 1,
        "size": 48
    },
    "HasOwnProperty": {
        "count": 1,
        "size": 40
    },
    "HasProperty": {
        "count": 1,
        "size": 40
    },
    "HasSloppyArgumentsElements": {
        "count": 1,
        "size": 56
    },
    "Hash": {
        "count": 3,
        "size": 248
    },
    "Hash._flush": {
        "count": 1,
        "size": 40
    },
    "Hash.digest": {
        "count": 1,
        "size": 40
    },
    "Hash.update": {
        "count": 1,
        "size": 40
    },
    "HashToEntry": {
        "count": 3,
        "size": 256
    },
    "HaveSameMap": {
        "count": 1,
        "size": 40
    },
    "Heap snapshot": {
        "count": 1,
        "size": 40
    },
    "HeapObjectGetMap": {
        "count": 1,
        "size": 40
    },
    "HexValueOf": {
        "count": 3,
        "size": 256
    },
    "Hmac": {
        "count": 3,
        "size": 248
    },
    "Hmm": {
        "count": 1,
        "size": 32
    },
    "Hmmss": {
        "count": 1,
        "size": 32
    },
    "HomeObjectSymbol": {
        "count": 1,
        "size": 40
    },
    "Homepage": {
        "count": 1,
        "size": 32
    },
    "Hours": {
        "count": 1,
        "size": 32
    },
    "HtmlEscape": {
        "count": 3,
        "size": 256
    },
    "HttpProbe": {
        "count": 4,
        "size": 352
    },
    "I": {
        "count": 1,
        "size": 32
    },
    "I'm a teapot": {
        "count": 1,
        "size": 40
    },
    "IM Used": {
        "count": 1,
        "size": 32
    },
    "IN": {
        "count": 3,
        "size": 248
    },
    "INFLATE": {
        "count": 1,
        "size": 32
    },
    "INFLATERAW": {
        "count": 1,
        "size": 40
    },
    "INFO": {
        "count": 1,
        "size": 32
    },
    "INSPECT_MAX_BYTES": {
        "count": 1,
        "size": 48
    },
    "INSTANCE_OF": {
        "count": 3,
        "size": 256
    },
    "INTERNAL_PREFIX": {
        "count": 1,
        "size": 40
    },
    "INVALID": {
        "count": 1,
        "size": 32
    },
    "IPv4": {
        "count": 1,
        "size": 32
    },
    "IPv6": {
        "count": 1,
        "size": 32
    },
    "ISO_8601": {
        "count": 1,
        "size": 32
    },
    "IS_VAR": {
        "count": 1,
        "size": 32
    },
    "Illegal input >= 0x80 (not a basic code point)": {
        "count": 1,
        "size": 72
    },
    "Immediate": {
        "count": 3,
        "size": 256
    },
    "Implement me. Unknown stream file type!": {
        "count": 1,
        "size": 64
    },
    "Import": {
        "count": 2,
        "size": 176
    },
    "ImportFromExperimental": {
        "count": 2,
        "size": 192
    },
    "IncomingMessage": {
        "count": 3,
        "size": 256
    },
    "Incorrect value for stdio stream: ": {
        "count": 1,
        "size": 64
    },
    "Incorrect value of args option": {
        "count": 1,
        "size": 56
    },
    "Incorrect value of stdio option: ": {
        "count": 1,
        "size": 64
    },
    "IncrementStatsCounter": {
        "count": 1,
        "size": 48
    },
    "Infinity": {
        "count": 1,
        "size": 32
    },
    "Inflate": {
        "count": 3,
        "size": 248
    },
    "InflateRaw": {
        "count": 3,
        "size": 256
    },
    "InitializeConstGlobal": {
        "count": 1,
        "size": 48
    },
    "InitializeLegacyConstLookupSlot": {
        "count": 1,
        "size": 56
    },
    "InitializeVarGlobal": {
        "count": 1,
        "size": 48
    },
    "InnerArrayCopyWithin": {
        "count": 3,
        "size": 264
    },
    "InnerArrayEvery": {
        "count": 3,
        "size": 256
    },
    "InnerArrayFill": {
        "count": 3,
        "size": 256
    },
    "InnerArrayFilter": {
        "count": 3,
        "size": 256
    },
    "InnerArrayFind": {
        "count": 3,
        "size": 256
    },
    "InnerArrayFindIndex": {
        "count": 3,
        "size": 264
    },
    "InnerArrayForEach": {
        "count": 3,
        "size": 264
    },
    "InnerArrayIndexOf": {
        "count": 3,
        "size": 264
    },
    "InnerArrayJoin": {
        "count": 3,
        "size": 256
    },
    "InnerArrayLastIndexOf": {
        "count": 3,
        "size": 264
    },
    "InnerArrayMap": {
        "count": 3,
        "size": 256
    },
    "InnerArrayReduce": {
        "count": 3,
        "size": 256
    },
    "InnerArrayReduceRight": {
        "count": 3,
        "size": 264
    },
    "InnerArrayReverse": {
        "count": 3,
        "size": 264
    },
    "InnerArraySome": {
        "count": 3,
        "size": 256
    },
    "InnerArraySort": {
        "count": 3,
        "size": 256
    },
    "InnerArrayToLocaleString": {
        "count": 3,
        "size": 264
    },
    "InsertionSort": {
        "count": 2,
        "size": 184
    },
    "InstallConstants": {
        "count": 2,
        "size": 184
    },
    "InstallFunctions": {
        "count": 2,
        "size": 184
    },
    "InstallGetter": {
        "count": 2,
        "size": 184
    },
    "InstallGetterSetter": {
        "count": 2,
        "size": 192
    },
    "Insufficient Storage": {
        "count": 1,
        "size": 48
    },
    "Int16Array": {
        "count": 3,
        "size": 256
    },
    "Int16ArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 272
    },
    "Int16ArrayConstructByArrayLike": {
        "count": 3,
        "size": 272
    },
    "Int16ArrayConstructByIterable": {
        "count": 3,
        "size": 272
    },
    "Int16ArrayConstructByLength": {
        "count": 3,
        "size": 272
    },
    "Int16ArrayConstructor": {
        "count": 2,
        "size": 192
    },
    "Int16ArraySubArray": {
        "count": 1,
        "size": 48
    },
    "Int16Array_GetBuffer": {
        "count": 1,
        "size": 48
    },
    "Int16Array_GetByteLength": {
        "count": 1,
        "size": 48
    },
    "Int16Array_GetByteOffset": {
        "count": 1,
        "size": 48
    },
    "Int16Array_GetLength": {
        "count": 1,
        "size": 48
    },
    "Int32Array": {
        "count": 3,
        "size": 256
    },
    "Int32ArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 272
    },
    "Int32ArrayConstructByArrayLike": {
        "count": 3,
        "size": 272
    },
    "Int32ArrayConstructByIterable": {
        "count": 3,
        "size": 272
    },
    "Int32ArrayConstructByLength": {
        "count": 3,
        "size": 272
    },
    "Int32ArrayConstructor": {
        "count": 2,
        "size": 192
    },
    "Int32ArraySubArray": {
        "count": 1,
        "size": 48
    },
    "Int32Array_GetBuffer": {
        "count": 1,
        "size": 48
    },
    "Int32Array_GetByteLength": {
        "count": 1,
        "size": 48
    },
    "Int32Array_GetByteOffset": {
        "count": 1,
        "size": 48
    },
    "Int32Array_GetLength": {
        "count": 1,
        "size": 48
    },
    "Int8Array": {
        "count": 3,
        "size": 256
    },
    "Int8ArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 272
    },
    "Int8ArrayConstructByArrayLike": {
        "count": 3,
        "size": 272
    },
    "Int8ArrayConstructByIterable": {
        "count": 3,
        "size": 272
    },
    "Int8ArrayConstructByLength": {
        "count": 3,
        "size": 272
    },
    "Int8ArrayConstructor": {
        "count": 2,
        "size": 192
    },
    "Int8ArraySubArray": {
        "count": 1,
        "size": 48
    },
    "Int8Array_GetBuffer": {
        "count": 1,
        "size": 48
    },
    "Int8Array_GetByteLength": {
        "count": 1,
        "size": 48
    },
    "Int8Array_GetByteOffset": {
        "count": 1,
        "size": 48
    },
    "Int8Array_GetLength": {
        "count": 1,
        "size": 48
    },
    "IntRandom": {
        "count": 1,
        "size": 40
    },
    "Internal Server Error": {
        "count": 1,
        "size": 48
    },
    "InternalArray": {
        "count": 7,
        "size": 384
    },
    "InternalArrayConstructor": {
        "count": 1,
        "size": 48
    },
    "InternalBackend": {
        "count": 3,
        "size": 256
    },
    "InternalCompare": {
        "count": 1,
        "size": 40
    },
    "InternalDateFormat": {
        "count": 1,
        "size": 48
    },
    "InternalDateParse": {
        "count": 1,
        "size": 48
    },
    "InternalFieldObject": {
        "count": 1,
        "size": 48
    },
    "InternalNumberFormat": {
        "count": 1,
        "size": 48
    },
    "InternalNumberParse": {
        "count": 1,
        "size": 48
    },
    "InternalPackedArray": {
        "count": 5,
        "size": 328
    },
    "InternalSetPrototype": {
        "count": 1,
        "size": 48
    },
    "InternalizeString": {
        "count": 1,
        "size": 48
    },
    "Interrupt": {
        "count": 1,
        "size": 40
    },
    "Intl": {
        "count": 1,
        "size": 32
    },
    "Invalid 'bundleDependencies' list. Must be array of package names": {
        "count": 1,
        "size": 96
    },
    "Invalid 'files' member": {
        "count": 1,
        "size": 48
    },
    "Invalid SNI context": {
        "count": 1,
        "size": 48
    },
    "Invalid app (%s), try `%s --help`.\n": {
        "count": 1,
        "size": 64
    },
    "Invalid bundleDependencies member: %s": {
        "count": 1,
        "size": 64
    },
    "Invalid date": {
        "count": 1,
        "size": 40
    },
    "Invalid dependency: %s %s": {
        "count": 1,
        "size": 56
    },
    "Invalid filename in 'files' list: %s": {
        "count": 1,
        "size": 64
    },
    "Invalid input": {
        "count": 1,
        "size": 40
    },
    "Invalid listen argument: ": {
        "count": 1,
        "size": 56
    },
    "Invalid metrics endpoint `%s`: %s": {
        "count": 1,
        "size": 64
    },
    "Invalid non-string/buffer chunk": {
        "count": 1,
        "size": 56
    },
    "IpcServer": {
        "count": 4,
        "size": 360
    },
    "IsAccessCheckNeeded": {
        "count": 1,
        "size": 48
    },
    "IsAccessorDescriptor": {
        "count": 3,
        "size": 264
    },
    "IsArray": {
        "count": 1,
        "size": 32
    },
    "IsBreakOnException": {
        "count": 1,
        "size": 48
    },
    "IsConcatSpreadable": {
        "count": 2,
        "size": 192
    },
    "IsConcurrentRecompilationSupported": {
        "count": 1,
        "size": 64
    },
    "IsConstructCall": {
        "count": 1,
        "size": 40
    },
    "IsConstructor": {
        "count": 1,
        "size": 40
    },
    "IsDataDescriptor": {
        "count": 3,
        "size": 256
    },
    "IsDate": {
        "count": 1,
        "size": 32
    },
    "IsExtensible": {
        "count": 1,
        "size": 40
    },
    "IsFinite": {
        "count": 1,
        "size": 32
    },
    "IsFunction": {
        "count": 1,
        "size": 40
    },
    "IsGenericDescriptor": {
        "count": 3,
        "size": 264
    },
    "IsInPrototypeChain": {
        "count": 1,
        "size": 48
    },
    "IsInconsistentDescriptor": {
        "count": 3,
        "size": 264
    },
    "IsInitializedIntlObject": {
        "count": 1,
        "size": 48
    },
    "IsInitializedIntlObjectOfType": {
        "count": 1,
        "size": 56
    },
    "IsJSFunctionProxy": {
        "count": 1,
        "size": 48
    },
    "IsJSGlobalProxy": {
        "count": 1,
        "size": 40
    },
    "IsJSModule": {
        "count": 1,
        "size": 40
    },
    "IsJSProxy": {
        "count": 1,
        "size": 40
    },
    "IsMinusZero": {
        "count": 1,
        "size": 40
    },
    "IsNaN": {
        "count": 1,
        "size": 32
    },
    "IsNonNegativeSmi": {
        "count": 1,
        "size": 40
    },
    "IsObject": {
        "count": 1,
        "size": 32
    },
    "IsObserved": {
        "count": 1,
        "size": 40
    },
    "IsPrimitive": {
        "count": 3,
        "size": 256
    },
    "IsPromise": {
        "count": 3,
        "size": 256
    },
    "IsPropertyEnumerable": {
        "count": 1,
        "size": 48
    },
    "IsRegExp": {
        "count": 1,
        "size": 32
    },
    "IsSharedIntegerTypedArray": {
        "count": 1,
        "size": 56
    },
    "IsSharedTypedArray": {
        "count": 1,
        "size": 48
    },
    "IsSloppyModeFunction": {
        "count": 1,
        "size": 48
    },
    "IsSmi": {
        "count": 1,
        "size": 32
    },
    "IsSpecObject": {
        "count": 1,
        "size": 40
    },
    "IsStringWrapperSafeForDefaultValueOf": {
        "count": 1,
        "size": 64
    },
    "IsStrong": {
        "count": 1,
        "size": 32
    },
    "IsTypedArray": {
        "count": 1,
        "size": 40
    },
    "IsUndetectableObject": {
        "count": 1,
        "size": 48
    },
    "IsValidSmi": {
        "count": 1,
        "size": 40
    },
    "It would be larger than 0x": {
        "count": 1,
        "size": 56
    },
    "J": {
        "count": 1,
        "size": 32
    },
    "JSCollectionGetTable": {
        "count": 1,
        "size": 48
    },
    "JSON": {
        "count": 4,
        "size": 272
    },
    "JSONParse": {
        "count": 1,
        "size": 40
    },
    "JSONSerialize": {
        "count": 3,
        "size": 256
    },
    "JSONStringify": {
        "count": 1,
        "size": 40
    },
    "JSStream": {
        "count": 4,
        "size": 280
    },
    "JSValueGetValue": {
        "count": 1,
        "size": 40
    },
    "Jan": {
        "count": 1,
        "size": 32
    },
    "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec": {
        "count": 1,
        "size": 72
    },
    "January": {
        "count": 1,
        "size": 32
    },
    "January_February_March_April_May_June_July_August_September_October_November_December": {
        "count": 1,
        "size": 112
    },
    "Join": {
        "count": 3,
        "size": 248
    },
    "Jul": {
        "count": 1,
        "size": 32
    },
    "July": {
        "count": 1,
        "size": 32
    },
    "Jun": {
        "count": 1,
        "size": 32
    },
    "June": {
        "count": 1,
        "size": 32
    },
    "K": {
        "count": 1,
        "size": 32
    },
    "KernelTan": {
        "count": 3,
        "size": 256
    },
    "KeyedGetProperty": {
        "count": 1,
        "size": 40
    },
    "KeyedGetPropertyStrong": {
        "count": 1,
        "size": 48
    },
    "KeyedLoadMonomorphic": {
        "count": 1,
        "size": 48
    },
    "KeyedStoreMonomorphic": {
        "count": 1,
        "size": 48
    },
    "Keywords": {
        "count": 1,
        "size": 32
    },
    "L": {
        "count": 1,
        "size": 32
    },
    "LARGE_ARRAY_SIZE": {
        "count": 1,
        "size": 40
    },
    "LAZY_FILTER_FLAG": {
        "count": 1,
        "size": 40
    },
    "LAZY_MAP_FLAG": {
        "count": 1,
        "size": 40
    },
    "LL": {
        "count": 1,
        "size": 32
    },
    "LLL": {
        "count": 1,
        "size": 32
    },
    "LLLL": {
        "count": 1,
        "size": 32
    },
    "LN10": {
        "count": 1,
        "size": 32
    },
    "LN2": {
        "count": 1,
        "size": 32
    },
    "LOADIPHLPAPI": {
        "count": 1,
        "size": 40
    },
    "LOCK": {
        "count": 1,
        "size": 32
    },
    "LOG10E": {
        "count": 1,
        "size": 32
    },
    "LOG2E": {
        "count": 1,
        "size": 32
    },
    "LOG_INFO": {
        "count": 1,
        "size": 32
    },
    "LONECARET": {
        "count": 1,
        "size": 40
    },
    "LONETILDE": {
        "count": 1,
        "size": 40
    },
    "LOOSE": {
        "count": 1,
        "size": 32
    },
    "LOOSEPLAIN": {
        "count": 1,
        "size": 40
    },
    "LT": {
        "count": 1,
        "size": 32
    },
    "LTS": {
        "count": 1,
        "size": 32
    },
    "LazyTransform": {
        "count": 3,
        "size": 256
    },
    "LazyWrapper": {
        "count": 3,
        "size": 256
    },
    "Length Required": {
        "count": 1,
        "size": 40
    },
    "LevelLog": {
        "count": 3,
        "size": 248
    },
    "LeveldownProbe": {
        "count": 4,
        "size": 360
    },
    "Likely": {
        "count": 1,
        "size": 32
    },
    "LineStream": {
        "count": 8,
        "size": 816
    },
    "Linux": {
        "count": 1,
        "size": 32
    },
    "LiveEditCheckAndDropActivations": {
        "count": 1,
        "size": 56
    },
    "LiveEditCompareStrings": {
        "count": 1,
        "size": 48
    },
    "LiveEditFindSharedFunctionInfosForScript": {
        "count": 1,
        "size": 64
    },
    "LiveEditFunctionSetScript": {
        "count": 1,
        "size": 56
    },
    "LiveEditFunctionSourceUpdated": {
        "count": 1,
        "size": 56
    },
    "LiveEditGatherCompileInfo": {
        "count": 1,
        "size": 56
    },
    "LiveEditPatchFunctionPositions": {
        "count": 1,
        "size": 56
    },
    "LiveEditReplaceFunctionCode": {
        "count": 1,
        "size": 56
    },
    "LiveEditReplaceRefToNestedFunction": {
        "count": 1,
        "size": 64
    },
    "LiveEditReplaceScript": {
        "count": 1,
        "size": 48
    },
    "LiveEditRestartFrame": {
        "count": 1,
        "size": 48
    },
    "LoadFromSuper": {
        "count": 1,
        "size": 40
    },
    "LoadKeyedFromSuper": {
        "count": 1,
        "size": 48
    },
    "LoadLookupSlot": {
        "count": 1,
        "size": 40
    },
    "LoadLookupSlotNoReferenceError": {
        "count": 1,
        "size": 56
    },
    "LoadMutableDouble": {
        "count": 1,
        "size": 48
    },
    "LocalTimezone": {
        "count": 3,
        "size": 256
    },
    "LocalTimezoneString": {
        "count": 3,
        "size": 264
    },
    "Locale": {
        "count": 4,
        "size": 352
    },
    "Locked": {
        "count": 1,
        "size": 32
    },
    "LodashWrapper": {
        "count": 3,
        "size": 256
    },
    "Log": {
        "count": 5,
        "size": 440
    },
    "LogWriter": {
        "count": 3,
        "size": 256
    },
    "LogWriterReOpen": {
        "count": 3,
        "size": 256
    },
    "Logger": {
        "count": 6,
        "size": 560
    },
    "LongDateString": {
        "count": 3,
        "size": 256
    },
    "LookupAccessor": {
        "count": 1,
        "size": 40
    },
    "Loop Detected": {
        "count": 1,
        "size": 40
    },
    "M": {
        "count": 1,
        "size": 32
    },
    "M-SEARCH": {
        "count": 1,
        "size": 32
    },
    "MAINVERSION": {
        "count": 1,
        "size": 40
    },
    "MAINVERSIONLOOSE": {
        "count": 1,
        "size": 40
    },
    "MAX": {
        "count": 1,
        "size": 32
    },
    "MAX_ARRAY_INDEX": {
        "count": 1,
        "size": 40
    },
    "MAX_ARRAY_LENGTH": {
        "count": 1,
        "size": 40
    },
    "MAX_HWM": {
        "count": 1,
        "size": 32
    },
    "MAX_LENGTH": {
        "count": 1,
        "size": 40
    },
    "MAX_SAFE_INTEGER": {
        "count": 1,
        "size": 40
    },
    "MAX_VALUE": {
        "count": 1,
        "size": 40
    },
    "MERGE": {
        "count": 1,
        "size": 32
    },
    "METHODS": {
        "count": 1,
        "size": 32
    },
    "MILLISECOND": {
        "count": 1,
        "size": 40
    },
    "MINUTE": {
        "count": 1,
        "size": 32
    },
    "MIN_SAFE_INTEGER": {
        "count": 1,
        "size": 40
    },
    "MIN_VALUE": {
        "count": 1,
        "size": 40
    },
    "MKACTIVITY": {
        "count": 1,
        "size": 40
    },
    "MKCALENDAR": {
        "count": 1,
        "size": 40
    },
    "MKCOL": {
        "count": 1,
        "size": 32
    },
    "MM": {
        "count": 1,
        "size": 32
    },
    "MM/DD/YYYY": {
        "count": 1,
        "size": 40
    },
    "MMM": {
        "count": 1,
        "size": 32
    },
    "MMMM": {
        "count": 1,
        "size": 32
    },
    "MMMM D, YYYY": {
        "count": 1,
        "size": 40
    },
    "MMMM D, YYYY h:mm A": {
        "count": 1,
        "size": 48
    },
    "MOD": {
        "count": 3,
        "size": 248
    },
    "MODULE": {
        "count": 2,
        "size": 64
    },
    "MODULE_NOT_FOUND": {
        "count": 1,
        "size": 40
    },
    "MOD_STRONG": {
        "count": 3,
        "size": 256
    },
    "MONTH": {
        "count": 1,
        "size": 32
    },
    "MONTHS_IN_FORMAT": {
        "count": 1,
        "size": 40
    },
    "MOVE": {
        "count": 1,
        "size": 32
    },
    "MQLightProbe": {
        "count": 4,
        "size": 360
    },
    "MUL": {
        "count": 3,
        "size": 248
    },
    "MUL_STRONG": {
        "count": 3,
        "size": 256
    },
    "MX": {
        "count": 1,
        "size": 32
    },
    "MakeDate": {
        "count": 3,
        "size": 248
    },
    "MakeDay": {
        "count": 3,
        "size": 248
    },
    "MakeError": {
        "count": 1,
        "size": 40
    },
    "MakeEvalError": {
        "count": 1,
        "size": 40
    },
    "MakeGenericError": {
        "count": 3,
        "size": 256
    },
    "MakeRangeError": {
        "count": 1,
        "size": 40
    },
    "MakeReferenceError": {
        "count": 1,
        "size": 48
    },
    "MakeSyntaxError": {
        "count": 1,
        "size": 40
    },
    "MakeTime": {
        "count": 3,
        "size": 248
    },
    "MakeTypeError": {
        "count": 1,
        "size": 40
    },
    "MakeURIError": {
        "count": 1,
        "size": 40
    },
    "ManField": {
        "count": 1,
        "size": 32
    },
    "Map": {
        "count": 7,
        "size": 376
    },
    "Map Iterator": {
        "count": 1,
        "size": 40
    },
    "MapCache": {
        "count": 3,
        "size": 248
    },
    "MapClear": {
        "count": 1,
        "size": 32
    },
    "MapClearJS": {
        "count": 1,
        "size": 40
    },
    "MapConstructor": {
        "count": 2,
        "size": 184
    },
    "MapDelete": {
        "count": 1,
        "size": 40
    },
    "MapFindEntry": {
        "count": 3,
        "size": 256
    },
    "MapForEach": {
        "count": 1,
        "size": 40
    },
    "MapGet": {
        "count": 1,
        "size": 32
    },
    "MapGetInstanceType": {
        "count": 1,
        "size": 48
    },
    "MapGetSize": {
        "count": 1,
        "size": 40
    },
    "MapGrow": {
        "count": 1,
        "size": 32
    },
    "MapHas": {
        "count": 1,
        "size": 32
    },
    "MapInitialize": {
        "count": 1,
        "size": 40
    },
    "MapIterator": {
        "count": 3,
        "size": 256
    },
    "MapIteratorClone": {
        "count": 1,
        "size": 40
    },
    "MapIteratorDetails": {
        "count": 1,
        "size": 48
    },
    "MapIteratorInitialize": {
        "count": 1,
        "size": 48
    },
    "MapIteratorNext": {
        "count": 1,
        "size": 40
    },
    "MapSet": {
        "count": 1,
        "size": 32
    },
    "MapShrink": {
        "count": 1,
        "size": 40
    },
    "Mar": {
        "count": 1,
        "size": 32
    },
    "March": {
        "count": 1,
        "size": 32
    },
    "MarkAsInitializedIntlObjectOfType": {
        "count": 1,
        "size": 64
    },
    "MaterializeRegExpLiteral": {
        "count": 1,
        "size": 48
    },
    "Math": {
        "count": 1,
        "size": 32
    },
    "MathAbs": {
        "count": 1,
        "size": 32
    },
    "MathAcos": {
        "count": 1,
        "size": 32
    },
    "MathAcosJS": {
        "count": 1,
        "size": 40
    },
    "MathAcosh": {
        "count": 1,
        "size": 40
    },
    "MathAsin": {
        "count": 1,
        "size": 32
    },
    "MathAsinJS": {
        "count": 1,
        "size": 40
    },
    "MathAsinh": {
        "count": 1,
        "size": 40
    },
    "MathAtan": {
        "count": 1,
        "size": 32
    },
    "MathAtan2": {
        "count": 1,
        "size": 40
    },
    "MathAtan2JS": {
        "count": 1,
        "size": 40
    },
    "MathAtanJS": {
        "count": 1,
        "size": 40
    },
    "MathAtanh": {
        "count": 1,
        "size": 40
    },
    "MathCbrt": {
        "count": 1,
        "size": 32
    },
    "MathCeil": {
        "count": 1,
        "size": 32
    },
    "MathClz32": {
        "count": 1,
        "size": 40
    },
    "MathClz32JS": {
        "count": 1,
        "size": 40
    },
    "MathConstructor": {
        "count": 4,
        "size": 360
    },
    "MathCos": {
        "count": 1,
        "size": 32
    },
    "MathCosSlow": {
        "count": 3,
        "size": 256
    },
    "MathCosh": {
        "count": 1,
        "size": 32
    },
    "MathExp": {
        "count": 1,
        "size": 32
    },
    "MathExpRT": {
        "count": 1,
        "size": 40
    },
    "MathExpm1": {
        "count": 1,
        "size": 40
    },
    "MathFloor": {
        "count": 1,
        "size": 40
    },
    "MathFloorJS": {
        "count": 1,
        "size": 40
    },
    "MathFloorStub": {
        "count": 3,
        "size": 256
    },
    "MathFround": {
        "count": 1,
        "size": 40
    },
    "MathFroundJS": {
        "count": 1,
        "size": 40
    },
    "MathHypot": {
        "count": 1,
        "size": 40
    },
    "MathImul": {
        "count": 1,
        "size": 32
    },
    "MathLog": {
        "count": 1,
        "size": 32
    },
    "MathLog10": {
        "count": 1,
        "size": 40
    },
    "MathLog1p": {
        "count": 1,
        "size": 40
    },
    "MathLog2": {
        "count": 1,
        "size": 32
    },
    "MathLogRT": {
        "count": 1,
        "size": 40
    },
    "MathMax": {
        "count": 1,
        "size": 32
    },
    "MathMin": {
        "count": 1,
        "size": 32
    },
    "MathPow": {
        "count": 1,
        "size": 32
    },
    "MathPowJS": {
        "count": 1,
        "size": 40
    },
    "MathPowRT": {
        "count": 1,
        "size": 40
    },
    "MathPowSlow": {
        "count": 1,
        "size": 40
    },
    "MathRandom": {
        "count": 1,
        "size": 40
    },
    "MathRandomRaw": {
        "count": 3,
        "size": 256
    },
    "MathRound": {
        "count": 1,
        "size": 40
    },
    "MathSign": {
        "count": 1,
        "size": 32
    },
    "MathSin": {
        "count": 1,
        "size": 32
    },
    "MathSinSlow": {
        "count": 3,
        "size": 256
    },
    "MathSinh": {
        "count": 1,
        "size": 32
    },
    "MathSqrt": {
        "count": 1,
        "size": 32
    },
    "MathSqrtJS": {
        "count": 1,
        "size": 40
    },
    "MathTan": {
        "count": 1,
        "size": 32
    },
    "MathTanh": {
        "count": 1,
        "size": 32
    },
    "MathTrunc": {
        "count": 1,
        "size": 40
    },
    "MaxSmi": {
        "count": 1,
        "size": 32
    },
    "Maximum call stack size exceeded": {
        "count": 1,
        "size": 56
    },
    "May": {
        "count": 1,
        "size": 32
    },
    "MemcachedProbe": {
        "count": 4,
        "size": 360
    },
    "MessageEvent": {
        "count": 3,
        "size": 256
    },
    "MessageGetScript": {
        "count": 1,
        "size": 40
    },
    "MessageGetStartPosition": {
        "count": 1,
        "size": 48
    },
    "Method Not Allowed": {
        "count": 1,
        "size": 48
    },
    "Metrics": {
        "count": 1,
        "size": 32
    },
    "Milliseconds": {
        "count": 1,
        "size": 40
    },
    "Minimatch": {
        "count": 3,
        "size": 256
    },
    "Minutes": {
        "count": 1,
        "size": 32
    },
    "Misdirected Request": {
        "count": 1,
        "size": 48
    },
    "Mo": {
        "count": 1,
        "size": 32
    },
    "Module": {
        "count": 181,
        "size": 14488
    },
    "Module._load": {
        "count": 1,
        "size": 40
    },
    "Module._load REQUEST  ": {
        "count": 1,
        "size": 48
    },
    "Module.load": {
        "count": 1,
        "size": 40
    },
    "ModulesField": {
        "count": 1,
        "size": 40
    },
    "Moment": {
        "count": 3,
        "size": 248
    },
    "Mon": {
        "count": 1,
        "size": 32
    },
    "Monday": {
        "count": 1,
        "size": 32
    },
    "MongoProbe": {
        "count": 4,
        "size": 360
    },
    "MoveArrayContents": {
        "count": 1,
        "size": 48
    },
    "Moved Permanently": {
        "count": 1,
        "size": 48
    },
    "MqttProbe": {
        "count": 4,
        "size": 360
    },
    "Multi-Status": {
        "count": 1,
        "size": 40
    },
    "Multiple Choices": {
        "count": 1,
        "size": 40
    },
    "MySqlProbe": {
        "count": 4,
        "size": 360
    },
    "N": {
        "count": 3,
        "size": 248
    },
    "NAME": {
        "count": 1,
        "size": 32
    },
    "NAPTR": {
        "count": 1,
        "size": 32
    },
    "NEGATIVE_INFINITY": {
        "count": 1,
        "size": 48
    },
    "NET": {
        "count": 2,
        "size": 64
    },
    "NODATA": {
        "count": 1,
        "size": 32
    },
    "NODE_": {
        "count": 1,
        "size": 32
    },
    "NODE_BINDINGS_ARROW": {
        "count": 1,
        "size": 48
    },
    "NODE_BINDINGS_COMPILED_DIR": {
        "count": 1,
        "size": 56
    },
    "NODE_CHANNEL_FD": {
        "count": 1,
        "size": 40
    },
    "NODE_CHANNEL_FD=": {
        "count": 1,
        "size": 40
    },
    "NODE_CLUSTER": {
        "count": 2,
        "size": 80
    },
    "NODE_CLUSTER_SCHED_POLICY": {
        "count": 1,
        "size": 56
    },
    "NODE_DEBUG": {
        "count": 1,
        "size": 40
    },
    "NODE_DEBUG_TIMEOUT": {
        "count": 1,
        "size": 48
    },
    "NODE_ENV": {
        "count": 1,
        "size": 32
    },
    "NODE_HANDLE": {
        "count": 1,
        "size": 40
    },
    "NODE_HANDLE_ACK": {
        "count": 1,
        "size": 40
    },
    "NODE_HEAPDUMP_OPTIONS": {
        "count": 1,
        "size": 48
    },
    "NODE_PATH": {
        "count": 1,
        "size": 40
    },
    "NODE_PENDING_PIPE_INSTANCES": {
        "count": 1,
        "size": 56
    },
    "NODE_UNIQUE_ID": {
        "count": 1,
        "size": 40
    },
    "NOMEM": {
        "count": 1,
        "size": 32
    },
    "NONAME": {
        "count": 1,
        "size": 32
    },
    "NONNUMERICIDENTIFIER": {
        "count": 1,
        "size": 48
    },
    "NOT": {
        "count": 1,
        "size": 32
    },
    "NOTFOUND": {
        "count": 1,
        "size": 32
    },
    "NOTICE": {
        "count": 1,
        "size": 32
    },
    "NOTIFY": {
        "count": 1,
        "size": 32
    },
    "NOTIMP": {
        "count": 1,
        "size": 32
    },
    "NOTINITIALIZED": {
        "count": 1,
        "size": 40
    },
    "NPN_ENABLED": {
        "count": 1,
        "size": 40
    },
    "NS": {
        "count": 1,
        "size": 32
    },
    "NUMERICIDENTIFIER": {
        "count": 1,
        "size": 48
    },
    "NUMERICIDENTIFIERLOOSE": {
        "count": 1,
        "size": 48
    },
    "NaN": {
        "count": 1,
        "size": 32
    },
    "NameField": {
        "count": 1,
        "size": 40
    },
    "NativeCodeFunctionSourceString": {
        "count": 3,
        "size": 272
    },
    "NativeModule": {
        "count": 54,
        "size": 3112
    },
    "NativeModule ": {
        "count": 1,
        "size": 40
    },
    "NativeObjectGetNotifier": {
        "count": 3,
        "size": 264
    },
    "NativeObjectNotifierPerformChange": {
        "count": 3,
        "size": 280
    },
    "NativeObjectObserve": {
        "count": 3,
        "size": 264
    },
    "NativeScriptsCount": {
        "count": 1,
        "size": 48
    },
    "NativeSecureContext": {
        "count": 1,
        "size": 48
    },
    "Network Authentication Required": {
        "count": 1,
        "size": 56
    },
    "NeverOptimizeFunction": {
        "count": 1,
        "size": 48
    },
    "NewArguments": {
        "count": 1,
        "size": 40
    },
    "NewClosure": {
        "count": 1,
        "size": 40
    },
    "NewClosureFromStubFailure": {
        "count": 1,
        "size": 56
    },
    "NewConsString": {
        "count": 1,
        "size": 40
    },
    "NewFunctionContext": {
        "count": 1,
        "size": 48
    },
    "NewFunctionString": {
        "count": 3,
        "size": 264
    },
    "NewObject": {
        "count": 1,
        "size": 40
    },
    "NewObjectFromBound": {
        "count": 1,
        "size": 48
    },
    "NewObjectWithAllocationSite": {
        "count": 1,
        "size": 56
    },
    "NewReferenceError": {
        "count": 1,
        "size": 48
    },
    "NewRestParam": {
        "count": 1,
        "size": 40
    },
    "NewRestParamSlow": {
        "count": 1,
        "size": 40
    },
    "NewScriptContext": {
        "count": 1,
        "size": 40
    },
    "NewSloppyArguments": {
        "count": 1,
        "size": 48
    },
    "NewStrictArguments": {
        "count": 1,
        "size": 48
    },
    "NewString": {
        "count": 1,
        "size": 40
    },
    "NewStringWrapper": {
        "count": 1,
        "size": 40
    },
    "NewSymbolWrapper": {
        "count": 1,
        "size": 40
    },
    "NewSyntaxError": {
        "count": 1,
        "size": 40
    },
    "NewTypeError": {
        "count": 1,
        "size": 40
    },
    "No Content": {
        "count": 1,
        "size": 40
    },
    "No README data": {
        "count": 1,
        "size": 40
    },
    "No description": {
        "count": 1,
        "size": 40
    },
    "No repository field.": {
        "count": 1,
        "size": 48
    },
    "No such label: ": {
        "count": 1,
        "size": 40
    },
    "No such native module ": {
        "count": 1,
        "size": 48
    },
    "NoSideEffectToString": {
        "count": 3,
        "size": 264
    },
    "NoSideEffectsObjectToString": {
        "count": 3,
        "size": 272
    },
    "Node Application Metrics": {
        "count": 1,
        "size": 48
    },
    "Node.js": {
        "count": 1,
        "size": 32
    },
    "Non-Authoritative Information": {
        "count": 1,
        "size": 56
    },
    "Non-dependency in bundleDependencies: %s": {
        "count": 1,
        "size": 64
    },
    "NonNumberToNumber": {
        "count": 3,
        "size": 264
    },
    "NonStringToString": {
        "count": 3,
        "size": 264
    },
    "NormalizeElements": {
        "count": 1,
        "size": 48
    },
    "Normalized value of bugs field is an empty object. Deleted.": {
        "count": 1,
        "size": 88
    },
    "Not Acceptable": {
        "count": 1,
        "size": 40
    },
    "Not Extended": {
        "count": 1,
        "size": 40
    },
    "Not Found": {
        "count": 1,
        "size": 40
    },
    "Not Implemented": {
        "count": 1,
        "size": 40
    },
    "Not Modified": {
        "count": 1,
        "size": 40
    },
    "NotifyChange": {
        "count": 3,
        "size": 256
    },
    "NotifyContextDisposed": {
        "count": 1,
        "size": 48
    },
    "NotifyDeoptimized": {
        "count": 1,
        "size": 48
    },
    "NotifyStubFailure": {
        "count": 1,
        "size": 48
    },
    "Nov": {
        "count": 1,
        "size": 32
    },
    "November": {
        "count": 1,
        "size": 32
    },
    "Number": {
        "count": 4,
        "size": 280
    },
    "Number.prototype.toString": {
        "count": 1,
        "size": 56
    },
    "NumberAdd": {
        "count": 1,
        "size": 40
    },
    "NumberAnd": {
        "count": 1,
        "size": 40
    },
    "NumberCompare": {
        "count": 1,
        "size": 40
    },
    "NumberConstructor": {
        "count": 2,
        "size": 192
    },
    "NumberDiv": {
        "count": 1,
        "size": 40
    },
    "NumberEquals": {
        "count": 1,
        "size": 40
    },
    "NumberFormat": {
        "count": 1,
        "size": 40
    },
    "NumberImul": {
        "count": 1,
        "size": 40
    },
    "NumberIsFinite": {
        "count": 1,
        "size": 40
    },
    "NumberIsInteger": {
        "count": 1,
        "size": 40
    },
    "NumberIsNaN": {
        "count": 1,
        "size": 40
    },
    "NumberIsSafeInteger": {
        "count": 1,
        "size": 48
    },
    "NumberMod": {
        "count": 1,
        "size": 40
    },
    "NumberMul": {
        "count": 1,
        "size": 40
    },
    "NumberOr": {
        "count": 1,
        "size": 32
    },
    "NumberSar": {
        "count": 1,
        "size": 40
    },
    "NumberShl": {
        "count": 1,
        "size": 40
    },
    "NumberShr": {
        "count": 1,
        "size": 40
    },
    "NumberSub": {
        "count": 1,
        "size": 40
    },
    "NumberToExponential": {
        "count": 1,
        "size": 48
    },
    "NumberToExponentialJS": {
        "count": 1,
        "size": 48
    },
    "NumberToFixed": {
        "count": 1,
        "size": 40
    },
    "NumberToFixedJS": {
        "count": 1,
        "size": 40
    },
    "NumberToInteger": {
        "count": 1,
        "size": 40
    },
    "NumberToIntegerMapMinusZero": {
        "count": 1,
        "size": 56
    },
    "NumberToJSInt32": {
        "count": 1,
        "size": 40
    },
    "NumberToJSUint32": {
        "count": 1,
        "size": 40
    },
    "NumberToLocaleString": {
        "count": 1,
        "size": 48
    },
    "NumberToPrecision": {
        "count": 1,
        "size": 48
    },
    "NumberToPrecisionJS": {
        "count": 1,
        "size": 48
    },
    "NumberToRadixString": {
        "count": 1,
        "size": 48
    },
    "NumberToSmi": {
        "count": 1,
        "size": 40
    },
    "NumberToString": {
        "count": 1,
        "size": 40
    },
    "NumberToStringJS": {
        "count": 1,
        "size": 40
    },
    "NumberToStringRT": {
        "count": 1,
        "size": 40
    },
    "NumberToStringSkipCache": {
        "count": 1,
        "size": 48
    },
    "NumberUnaryMinus": {
        "count": 1,
        "size": 40
    },
    "NumberValueOf": {
        "count": 1,
        "size": 40
    },
    "NumberXor": {
        "count": 1,
        "size": 40
    },
    "O": {
        "count": 1,
        "size": 32
    },
    "OCSPRequest": {
        "count": 1,
        "size": 40
    },
    "OK": {
        "count": 1,
        "size": 32
    },
    "OPEN": {
        "count": 1,
        "size": 32
    },
    "OPTIONS": {
        "count": 1,
        "size": 32
    },
    "OPTION_DEFAULTS": {
        "count": 1,
        "size": 40
    },
    "O_APPEND": {
        "count": 1,
        "size": 32
    },
    "O_CREAT": {
        "count": 1,
        "size": 32
    },
    "O_DIRECT": {
        "count": 1,
        "size": 32
    },
    "O_DIRECTORY": {
        "count": 1,
        "size": 40
    },
    "O_EXCL": {
        "count": 1,
        "size": 32
    },
    "O_NOCTTY": {
        "count": 1,
        "size": 32
    },
    "O_NOFOLLOW": {
        "count": 1,
        "size": 40
    },
    "O_NONBLOCK": {
        "count": 1,
        "size": 40
    },
    "O_RDONLY": {
        "count": 1,
        "size": 32
    },
    "O_RDWR": {
        "count": 1,
        "size": 32
    },
    "O_SYMLINK": {
        "count": 1,
        "size": 40
    },
    "O_SYNC": {
        "count": 1,
        "size": 32
    },
    "O_TRUNC": {
        "count": 1,
        "size": 32
    },
    "O_WRONLY": {
        "count": 1,
        "size": 32
    },
    "Object": {
        "count": 1551,
        "size": 82320
    },
    "Object.defineProperties": {
        "count": 1,
        "size": 48
    },
    "Object.defineProperty": {
        "count": 1,
        "size": 48
    },
    "Object.prototype.__proto__": {
        "count": 1,
        "size": 56
    },
    "Object.setPrototypeOf": {
        "count": 1,
        "size": 48
    },
    "ObjectAssign": {
        "count": 1,
        "size": 40
    },
    "ObjectConstructor": {
        "count": 2,
        "size": 192
    },
    "ObjectCreate": {
        "count": 1,
        "size": 40
    },
    "ObjectDefineGetter": {
        "count": 1,
        "size": 48
    },
    "ObjectDefineProperties": {
        "count": 1,
        "size": 48
    },
    "ObjectDefineProperty": {
        "count": 1,
        "size": 48
    },
    "ObjectDefineSetter": {
        "count": 1,
        "size": 48
    },
    "ObjectDeliverChangeRecords": {
        "count": 1,
        "size": 56
    },
    "ObjectEquals": {
        "count": 1,
        "size": 40
    },
    "ObjectFreeze": {
        "count": 1,
        "size": 40
    },
    "ObjectFreezeJS": {
        "count": 1,
        "size": 40
    },
    "ObjectGetNotifier": {
        "count": 1,
        "size": 48
    },
    "ObjectGetOwnPropertyDescriptor": {
        "count": 1,
        "size": 56
    },
    "ObjectGetOwnPropertyKeys": {
        "count": 3,
        "size": 264
    },
    "ObjectGetOwnPropertyNames": {
        "count": 1,
        "size": 56
    },
    "ObjectGetOwnPropertySymbols": {
        "count": 1,
        "size": 56
    },
    "ObjectGetProto": {
        "count": 1,
        "size": 40
    },
    "ObjectGetPrototypeOf": {
        "count": 1,
        "size": 48
    },
    "ObjectHasOwnProperty": {
        "count": 1,
        "size": 48
    },
    "ObjectInfoAddObserver": {
        "count": 3,
        "size": 264
    },
    "ObjectInfoAddPerformingType": {
        "count": 3,
        "size": 272
    },
    "ObjectInfoEnqueueExternalChangeRecord": {
        "count": 3,
        "size": 280
    },
    "ObjectInfoEnqueueInternalChangeRecord": {
        "count": 3,
        "size": 280
    },
    "ObjectInfoGet": {
        "count": 3,
        "size": 256
    },
    "ObjectInfoGetFromNotifier": {
        "count": 3,
        "size": 272
    },
    "ObjectInfoGetNotifier": {
        "count": 3,
        "size": 264
    },
    "ObjectInfoGetOrCreate": {
        "count": 3,
        "size": 264
    },
    "ObjectInfoGetPerformingTypes": {
        "count": 3,
        "size": 272
    },
    "ObjectInfoHasActiveObservers": {
        "count": 3,
        "size": 272
    },
    "ObjectInfoNormalizeChangeObservers": {
        "count": 3,
        "size": 280
    },
    "ObjectInfoRemoveObserver": {
        "count": 3,
        "size": 264
    },
    "ObjectInfoRemovePerformingType": {
        "count": 3,
        "size": 272
    },
    "ObjectIs": {
        "count": 1,
        "size": 32
    },
    "ObjectIsExtensible": {
        "count": 1,
        "size": 48
    },
    "ObjectIsFrozen": {
        "count": 1,
        "size": 40
    },
    "ObjectIsPrototypeOf": {
        "count": 1,
        "size": 48
    },
    "ObjectIsSealed": {
        "count": 1,
        "size": 40
    },
    "ObjectKeys": {
        "count": 1,
        "size": 40
    },
    "ObjectLookupGetter": {
        "count": 1,
        "size": 48
    },
    "ObjectLookupSetter": {
        "count": 1,
        "size": 48
    },
    "ObjectNotifierNotify": {
        "count": 1,
        "size": 48
    },
    "ObjectNotifierPerformChange": {
        "count": 1,
        "size": 56
    },
    "ObjectObserve": {
        "count": 1,
        "size": 40
    },
    "ObjectPreventExtension": {
        "count": 1,
        "size": 48
    },
    "ObjectPropertyIsEnumerable": {
        "count": 1,
        "size": 56
    },
    "ObjectSeal": {
        "count": 1,
        "size": 40
    },
    "ObjectSealJS": {
        "count": 1,
        "size": 40
    },
    "ObjectSetProto": {
        "count": 1,
        "size": 40
    },
    "ObjectSetPrototypeOf": {
        "count": 1,
        "size": 48
    },
    "ObjectToLocaleString": {
        "count": 1,
        "size": 48
    },
    "ObjectToString": {
        "count": 1,
        "size": 40
    },
    "ObjectUnobserve": {
        "count": 1,
        "size": 40
    },
    "ObjectValueOf": {
        "count": 1,
        "size": 40
    },
    "ObjectWasCreatedInCurrentOrigin": {
        "count": 1,
        "size": 56
    },
    "ObservationWeakMapCreate": {
        "count": 1,
        "size": 48
    },
    "ObserveMicrotaskRunner": {
        "count": 3,
        "size": 264
    },
    "ObservedArrayPop": {
        "count": 3,
        "size": 256
    },
    "ObservedArrayPush": {
        "count": 3,
        "size": 264
    },
    "ObservedArrayShift": {
        "count": 3,
        "size": 264
    },
    "ObservedArraySplice": {
        "count": 3,
        "size": 264
    },
    "ObservedArrayUnshift": {
        "count": 3,
        "size": 264
    },
    "ObserverCreate": {
        "count": 3,
        "size": 256
    },
    "ObserverEnqueueIfActive": {
        "count": 3,
        "size": 264
    },
    "ObserverGetAcceptTypes": {
        "count": 3,
        "size": 264
    },
    "ObserverGetCallback": {
        "count": 3,
        "size": 264
    },
    "ObserverIsActive": {
        "count": 3,
        "size": 256
    },
    "ObserverObjectAndRecordHaveSameOrigin": {
        "count": 1,
        "size": 64
    },
    "Oct": {
        "count": 1,
        "size": 32
    },
    "October": {
        "count": 1,
        "size": 32
    },
    "OneByteSeqStringGetChar": {
        "count": 1,
        "size": 48
    },
    "OneByteSeqStringSetChar": {
        "count": 1,
        "size": 48
    },
    "OpaqueReference": {
        "count": 3,
        "size": 256
    },
    "OpenEvent": {
        "count": 3,
        "size": 256
    },
    "OpenReq": {
        "count": 3,
        "size": 248
    },
    "OpenReq.done": {
        "count": 1,
        "size": 40
    },
    "OptimizeFunctionOnNextCall": {
        "count": 1,
        "size": 56
    },
    "OptimizeObjectForAddingMultipleProperties": {
        "count": 1,
        "size": 72
    },
    "OptimizeOsr": {
        "count": 1,
        "size": 40
    },
    "Options": {
        "count": 3,
        "size": 248
    },
    "OracleDBProbe": {
        "count": 4,
        "size": 360
    },
    "OracleProbe": {
        "count": 4,
        "size": 360
    },
    "OutgoingMessage": {
        "count": 3,
        "size": 256
    },
    "OutgoingMessage.flush is deprecated. Use flushHeaders instead.": {
        "count": 1,
        "size": 88
    },
    "Overflow: input needs wider integers to process": {
        "count": 1,
        "size": 72
    },
    "OverrideFunction": {
        "count": 2,
        "size": 184
    },
    "OwnKeys": {
        "count": 1,
        "size": 32
    },
    "OwnPropertyKeys": {
        "count": 3,
        "size": 256
    },
    "P": {
        "count": 3,
        "size": 248
    },
    "PARTIAL_FLAG": {
        "count": 1,
        "size": 40
    },
    "PARTIAL_RIGHT_FLAG": {
        "count": 1,
        "size": 48
    },
    "PATCH": {
        "count": 1,
        "size": 32
    },
    "PBKDF2": {
        "count": 3,
        "size": 248
    },
    "PBKDF2 Error": {
        "count": 1,
        "size": 40
    },
    "PI": {
        "count": 1,
        "size": 32
    },
    "PIPE": {
        "count": 1,
        "size": 32
    },
    "PIPEWRAP": {
        "count": 7,
        "size": 2448
    },
    "PL": {
        "count": 1,
        "size": 32
    },
    "PLACEHOLDER": {
        "count": 1,
        "size": 40
    },
    "POINT_CONVERSION_COMPRESSED": {
        "count": 1,
        "size": 56
    },
    "POINT_CONVERSION_HYBRID": {
        "count": 1,
        "size": 48
    },
    "POINT_CONVERSION_UNCOMPRESSED": {
        "count": 1,
        "size": 56
    },
    "POSITIVE_INFINITY": {
        "count": 1,
        "size": 48
    },
    "POST": {
        "count": 1,
        "size": 32
    },
    "PRERELEASE": {
        "count": 1,
        "size": 40
    },
    "PRERELEASEIDENTIFIER": {
        "count": 1,
        "size": 48
    },
    "PRERELEASEIDENTIFIERLOOSE": {
        "count": 1,
        "size": 56
    },
    "PRERELEASELOOSE": {
        "count": 1,
        "size": 40
    },
    "PROCESSWRAP": {
        "count": 2,
        "size": 200
    },
    "PROPFIND": {
        "count": 1,
        "size": 32
    },
    "PROPPATCH": {
        "count": 1,
        "size": 40
    },
    "PTR": {
        "count": 1,
        "size": 32
    },
    "PURGE": {
        "count": 1,
        "size": 32
    },
    "PUT": {
        "count": 1,
        "size": 32
    },
    "PWD": {
        "count": 1,
        "size": 32
    },
    "PadInt": {
        "count": 3,
        "size": 248
    },
    "Parameter 'url' must be a string, not ": {
        "count": 1,
        "size": 64
    },
    "Parse Error": {
        "count": 1,
        "size": 40
    },
    "ParseJson": {
        "count": 1,
        "size": 40
    },
    "Parser": {
        "count": 10,
        "size": 976
    },
    "Partial Content": {
        "count": 1,
        "size": 40
    },
    "PassThrough": {
        "count": 3,
        "size": 256
    },
    "Path must be a string without null bytes.": {
        "count": 1,
        "size": 72
    },
    "Path must be a string. Received ": {
        "count": 1,
        "size": 56
    },
    "Payload Too Large": {
        "count": 1,
        "size": 48
    },
    "Payment Required": {
        "count": 1,
        "size": 40
    },
    "PerMessageDeflate": {
        "count": 3,
        "size": 264
    },
    "Permanent Redirect": {
        "count": 1,
        "size": 48
    },
    "Pipe": {
        "count": 10,
        "size": 472
    },
    "PipeConnectWrap": {
        "count": 4,
        "size": 296
    },
    "PostExperimentals": {
        "count": 2,
        "size": 192
    },
    "PostNatives": {
        "count": 2,
        "size": 184
    },
    "PostgresProbe": {
        "count": 4,
        "size": 360
    },
    "Precondition Failed": {
        "count": 1,
        "size": 48
    },
    "Precondition Required": {
        "count": 1,
        "size": 48
    },
    "PrepareStep": {
        "count": 1,
        "size": 40
    },
    "PreventExtensions": {
        "count": 1,
        "size": 48
    },
    "Probably broken git url: %s": {
        "count": 1,
        "size": 56
    },
    "Probe": {
        "count": 3,
        "size": 248
    },
    "Probe.attach": {
        "count": 1,
        "size": 40
    },
    "Probe.enable": {
        "count": 1,
        "size": 40
    },
    "Process": {
        "count": 5,
        "size": 312
    },
    "Processing": {
        "count": 1,
        "size": 40
    },
    "Promise": {
        "count": 3,
        "size": 248
    },
    "Promise#onReject": {
        "count": 1,
        "size": 40
    },
    "Promise#onResolve": {
        "count": 1,
        "size": 48
    },
    "Promise#raw": {
        "count": 1,
        "size": 40
    },
    "Promise#status": {
        "count": 1,
        "size": 40
    },
    "Promise#value": {
        "count": 1,
        "size": 40
    },
    "PromiseAll": {
        "count": 1,
        "size": 40
    },
    "PromiseCast": {
        "count": 1,
        "size": 40
    },
    "PromiseCatch": {
        "count": 1,
        "size": 40
    },
    "PromiseChain": {
        "count": 1,
        "size": 40
    },
    "PromiseCoerce": {
        "count": 3,
        "size": 256
    },
    "PromiseCreate": {
        "count": 3,
        "size": 256
    },
    "PromiseCreateAndSet": {
        "count": 3,
        "size": 264
    },
    "PromiseDeferred": {
        "count": 1,
        "size": 40
    },
    "PromiseDone": {
        "count": 3,
        "size": 256
    },
    "PromiseEnqueue": {
        "count": 3,
        "size": 256
    },
    "PromiseHandle": {
        "count": 3,
        "size": 256
    },
    "PromiseHasHandlerSymbol": {
        "count": 1,
        "size": 48
    },
    "PromiseHasUserDefinedRejectHandler": {
        "count": 3,
        "size": 280
    },
    "PromiseHasUserDefinedRejectHandlerRecursive": {
        "count": 3,
        "size": 288
    },
    "PromiseIdRejectHandler": {
        "count": 3,
        "size": 264
    },
    "PromiseIdResolveHandler": {
        "count": 3,
        "size": 264
    },
    "PromiseInit": {
        "count": 3,
        "size": 256
    },
    "PromiseNopResolver": {
        "count": 3,
        "size": 264
    },
    "PromiseRace": {
        "count": 1,
        "size": 40
    },
    "PromiseReject": {
        "count": 3,
        "size": 256
    },
    "PromiseRejectEvent": {
        "count": 1,
        "size": 48
    },
    "PromiseRejected": {
        "count": 1,
        "size": 40
    },
    "PromiseResolve": {
        "count": 3,
        "size": 256
    },
    "PromiseResolved": {
        "count": 1,
        "size": 40
    },
    "PromiseRevokeReject": {
        "count": 1,
        "size": 48
    },
    "PromiseSet": {
        "count": 3,
        "size": 256
    },
    "PromiseThen": {
        "count": 1,
        "size": 40
    },
    "PromoteScheduledException": {
        "count": 1,
        "size": 56
    },
    "PropertyDescriptor": {
        "count": 3,
        "size": 264
    },
    "PropertyDescriptor_GetGetter": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_GetSetter": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_GetValue": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_HasConfigurable": {
        "count": 3,
        "size": 280
    },
    "PropertyDescriptor_HasEnumerable": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_HasGetter": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_HasSetter": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_HasValue": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_HasWritable": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_IsConfigurable": {
        "count": 3,
        "size": 280
    },
    "PropertyDescriptor_IsEnumerable": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_IsWritable": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_SetConfigurable": {
        "count": 3,
        "size": 280
    },
    "PropertyDescriptor_SetEnumerable": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_SetGetter": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_SetSetter": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_SetValue": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_SetWritable": {
        "count": 3,
        "size": 272
    },
    "PropertyDescriptor_ToString": {
        "count": 3,
        "size": 272
    },
    "Protocol": {
        "count": 6,
        "size": 560
    },
    "Proxy Authentication Required": {
        "count": 1,
        "size": 56
    },
    "ProxyDelegateCallAndConstruct": {
        "count": 1,
        "size": 56
    },
    "ProxyDerivedHasOwnTrap": {
        "count": 1,
        "size": 48
    },
    "ProxyDerivedKeysTrap": {
        "count": 1,
        "size": 48
    },
    "ProxyFix": {
        "count": 3,
        "size": 248
    },
    "PushBlockContext": {
        "count": 1,
        "size": 40
    },
    "PushCatchContext": {
        "count": 1,
        "size": 40
    },
    "PushIfAbsent": {
        "count": 1,
        "size": 40
    },
    "PushModuleContext": {
        "count": 1,
        "size": 48
    },
    "PushWithContext": {
        "count": 1,
        "size": 40
    },
    "Q": {
        "count": 1,
        "size": 32
    },
    "Qo": {
        "count": 1,
        "size": 32
    },
    "QueryReqWrap": {
        "count": 4,
        "size": 296
    },
    "QueryString": {
        "count": 1,
        "size": 40
    },
    "QueueItem": {
        "count": 3,
        "size": 256
    },
    "QuickSort": {
        "count": 2,
        "size": 184
    },
    "QuoteJSONString": {
        "count": 1,
        "size": 40
    },
    "R": {
        "count": 1,
        "size": 32
    },
    "RDS": {
        "count": 2,
        "size": 64
    },
    "READ-INSTALLED": {
        "count": 2,
        "size": 80
    },
    "README.md": {
        "count": 5,
        "size": 200
    },
    "REARG_FLAG": {
        "count": 1,
        "size": 40
    },
    "REFLECT_APPLY_PREPARE": {
        "count": 3,
        "size": 264
    },
    "REFLECT_CONSTRUCT_PREPARE": {
        "count": 3,
        "size": 272
    },
    "REFUSED": {
        "count": 1,
        "size": 32
    },
    "RELATIVE: requested:": {
        "count": 1,
        "size": 48
    },
    "REPORT": {
        "count": 1,
        "size": 32
    },
    "REQ": {
        "count": 1,
        "size": 32
    },
    "REQUEST": {
        "count": 2,
        "size": 64
    },
    "RESPONSE": {
        "count": 2,
        "size": 64
    },
    "RETRY": {
        "count": 1,
        "size": 32
    },
    "RSA_NO_PADDING": {
        "count": 1,
        "size": 40
    },
    "RSA_PKCS1_OAEP_PADDING": {
        "count": 1,
        "size": 48
    },
    "RSA_PKCS1_PADDING": {
        "count": 1,
        "size": 48
    },
    "RSA_PKCS1_PSS_PADDING": {
        "count": 1,
        "size": 48
    },
    "RSA_SSLV23_PADDING": {
        "count": 1,
        "size": 48
    },
    "RSA_X931_PADDING": {
        "count": 1,
        "size": 40
    },
    "RSP": {
        "count": 1,
        "size": 32
    },
    "R_OK": {
        "count": 1,
        "size": 32
    },
    "Range": {
        "count": 3,
        "size": 248
    },
    "Range Not Satisfiable": {
        "count": 1,
        "size": 48
    },
    "Range.format": {
        "count": 1,
        "size": 40
    },
    "Range.test": {
        "count": 1,
        "size": 40
    },
    "RangeError": {
        "count": 4,
        "size": 360
    },
    "RawTask": {
        "count": 3,
        "size": 248
    },
    "RawTask.call": {
        "count": 1,
        "size": 40
    },
    "ReThrow": {
        "count": 1,
        "size": 32
    },
    "ReadFileContext": {
        "count": 5,
        "size": 472
    },
    "ReadStream": {
        "count": 9,
        "size": 904
    },
    "ReadStream$open": {
        "count": 3,
        "size": 256
    },
    "Readable": {
        "count": 3,
        "size": 248
    },
    "Readable.on": {
        "count": 1,
        "size": 40
    },
    "ReadableState": {
        "count": 36,
        "size": 6592
    },
    "ReaddirReq": {
        "count": 3,
        "size": 256
    },
    "ReadmeField": {
        "count": 1,
        "size": 40
    },
    "Receiver": {
        "count": 5,
        "size": 464
    },
    "Receiver.add": {
        "count": 2,
        "size": 80
    },
    "ReceiverHixie": {
        "count": 1,
        "size": 40
    },
    "RedisProbe": {
        "count": 4,
        "size": 360
    },
    "ReferenceError": {
        "count": 3,
        "size": 256
    },
    "RegExp": {
        "count": 3,
        "size": 248
    },
    "RegExp.prototype.exec": {
        "count": 1,
        "size": 48
    },
    "RegExp.prototype.test": {
        "count": 1,
        "size": 48
    },
    "RegExpCompileJS": {
        "count": 1,
        "size": 40
    },
    "RegExpConstructResult": {
        "count": 1,
        "size": 48
    },
    "RegExpConstructResultRT": {
        "count": 1,
        "size": 48
    },
    "RegExpConstructor": {
        "count": 2,
        "size": 192
    },
    "RegExpExec": {
        "count": 1,
        "size": 40
    },
    "RegExpExecJS": {
        "count": 1,
        "size": 40
    },
    "RegExpExecMultiple": {
        "count": 1,
        "size": 48
    },
    "RegExpExecNoTests": {
        "count": 3,
        "size": 264
    },
    "RegExpExecReThrow": {
        "count": 1,
        "size": 48
    },
    "RegExpGetLastMatch": {
        "count": 3,
        "size": 264
    },
    "RegExpGetLastParen": {
        "count": 3,
        "size": 264
    },
    "RegExpGetLeftContext": {
        "count": 3,
        "size": 264
    },
    "RegExpGetRightContext": {
        "count": 3,
        "size": 264
    },
    "RegExpInitializeAndCompile": {
        "count": 1,
        "size": 56
    },
    "RegExpLastMatchInfo": {
        "count": 1,
        "size": 48
    },
    "RegExpMakeCaptureGetter": {
        "count": 3,
        "size": 264
    },
    "RegExpTest": {
        "count": 1,
        "size": 40
    },
    "RegExpToString": {
        "count": 1,
        "size": 40
    },
    "Release": {
        "count": 2,
        "size": 64
    },
    "RemPiO2": {
        "count": 1,
        "size": 32
    },
    "RemoveArrayHoles": {
        "count": 1,
        "size": 40
    },
    "RenderCallSite": {
        "count": 1,
        "size": 40
    },
    "RepeaterBackend": {
        "count": 4,
        "size": 360
    },
    "Repository": {
        "count": 1,
        "size": 40
    },
    "Req": {
        "count": 3,
        "size": 248
    },
    "Req.done": {
        "count": 1,
        "size": 32
    },
    "Request": {
        "count": 3,
        "size": 248
    },
    "Request Header Fields Too Large": {
        "count": 1,
        "size": 56
    },
    "Request Timeout": {
        "count": 1,
        "size": 40
    },
    "Request.stop": {
        "count": 1,
        "size": 40
    },
    "Reset Content": {
        "count": 1,
        "size": 40
    },
    "ResolvePossiblyDirectEval": {
        "count": 1,
        "size": 56
    },
    "ResumeJSGeneratorObject": {
        "count": 1,
        "size": 48
    },
    "Revive": {
        "count": 3,
        "size": 248
    },
    "RiakProbe": {
        "count": 4,
        "size": 360
    },
    "Right": {
        "count": 1,
        "size": 32
    },
    "RoundNumber": {
        "count": 1,
        "size": 40
    },
    "RoundRobinHandle": {
        "count": 4,
        "size": 392
    },
    "RunMicrotasks": {
        "count": 1,
        "size": 40
    },
    "RunningInSimulator": {
        "count": 1,
        "size": 48
    },
    "RuntimeTools/appmetrics#adapter": {
        "count": 1,
        "size": 56
    },
    "Ryan Graham": {
        "count": 1,
        "size": 40
    },
    "S": {
        "count": 1,
        "size": 32
    },
    "SAR": {
        "count": 3,
        "size": 248
    },
    "SAR_STRONG": {
        "count": 3,
        "size": 256
    },
    "SCHED_NONE": {
        "count": 1,
        "size": 40
    },
    "SCHED_RR": {
        "count": 1,
        "size": 32
    },
    "SCOPERX": {
        "count": 1,
        "size": 32
    },
    "SEARCH": {
        "count": 1,
        "size": 32
    },
    "SECOND": {
        "count": 1,
        "size": 32
    },
    "SEE LICENSE IN LICENSE": {
        "count": 1,
        "size": 48
    },
    "SEMVER_SPEC_VERSION": {
        "count": 1,
        "size": 48
    },
    "SERVER _emitCloseIfDrained": {
        "count": 1,
        "size": 56
    },
    "SERVER handle? %j   connections? %d": {
        "count": 1,
        "size": 64
    },
    "SERVFAIL": {
        "count": 1,
        "size": 32
    },
    "SHK": {
        "count": 1,
        "size": 32
    },
    "SHL": {
        "count": 3,
        "size": 248
    },
    "SHL_STRONG": {
        "count": 3,
        "size": 256
    },
    "SHR": {
        "count": 3,
        "size": 248
    },
    "SHR_STRONG": {
        "count": 3,
        "size": 256
    },
    "SHUTDOWN": {
        "count": 1,
        "size": 32
    },
    "SIG": {
        "count": 1,
        "size": 32
    },
    "SIGABRT": {
        "count": 1,
        "size": 32
    },
    "SIGALRM": {
        "count": 1,
        "size": 32
    },
    "SIGBUS": {
        "count": 1,
        "size": 32
    },
    "SIGCHLD": {
        "count": 1,
        "size": 32
    },
    "SIGCONT": {
        "count": 1,
        "size": 32
    },
    "SIGFPE": {
        "count": 1,
        "size": 32
    },
    "SIGHUP": {
        "count": 1,
        "size": 32
    },
    "SIGILL": {
        "count": 1,
        "size": 32
    },
    "SIGINT": {
        "count": 1,
        "size": 32
    },
    "SIGIO": {
        "count": 1,
        "size": 32
    },
    "SIGIOT": {
        "count": 1,
        "size": 32
    },
    "SIGKILL": {
        "count": 1,
        "size": 32
    },
    "SIGNALWRAP": {
        "count": 5,
        "size": 864
    },
    "SIGPIPE": {
        "count": 1,
        "size": 32
    },
    "SIGPOLL": {
        "count": 1,
        "size": 32
    },
    "SIGPROF": {
        "count": 1,
        "size": 32
    },
    "SIGPWR": {
        "count": 1,
        "size": 32
    },
    "SIGQUIT": {
        "count": 1,
        "size": 32
    },
    "SIGSEGV": {
        "count": 1,
        "size": 32
    },
    "SIGSTKFLT": {
        "count": 1,
        "size": 40
    },
    "SIGSTOP": {
        "count": 1,
        "size": 32
    },
    "SIGSYS": {
        "count": 1,
        "size": 32
    },
    "SIGTERM": {
        "count": 1,
        "size": 32
    },
    "SIGTRAP": {
        "count": 1,
        "size": 32
    },
    "SIGTSTP": {
        "count": 1,
        "size": 32
    },
    "SIGTTIN": {
        "count": 1,
        "size": 32
    },
    "SIGTTOU": {
        "count": 1,
        "size": 32
    },
    "SIGUNUSED": {
        "count": 1,
        "size": 40
    },
    "SIGURG": {
        "count": 1,
        "size": 32
    },
    "SIGUSR1": {
        "count": 1,
        "size": 32
    },
    "SIGUSR2": {
        "count": 1,
        "size": 32
    },
    "SIGVTALRM": {
        "count": 1,
        "size": 40
    },
    "SIGWINCH": {
        "count": 1,
        "size": 32
    },
    "SIGXCPU": {
        "count": 1,
        "size": 32
    },
    "SIGXFSZ": {
        "count": 1,
        "size": 32
    },
    "SLAB_BUFFER_SIZE": {
        "count": 1,
        "size": 40
    },
    "SLC_COMMAND": {
        "count": 1,
        "size": 40
    },
    "SL_RUN_SKIP_IPCCTL": {
        "count": 1,
        "size": 48
    },
    "SNICallback": {
        "count": 3,
        "size": 256
    },
    "SOA": {
        "count": 1,
        "size": 32
    },
    "SQRT1_2": {
        "count": 1,
        "size": 32
    },
    "SQRT2": {
        "count": 1,
        "size": 32
    },
    "SRV": {
        "count": 1,
        "size": 32
    },
    "SS": {
        "count": 1,
        "size": 32
    },
    "SSL_OP_ALL": {
        "count": 1,
        "size": 40
    },
    "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION": {
        "count": 1,
        "size": 64
    },
    "SSL_OP_CIPHER_SERVER_PREFERENCE": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_CISCO_ANYCONNECT": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_COOKIE_EXCHANGE": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_CRYPTOPRO_TLSEXT_BUG": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS": {
        "count": 1,
        "size": 64
    },
    "SSL_OP_EPHEMERAL_RSA": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_LEGACY_SERVER_CONNECT": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER": {
        "count": 1,
        "size": 64
    },
    "SSL_OP_MICROSOFT_SESS_ID_BUG": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_MSIE_SSLV2_RSA_PADDING": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_NETSCAPE_CA_DN_BUG": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_NETSCAPE_CHALLENGE_BUG": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG": {
        "count": 1,
        "size": 64
    },
    "SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG": {
        "count": 1,
        "size": 64
    },
    "SSL_OP_NO_COMPRESSION": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_NO_QUERY_MTU": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION": {
        "count": 1,
        "size": 72
    },
    "SSL_OP_NO_SSLv2": {
        "count": 1,
        "size": 40
    },
    "SSL_OP_NO_SSLv3": {
        "count": 1,
        "size": 40
    },
    "SSL_OP_NO_TICKET": {
        "count": 1,
        "size": 40
    },
    "SSL_OP_NO_TLSv1": {
        "count": 1,
        "size": 40
    },
    "SSL_OP_NO_TLSv1_1": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_NO_TLSv1_2": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_PKCS1_CHECK_1": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_PKCS1_CHECK_2": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_SINGLE_DH_USE": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_SINGLE_ECDH_USE": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_SSLEAY_080_CLIENT_DH_BUG": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG": {
        "count": 1,
        "size": 64
    },
    "SSL_OP_TLS_BLOCK_PADDING_BUG": {
        "count": 1,
        "size": 56
    },
    "SSL_OP_TLS_D5_BUG": {
        "count": 1,
        "size": 48
    },
    "SSL_OP_TLS_ROLLBACK_BUG": {
        "count": 1,
        "size": 48
    },
    "SSS": {
        "count": 1,
        "size": 32
    },
    "SSSS": {
        "count": 1,
        "size": 32
    },
    "SSSSS": {
        "count": 1,
        "size": 32
    },
    "SSSSSS": {
        "count": 1,
        "size": 32
    },
    "SSSSSSS": {
        "count": 1,
        "size": 32
    },
    "SSSSSSSS": {
        "count": 1,
        "size": 32
    },
    "SSSSSSSSS": {
        "count": 1,
        "size": 40
    },
    "STACK_OVERFLOW": {
        "count": 3,
        "size": 256
    },
    "STAR": {
        "count": 1,
        "size": 32
    },
    "STATUS_CODES": {
        "count": 1,
        "size": 40
    },
    "STREAM": {
        "count": 2,
        "size": 64
    },
    "STREAM_WRAP": {
        "count": 2,
        "size": 80
    },
    "STRICT_EQUALS": {
        "count": 3,
        "size": 256
    },
    "STRING_ADD_LEFT": {
        "count": 3,
        "size": 256
    },
    "STRING_ADD_LEFT_STRONG": {
        "count": 3,
        "size": 264
    },
    "STRING_ADD_RIGHT": {
        "count": 3,
        "size": 256
    },
    "STRING_ADD_RIGHT_STRONG": {
        "count": 3,
        "size": 264
    },
    "STRONGLOOP_BASE_INTERVAL": {
        "count": 1,
        "size": 48
    },
    "STRONGLOOP_CLUSTER": {
        "count": 1,
        "size": 48
    },
    "STRONGLOOP_CONTROL": {
        "count": 1,
        "size": 48
    },
    "STRONGLOOP_FLUSH_INTERVAL": {
        "count": 1,
        "size": 56
    },
    "STRONGLOOP_METRICS": {
        "count": 1,
        "size": 48
    },
    "STRONGLOOP_OBJECT_TRACKING_INTERVAL": {
        "count": 1,
        "size": 64
    },
    "STRONGLOOP_TRACES_ID": {
        "count": 1,
        "size": 48
    },
    "STRONGLOOP_TRACING": {
        "count": 1,
        "size": 48
    },
    "SUB": {
        "count": 3,
        "size": 248
    },
    "SUBPARSE": {
        "count": 1,
        "size": 32
    },
    "SUBSCRIBE": {
        "count": 1,
        "size": 40
    },
    "SUB_STRONG": {
        "count": 3,
        "size": 256
    },
    "S_IFBLK": {
        "count": 1,
        "size": 32
    },
    "S_IFCHR": {
        "count": 1,
        "size": 32
    },
    "S_IFDIR": {
        "count": 1,
        "size": 32
    },
    "S_IFIFO": {
        "count": 1,
        "size": 32
    },
    "S_IFLNK": {
        "count": 1,
        "size": 32
    },
    "S_IFMT": {
        "count": 1,
        "size": 32
    },
    "S_IFREG": {
        "count": 1,
        "size": 32
    },
    "S_IFSOCK": {
        "count": 1,
        "size": 32
    },
    "S_IRGRP": {
        "count": 1,
        "size": 32
    },
    "S_IROTH": {
        "count": 1,
        "size": 32
    },
    "S_IRUSR": {
        "count": 1,
        "size": 32
    },
    "S_IRWXG": {
        "count": 1,
        "size": 32
    },
    "S_IRWXO": {
        "count": 1,
        "size": 32
    },
    "S_IRWXU": {
        "count": 1,
        "size": 32
    },
    "S_IWGRP": {
        "count": 1,
        "size": 32
    },
    "S_IWOTH": {
        "count": 1,
        "size": 32
    },
    "S_IWUSR": {
        "count": 1,
        "size": 32
    },
    "S_IXGRP": {
        "count": 1,
        "size": 32
    },
    "S_IXOTH": {
        "count": 1,
        "size": 32
    },
    "S_IXUSR": {
        "count": 1,
        "size": 32
    },
    "Sa": {
        "count": 1,
        "size": 32
    },
    "SafeRemoveArrayHoles": {
        "count": 2,
        "size": 192
    },
    "Sam Roberts": {
        "count": 2,
        "size": 80
    },
    "Sam Roberts <sam@strongloop.com>": {
        "count": 1,
        "size": 56
    },
    "SameCallSiteElements": {
        "count": 3,
        "size": 264
    },
    "SameValue": {
        "count": 3,
        "size": 256
    },
    "SameValueZero": {
        "count": 3,
        "size": 256
    },
    "Sat": {
        "count": 1,
        "size": 32
    },
    "Saturday": {
        "count": 1,
        "size": 32
    },
    "ScheduleBreak": {
        "count": 1,
        "size": 40
    },
    "Script": {
        "count": 3,
        "size": 248
    },
    "ScriptLineCount": {
        "count": 3,
        "size": 256
    },
    "ScriptLineEnd": {
        "count": 3,
        "size": 256
    },
    "ScriptLineFromPosition": {
        "count": 3,
        "size": 264
    },
    "ScriptLocationFromLine": {
        "count": 3,
        "size": 264
    },
    "ScriptLocationFromPosition": {
        "count": 3,
        "size": 272
    },
    "ScriptNameOrSourceURL": {
        "count": 3,
        "size": 264
    },
    "ScriptSourceLine": {
        "count": 3,
        "size": 256
    },
    "ScriptSourceSlice": {
        "count": 3,
        "size": 264
    },
    "ScriptsField": {
        "count": 1,
        "size": 40
    },
    "Seconds": {
        "count": 1,
        "size": 32
    },
    "SecureContext": {
        "count": 6,
        "size": 512
    },
    "SecurePair": {
        "count": 3,
        "size": 256
    },
    "See Other": {
        "count": 1,
        "size": 40
    },
    "Self": {
        "count": 3,
        "size": 248
    },
    "Self.send": {
        "count": 1,
        "size": 40
    },
    "SemVer": {
        "count": 3,
        "size": 248
    },
    "SemVer.inc": {
        "count": 1,
        "size": 40
    },
    "SendWrap": {
        "count": 4,
        "size": 280
    },
    "Sender": {
        "count": 5,
        "size": 464
    },
    "Sender.close": {
        "count": 2,
        "size": 80
    },
    "Sender.error": {
        "count": 1,
        "size": 40
    },
    "Sender.flush": {
        "count": 1,
        "size": 40
    },
    "Sender.ping": {
        "count": 2,
        "size": 80
    },
    "Sender.pong": {
        "count": 2,
        "size": 80
    },
    "Sender.send": {
        "count": 2,
        "size": 80
    },
    "SenderHixie": {
        "count": 1,
        "size": 40
    },
    "Sep": {
        "count": 1,
        "size": 32
    },
    "September": {
        "count": 1,
        "size": 40
    },
    "SerializeArray": {
        "count": 3,
        "size": 256
    },
    "SerializeObject": {
        "count": 3,
        "size": 256
    },
    "Server": {
        "count": 23,
        "size": 2336
    },
    "Server.close": {
        "count": 1,
        "size": 40
    },
    "Server.connections property is deprecated.": {
        "count": 1,
        "size": 72
    },
    "Server.connections property is deprecated. ": {
        "count": 1,
        "size": 72
    },
    "Server.listenFD is deprecated. Use Server.listen({fd: <number>}) instead.": {
        "count": 1,
        "size": 104
    },
    "Server.ref": {
        "count": 1,
        "size": 40
    },
    "Server.stop": {
        "count": 1,
        "size": 40
    },
    "Server.unref": {
        "count": 1,
        "size": 40
    },
    "ServerResponse": {
        "count": 3,
        "size": 256
    },
    "Service Unavailable": {
        "count": 1,
        "size": 48
    },
    "Set": {
        "count": 3,
        "size": 248
    },
    "Set Iterator": {
        "count": 1,
        "size": 40
    },
    "Set.clear": {
        "count": 1,
        "size": 40
    },
    "Set.has": {
        "count": 1,
        "size": 32
    },
    "Set.insert": {
        "count": 1,
        "size": 40
    },
    "Set.values": {
        "count": 1,
        "size": 40
    },
    "SetAdd": {
        "count": 1,
        "size": 32
    },
    "SetAllocationTimeout": {
        "count": 1,
        "size": 48
    },
    "SetCache": {
        "count": 3,
        "size": 248
    },
    "SetCachedCallSite": {
        "count": 3,
        "size": 264
    },
    "SetClear": {
        "count": 1,
        "size": 32
    },
    "SetClearJS": {
        "count": 1,
        "size": 40
    },
    "SetCode": {
        "count": 1,
        "size": 32
    },
    "SetConstructor": {
        "count": 2,
        "size": 184
    },
    "SetDebugEventListener": {
        "count": 1,
        "size": 48
    },
    "SetDelete": {
        "count": 1,
        "size": 40
    },
    "SetDisableBreak": {
        "count": 1,
        "size": 40
    },
    "SetFindEntry": {
        "count": 3,
        "size": 256
    },
    "SetFlags": {
        "count": 1,
        "size": 32
    },
    "SetForEach": {
        "count": 1,
        "size": 40
    },
    "SetForceInlineFlag": {
        "count": 1,
        "size": 48
    },
    "SetFunctionBreakPoint": {
        "count": 1,
        "size": 48
    },
    "SetFunctionName": {
        "count": 3,
        "size": 256
    },
    "SetGetSize": {
        "count": 1,
        "size": 40
    },
    "SetGrow": {
        "count": 1,
        "size": 32
    },
    "SetHas": {
        "count": 1,
        "size": 32
    },
    "SetInitialize": {
        "count": 1,
        "size": 40
    },
    "SetIsObserved": {
        "count": 1,
        "size": 40
    },
    "SetIterator": {
        "count": 3,
        "size": 256
    },
    "SetIteratorClone": {
        "count": 1,
        "size": 40
    },
    "SetIteratorDetails": {
        "count": 1,
        "size": 48
    },
    "SetIteratorInitialize": {
        "count": 1,
        "size": 48
    },
    "SetIteratorNext": {
        "count": 1,
        "size": 40
    },
    "SetNativeFlag": {
        "count": 1,
        "size": 40
    },
    "SetPendingObservers": {
        "count": 3,
        "size": 264
    },
    "SetProperty": {
        "count": 1,
        "size": 40
    },
    "SetPrototype": {
        "count": 1,
        "size": 40
    },
    "SetScopeVariableValue": {
        "count": 1,
        "size": 48
    },
    "SetScriptBreakPoint": {
        "count": 1,
        "size": 48
    },
    "SetShrink": {
        "count": 1,
        "size": 40
    },
    "SetUpLockedPrototype": {
        "count": 2,
        "size": 192
    },
    "SetValueOf": {
        "count": 1,
        "size": 40
    },
    "SharedArrayBuffer": {
        "count": 1,
        "size": 48
    },
    "SharedHandle": {
        "count": 3,
        "size": 256
    },
    "ShutdownWrap": {
        "count": 4,
        "size": 296
    },
    "Sign": {
        "count": 3,
        "size": 248
    },
    "Sign._write": {
        "count": 1,
        "size": 40
    },
    "Sign.sign": {
        "count": 1,
        "size": 40
    },
    "Signal": {
        "count": 8,
        "size": 408
    },
    "SimpleMove": {
        "count": 3,
        "size": 256
    },
    "SimpleSlice": {
        "count": 3,
        "size": 256
    },
    "SlabBuffer": {
        "count": 3,
        "size": 256
    },
    "SlowBuffer": {
        "count": 3,
        "size": 256
    },
    "Smart profiling": {
        "count": 1,
        "size": 40
    },
    "SmiLexicographicCompare": {
        "count": 1,
        "size": 48
    },
    "Socket": {
        "count": 16,
        "size": 2600
    },
    "Socket._read": {
        "count": 1,
        "size": 40
    },
    "Socket._read readStart": {
        "count": 1,
        "size": 48
    },
    "Socket.bind": {
        "count": 1,
        "size": 40
    },
    "Socket.close": {
        "count": 1,
        "size": 40
    },
    "Socket.end": {
        "count": 1,
        "size": 40
    },
    "Socket.read": {
        "count": 1,
        "size": 40
    },
    "Socket.ref": {
        "count": 2,
        "size": 80
    },
    "Socket.send": {
        "count": 1,
        "size": 40
    },
    "Socket.unref": {
        "count": 2,
        "size": 80
    },
    "Socket.write": {
        "count": 1,
        "size": 40
    },
    "SocketChannel": {
        "count": 10,
        "size": 1040
    },
    "SocketList": {
        "count": 1,
        "size": 40
    },
    "SocketListReceive": {
        "count": 3,
        "size": 264
    },
    "SocketListSend": {
        "count": 3,
        "size": 256
    },
    "SocketioProbe": {
        "count": 4,
        "size": 360
    },
    "SourceLocation": {
        "count": 3,
        "size": 256
    },
    "SourceLocationSourceText": {
        "count": 3,
        "size": 264
    },
    "SourceSlice": {
        "count": 3,
        "size": 256
    },
    "SourceSliceSourceText": {
        "count": 3,
        "size": 264
    },
    "SparseJoin": {
        "count": 3,
        "size": 256
    },
    "SparseJoinWithSeparator": {
        "count": 1,
        "size": 48
    },
    "SparseJoinWithSeparatorJS": {
        "count": 3,
        "size": 272
    },
    "SparseMove": {
        "count": 3,
        "size": 256
    },
    "SparseReverse": {
        "count": 3,
        "size": 256
    },
    "SparseSlice": {
        "count": 3,
        "size": 256
    },
    "SpecialArrayFunctions": {
        "count": 1,
        "size": 48
    },
    "StackGuard": {
        "count": 1,
        "size": 40
    },
    "StatWatcher": {
        "count": 8,
        "size": 728
    },
    "Stats": {
        "count": 1,
        "size": 32
    },
    "Statsd": {
        "count": 4,
        "size": 432
    },
    "StoreArrayLiteralElement": {
        "count": 1,
        "size": 48
    },
    "StoreKeyedToSuper_Sloppy": {
        "count": 1,
        "size": 48
    },
    "StoreKeyedToSuper_Strict": {
        "count": 1,
        "size": 48
    },
    "StoreLookupSlot": {
        "count": 1,
        "size": 40
    },
    "StoreToSuper_Sloppy": {
        "count": 1,
        "size": 48
    },
    "StoreToSuper_Strict": {
        "count": 1,
        "size": 48
    },
    "Stream": {
        "count": 28,
        "size": 2848
    },
    "Stream transformer that prefixes lines with timestamps and other things.": {
        "count": 1,
        "size": 96
    },
    "Stream.pipe": {
        "count": 1,
        "size": 40
    },
    "StreamWrap": {
        "count": 3,
        "size": 256
    },
    "String": {
        "count": 4,
        "size": 280
    },
    "String Iterator": {
        "count": 1,
        "size": 40
    },
    "String.prototype.charAt": {
        "count": 1,
        "size": 48
    },
    "String.prototype.charCodeAt": {
        "count": 1,
        "size": 56
    },
    "String.prototype.indexOf": {
        "count": 1,
        "size": 48
    },
    "String.prototype.lastIndexOf": {
        "count": 1,
        "size": 56
    },
    "String.prototype.match": {
        "count": 1,
        "size": 48
    },
    "String.prototype.replace": {
        "count": 1,
        "size": 48
    },
    "String.prototype.slice": {
        "count": 1,
        "size": 48
    },
    "String.prototype.split": {
        "count": 1,
        "size": 48
    },
    "String.prototype.startsWith": {
        "count": 1,
        "size": 56
    },
    "String.prototype.subString": {
        "count": 1,
        "size": 56
    },
    "String.prototype.substr": {
        "count": 1,
        "size": 48
    },
    "String.prototype.toLowerCase": {
        "count": 1,
        "size": 56
    },
    "String.prototype.toString": {
        "count": 1,
        "size": 56
    },
    "String.prototype.toUpperCase": {
        "count": 1,
        "size": 56
    },
    "String.prototype.trim": {
        "count": 1,
        "size": 48
    },
    "StringAdd": {
        "count": 1,
        "size": 40
    },
    "StringAddRT": {
        "count": 1,
        "size": 40
    },
    "StringAddTFStub": {
        "count": 3,
        "size": 256
    },
    "StringAnchor": {
        "count": 1,
        "size": 40
    },
    "StringBig": {
        "count": 1,
        "size": 40
    },
    "StringBlink": {
        "count": 1,
        "size": 40
    },
    "StringBold": {
        "count": 1,
        "size": 40
    },
    "StringBuilderConcat": {
        "count": 1,
        "size": 48
    },
    "StringBuilderJoin": {
        "count": 1,
        "size": 48
    },
    "StringCharAt": {
        "count": 1,
        "size": 40
    },
    "StringCharAtJS": {
        "count": 1,
        "size": 40
    },
    "StringCharCodeAt": {
        "count": 1,
        "size": 40
    },
    "StringCharCodeAtJS": {
        "count": 1,
        "size": 48
    },
    "StringCharCodeAtRT": {
        "count": 1,
        "size": 48
    },
    "StringCharFromCode": {
        "count": 1,
        "size": 48
    },
    "StringCodePointAt": {
        "count": 1,
        "size": 48
    },
    "StringCompare": {
        "count": 1,
        "size": 40
    },
    "StringCompareRT": {
        "count": 1,
        "size": 40
    },
    "StringConcat": {
        "count": 1,
        "size": 40
    },
    "StringConstructor": {
        "count": 2,
        "size": 192
    },
    "StringDecoder": {
        "count": 1,
        "size": 40
    },
    "StringEndsWith": {
        "count": 1,
        "size": 40
    },
    "StringEquals": {
        "count": 1,
        "size": 40
    },
    "StringFixed": {
        "count": 1,
        "size": 40
    },
    "StringFontcolor": {
        "count": 1,
        "size": 40
    },
    "StringFontsize": {
        "count": 1,
        "size": 40
    },
    "StringFromCharCode": {
        "count": 1,
        "size": 48
    },
    "StringFromCodePoint": {
        "count": 1,
        "size": 48
    },
    "StringGetLength": {
        "count": 1,
        "size": 40
    },
    "StringGetRawHashField": {
        "count": 1,
        "size": 48
    },
    "StringIncludes": {
        "count": 1,
        "size": 40
    },
    "StringIndexOf": {
        "count": 1,
        "size": 40
    },
    "StringIndexOfJS": {
        "count": 1,
        "size": 40
    },
    "StringItalics": {
        "count": 1,
        "size": 40
    },
    "StringIterator": {
        "count": 3,
        "size": 256
    },
    "StringIterator#iteratedString": {
        "count": 1,
        "size": 56
    },
    "StringIterator#next": {
        "count": 1,
        "size": 48
    },
    "StringIteratorNext": {
        "count": 1,
        "size": 48
    },
    "StringLastIndexOf": {
        "count": 1,
        "size": 48
    },
    "StringLastIndexOfJS": {
        "count": 1,
        "size": 48
    },
    "StringLengthTFStub": {
        "count": 3,
        "size": 264
    },
    "StringLink": {
        "count": 1,
        "size": 40
    },
    "StringLocaleCompare": {
        "count": 1,
        "size": 48
    },
    "StringLocaleCompareJS": {
        "count": 1,
        "size": 48
    },
    "StringMatch": {
        "count": 1,
        "size": 40
    },
    "StringMatchJS": {
        "count": 1,
        "size": 40
    },
    "StringNormalize": {
        "count": 1,
        "size": 40
    },
    "StringNormalizeJS": {
        "count": 1,
        "size": 48
    },
    "StringParseFloat": {
        "count": 1,
        "size": 40
    },
    "StringParseInt": {
        "count": 1,
        "size": 40
    },
    "StringPrototypeIterator": {
        "count": 1,
        "size": 48
    },
    "StringRaw": {
        "count": 1,
        "size": 40
    },
    "StringRepeat": {
        "count": 1,
        "size": 40
    },
    "StringReplace": {
        "count": 1,
        "size": 40
    },
    "StringReplaceGlobalRegExpWithFunction": {
        "count": 3,
        "size": 280
    },
    "StringReplaceGlobalRegExpWithString": {
        "count": 1,
        "size": 64
    },
    "StringReplaceNonGlobalRegExpWithFunction": {
        "count": 3,
        "size": 280
    },
    "StringReplaceOneCharWithString": {
        "count": 1,
        "size": 56
    },
    "StringSearch": {
        "count": 1,
        "size": 40
    },
    "StringSlice": {
        "count": 1,
        "size": 40
    },
    "StringSmall": {
        "count": 1,
        "size": 40
    },
    "StringSplit": {
        "count": 1,
        "size": 40
    },
    "StringSplitJS": {
        "count": 1,
        "size": 40
    },
    "StringSplitOnRegExp": {
        "count": 3,
        "size": 264
    },
    "StringStartsWith": {
        "count": 1,
        "size": 40
    },
    "StringStrike": {
        "count": 1,
        "size": 40
    },
    "StringSub": {
        "count": 1,
        "size": 40
    },
    "StringSubstr": {
        "count": 1,
        "size": 40
    },
    "StringSubstring": {
        "count": 1,
        "size": 40
    },
    "StringSup": {
        "count": 1,
        "size": 40
    },
    "StringToArray": {
        "count": 1,
        "size": 40
    },
    "StringToLocaleLowerCase": {
        "count": 1,
        "size": 48
    },
    "StringToLocaleUpperCase": {
        "count": 1,
        "size": 48
    },
    "StringToLowerCase": {
        "count": 1,
        "size": 48
    },
    "StringToLowerCaseJS": {
        "count": 1,
        "size": 48
    },
    "StringToNumber": {
        "count": 1,
        "size": 40
    },
    "StringToString": {
        "count": 1,
        "size": 40
    },
    "StringToUpperCase": {
        "count": 1,
        "size": 48
    },
    "StringToUpperCaseJS": {
        "count": 1,
        "size": 48
    },
    "StringTrim": {
        "count": 1,
        "size": 40
    },
    "StringTrimJS": {
        "count": 1,
        "size": 40
    },
    "StringTrimLeft": {
        "count": 1,
        "size": 40
    },
    "StringTrimRight": {
        "count": 1,
        "size": 40
    },
    "StringValueOf": {
        "count": 1,
        "size": 40
    },
    "Stringifier": {
        "count": 10,
        "size": 984
    },
    "StrongLoop": {
        "count": 1,
        "size": 40
    },
    "StrongOracleProbe": {
        "count": 4,
        "size": 368
    },
    "Strong_MQProbe": {
        "count": 4,
        "size": 360
    },
    "Su": {
        "count": 1,
        "size": 32
    },
    "Su_Mo_Tu_We_Th_Fr_Sa": {
        "count": 1,
        "size": 48
    },
    "SubString": {
        "count": 1,
        "size": 40
    },
    "SubStringRT": {
        "count": 1,
        "size": 40
    },
    "Sun": {
        "count": 1,
        "size": 32
    },
    "Sun_Mon_Tue_Wed_Thu_Fri_Sat": {
        "count": 1,
        "size": 56
    },
    "Sunday": {
        "count": 1,
        "size": 32
    },
    "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday": {
        "count": 1,
        "size": 80
    },
    "SuspendJSGeneratorObject": {
        "count": 1,
        "size": 48
    },
    "Switching Protocols": {
        "count": 1,
        "size": 48
    },
    "Symbol": {
        "count": 3,
        "size": 248
    },
    "Symbol.hasInstance": {
        "count": 1,
        "size": 48
    },
    "Symbol.isConcatSpreadable": {
        "count": 1,
        "size": 56
    },
    "Symbol.isRegExp": {
        "count": 1,
        "size": 40
    },
    "Symbol.iterator": {
        "count": 1,
        "size": 40
    },
    "Symbol.toStringTag": {
        "count": 1,
        "size": 48
    },
    "Symbol.unscopables": {
        "count": 1,
        "size": 48
    },
    "SymbolConstructor": {
        "count": 2,
        "size": 192
    },
    "SymbolDescription": {
        "count": 1,
        "size": 48
    },
    "SymbolFor": {
        "count": 1,
        "size": 40
    },
    "SymbolIsPrivate": {
        "count": 1,
        "size": 40
    },
    "SymbolKeyFor": {
        "count": 1,
        "size": 40
    },
    "SymbolRegistry": {
        "count": 1,
        "size": 40
    },
    "SymbolToString": {
        "count": 1,
        "size": 40
    },
    "SymbolValueOf": {
        "count": 1,
        "size": 40
    },
    "SyncWriteStream": {
        "count": 5,
        "size": 472
    },
    "SyntaxError": {
        "count": 3,
        "size": 256
    },
    "SysLogStream": {
        "count": 1,
        "size": 40
    },
    "SystemBreak": {
        "count": 1,
        "size": 40
    },
    "T": {
        "count": 1,
        "size": 32
    },
    "TCP": {
        "count": 5,
        "size": 312
    },
    "TCPConnectWrap": {
        "count": 4,
        "size": 296
    },
    "TCPWRAP": {
        "count": 2,
        "size": 392
    },
    "TEST_GRACEFUL_FS_GLOBAL_PATCH": {
        "count": 1,
        "size": 56
    },
    "TILDE": {
        "count": 1,
        "size": 32
    },
    "TILDELOOSE": {
        "count": 1,
        "size": 40
    },
    "TILDETRIM": {
        "count": 1,
        "size": 40
    },
    "TIMEOUT": {
        "count": 1,
        "size": 32
    },
    "TIMEOUT_MAX": {
        "count": 1,
        "size": 40
    },
    "TIMER": {
        "count": 2,
        "size": 64
    },
    "TIMERWRAP": {
        "count": 6,
        "size": 1080
    },
    "TLS": {
        "count": 2,
        "size": 64
    },
    "TLS-LEGACY": {
        "count": 2,
        "size": 80
    },
    "TLSSocket": {
        "count": 3,
        "size": 256
    },
    "TLSWrap": {
        "count": 4,
        "size": 280
    },
    "TO_NAME": {
        "count": 3,
        "size": 248
    },
    "TO_NUMBER": {
        "count": 3,
        "size": 256
    },
    "TO_OBJECT": {
        "count": 3,
        "size": 256
    },
    "TO_STRING": {
        "count": 3,
        "size": 256
    },
    "TRACE": {
        "count": 1,
        "size": 32
    },
    "TRACER": {
        "count": 1,
        "size": 32
    },
    "TTY": {
        "count": 6,
        "size": 344
    },
    "TTYWRAP": {
        "count": 3,
        "size": 912
    },
    "TTYWrap": {
        "count": 1,
        "size": 32
    },
    "TXT": {
        "count": 1,
        "size": 32
    },
    "Temporary Redirect": {
        "count": 1,
        "size": 48
    },
    "Th": {
        "count": 1,
        "size": 32
    },
    "The constructor to `inherits` must not be ": {
        "count": 1,
        "size": 72
    },
    "The super constructor to `inherits` must ": {
        "count": 1,
        "size": 72
    },
    "The super constructor to `inherits` must not ": {
        "count": 1,
        "size": 72
    },
    "TheHole": {
        "count": 1,
        "size": 32
    },
    "This handle type can't be sent": {
        "count": 1,
        "size": 56
    },
    "This socket is closed.": {
        "count": 1,
        "size": 48
    },
    "Throw": {
        "count": 1,
        "size": 32
    },
    "ThrowArrayNotSubclassableError": {
        "count": 1,
        "size": 56
    },
    "ThrowConstAssignError": {
        "count": 1,
        "size": 48
    },
    "ThrowConstructorNonCallableError": {
        "count": 1,
        "size": 56
    },
    "ThrowIfStaticPrototype": {
        "count": 1,
        "size": 48
    },
    "ThrowIteratorResultNotAnObject": {
        "count": 1,
        "size": 56
    },
    "ThrowNonMethodError": {
        "count": 1,
        "size": 48
    },
    "ThrowNotDateError": {
        "count": 1,
        "size": 48
    },
    "ThrowReferenceError": {
        "count": 1,
        "size": 48
    },
    "ThrowStaticPrototypeError": {
        "count": 1,
        "size": 56
    },
    "ThrowStrongModeImplicitConversion": {
        "count": 1,
        "size": 64
    },
    "ThrowStrongModeTooFewArguments": {
        "count": 1,
        "size": 56
    },
    "ThrowTypeError": {
        "count": 5,
        "size": 472
    },
    "ThrowUnsupportedSuperError": {
        "count": 1,
        "size": 56
    },
    "Thu": {
        "count": 1,
        "size": 32
    },
    "Thursday": {
        "count": 1,
        "size": 32
    },
    "TickObject": {
        "count": 3,
        "size": 256
    },
    "TimeClip": {
        "count": 3,
        "size": 248
    },
    "TimeInYear": {
        "count": 2,
        "size": 184
    },
    "TimeString": {
        "count": 3,
        "size": 256
    },
    "TimeStringUTC": {
        "count": 3,
        "size": 256
    },
    "Timeout": {
        "count": 6,
        "size": 752
    },
    "Timeout.ref": {
        "count": 1,
        "size": 40
    },
    "Timer": {
        "count": 11,
        "size": 656
    },
    "Timer.stop": {
        "count": 1,
        "size": 40
    },
    "ToBool": {
        "count": 1,
        "size": 32
    },
    "ToBoolean": {
        "count": 3,
        "size": 256
    },
    "ToCompletePropertyDescriptor": {
        "count": 3,
        "size": 272
    },
    "ToDetailString": {
        "count": 3,
        "size": 256
    },
    "ToFastProperties": {
        "count": 1,
        "size": 40
    },
    "ToInt32": {
        "count": 3,
        "size": 248
    },
    "ToInteger": {
        "count": 3,
        "size": 256
    },
    "ToLength": {
        "count": 3,
        "size": 248
    },
    "ToMethod": {
        "count": 1,
        "size": 32
    },
    "ToName": {
        "count": 3,
        "size": 248
    },
    "ToNameArray": {
        "count": 3,
        "size": 256
    },
    "ToNumber": {
        "count": 3,
        "size": 248
    },
    "ToObject": {
        "count": 3,
        "size": 248
    },
    "ToPositiveInteger": {
        "count": 3,
        "size": 264
    },
    "ToPrimitive": {
        "count": 3,
        "size": 256
    },
    "ToPropertyDescriptor": {
        "count": 3,
        "size": 264
    },
    "ToString": {
        "count": 3,
        "size": 248
    },
    "ToStringCheckErrorObject": {
        "count": 3,
        "size": 264
    },
    "ToUint32": {
        "count": 3,
        "size": 248
    },
    "Too Many Requests": {
        "count": 1,
        "size": 48
    },
    "Trace": {
        "count": 1,
        "size": 32
    },
    "TraceEnter": {
        "count": 1,
        "size": 40
    },
    "TraceExit": {
        "count": 1,
        "size": 40
    },
    "TraceProbe": {
        "count": 4,
        "size": 352
    },
    "Tracing": {
        "count": 1,
        "size": 32
    },
    "Transform": {
        "count": 3,
        "size": 256
    },
    "TransformState": {
        "count": 22,
        "size": 1624
    },
    "TransitionElementsKind": {
        "count": 1,
        "size": 48
    },
    "TrimRegExp": {
        "count": 3,
        "size": 256
    },
    "TruncateString": {
        "count": 1,
        "size": 40
    },
    "TryInstallOptimizedCode": {
        "count": 1,
        "size": 48
    },
    "TryMigrateInstance": {
        "count": 1,
        "size": 48
    },
    "Tu": {
        "count": 1,
        "size": 32
    },
    "Tue": {
        "count": 1,
        "size": 32
    },
    "Tuesday": {
        "count": 1,
        "size": 32
    },
    "TwoByteSeqStringGetChar": {
        "count": 1,
        "size": 48
    },
    "TwoByteSeqStringSetChar": {
        "count": 1,
        "size": 48
    },
    "TwoDigitString": {
        "count": 3,
        "size": 256
    },
    "TypeError": {
        "count": 3,
        "size": 256
    },
    "TypeMapAddType": {
        "count": 3,
        "size": 256
    },
    "TypeMapCreate": {
        "count": 3,
        "size": 256
    },
    "TypeMapCreateFromList": {
        "count": 3,
        "size": 264
    },
    "TypeMapHasType": {
        "count": 3,
        "size": 256
    },
    "TypeMapIsDisjointFrom": {
        "count": 3,
        "size": 264
    },
    "TypeMapRemoveType": {
        "count": 3,
        "size": 264
    },
    "TypedArrayComparefn": {
        "count": 3,
        "size": 264
    },
    "TypedArrayCopyWithin": {
        "count": 1,
        "size": 48
    },
    "TypedArrayEvery": {
        "count": 1,
        "size": 40
    },
    "TypedArrayFill": {
        "count": 1,
        "size": 40
    },
    "TypedArrayFilter": {
        "count": 1,
        "size": 40
    },
    "TypedArrayFind": {
        "count": 1,
        "size": 40
    },
    "TypedArrayFindIndex": {
        "count": 1,
        "size": 48
    },
    "TypedArrayForEach": {
        "count": 1,
        "size": 48
    },
    "TypedArrayFrom": {
        "count": 1,
        "size": 40
    },
    "TypedArrayGetBuffer": {
        "count": 1,
        "size": 48
    },
    "TypedArrayGetLength": {
        "count": 1,
        "size": 48
    },
    "TypedArrayGetToStringTag": {
        "count": 1,
        "size": 48
    },
    "TypedArrayIndexOf": {
        "count": 1,
        "size": 48
    },
    "TypedArrayInitialize": {
        "count": 1,
        "size": 48
    },
    "TypedArrayInitializeFromArrayLike": {
        "count": 1,
        "size": 64
    },
    "TypedArrayJoin": {
        "count": 1,
        "size": 40
    },
    "TypedArrayLastIndexOf": {
        "count": 1,
        "size": 48
    },
    "TypedArrayMap": {
        "count": 1,
        "size": 40
    },
    "TypedArrayMaxSizeInHeap": {
        "count": 1,
        "size": 48
    },
    "TypedArrayOf": {
        "count": 1,
        "size": 40
    },
    "TypedArrayReduce": {
        "count": 1,
        "size": 40
    },
    "TypedArrayReduceRight": {
        "count": 1,
        "size": 48
    },
    "TypedArrayReverse": {
        "count": 1,
        "size": 48
    },
    "TypedArraySet": {
        "count": 1,
        "size": 40
    },
    "TypedArraySetFastCases": {
        "count": 1,
        "size": 48
    },
    "TypedArraySetFromArrayLike": {
        "count": 3,
        "size": 272
    },
    "TypedArraySetFromOverlappingTypedArray": {
        "count": 3,
        "size": 280
    },
    "TypedArraySlice": {
        "count": 1,
        "size": 40
    },
    "TypedArraySome": {
        "count": 1,
        "size": 40
    },
    "TypedArraySort": {
        "count": 1,
        "size": 40
    },
    "TypedArrayToLocaleString": {
        "count": 1,
        "size": 48
    },
    "TypedArrayToString": {
        "count": 1,
        "size": 48
    },
    "U": {
        "count": 1,
        "size": 32
    },
    "UDP": {
        "count": 5,
        "size": 312
    },
    "UDPWRAP": {
        "count": 2,
        "size": 280
    },
    "UNLOCK": {
        "count": 1,
        "size": 32
    },
    "UNSUBSCRIBE": {
        "count": 1,
        "size": 40
    },
    "UNZIP": {
        "count": 1,
        "size": 32
    },
    "URI Too Long": {
        "count": 1,
        "size": 40
    },
    "URIAddEncodedOctetToBuffer": {
        "count": 3,
        "size": 272
    },
    "URIDecode": {
        "count": 1,
        "size": 40
    },
    "URIDecodeComponent": {
        "count": 1,
        "size": 48
    },
    "URIDecodeOctets": {
        "count": 3,
        "size": 256
    },
    "URIEncode": {
        "count": 1,
        "size": 40
    },
    "URIEncodeComponent": {
        "count": 1,
        "size": 48
    },
    "URIEncodeOctets": {
        "count": 3,
        "size": 256
    },
    "URIEncodePair": {
        "count": 3,
        "size": 256
    },
    "URIEncodeSingle": {
        "count": 3,
        "size": 256
    },
    "URIError": {
        "count": 3,
        "size": 248
    },
    "URIEscape": {
        "count": 1,
        "size": 40
    },
    "URIEscapeJS": {
        "count": 1,
        "size": 40
    },
    "URIHexCharsToCharCode": {
        "count": 3,
        "size": 264
    },
    "URIUnescape": {
        "count": 1,
        "size": 40
    },
    "URIUnescapeJS": {
        "count": 1,
        "size": 40
    },
    "USERPROFILE": {
        "count": 1,
        "size": 40
    },
    "UTC": {
        "count": 5,
        "size": 464
    },
    "UV_E2BIG": {
        "count": 1,
        "size": 32
    },
    "UV_EACCES": {
        "count": 1,
        "size": 40
    },
    "UV_EADDRINUSE": {
        "count": 1,
        "size": 40
    },
    "UV_EADDRNOTAVAIL": {
        "count": 1,
        "size": 40
    },
    "UV_EAFNOSUPPORT": {
        "count": 1,
        "size": 40
    },
    "UV_EAGAIN": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_ADDRFAMILY": {
        "count": 1,
        "size": 48
    },
    "UV_EAI_AGAIN": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_BADFLAGS": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_BADHINTS": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_CANCELED": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_FAIL": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_FAMILY": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_MEMORY": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_NODATA": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_NONAME": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_OVERFLOW": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_PROTOCOL": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_SERVICE": {
        "count": 1,
        "size": 40
    },
    "UV_EAI_SOCKTYPE": {
        "count": 1,
        "size": 40
    },
    "UV_EALREADY": {
        "count": 1,
        "size": 40
    },
    "UV_EBADF": {
        "count": 1,
        "size": 32
    },
    "UV_EBUSY": {
        "count": 1,
        "size": 32
    },
    "UV_ECANCELED": {
        "count": 1,
        "size": 40
    },
    "UV_ECHARSET": {
        "count": 1,
        "size": 40
    },
    "UV_ECONNABORTED": {
        "count": 1,
        "size": 40
    },
    "UV_ECONNREFUSED": {
        "count": 1,
        "size": 40
    },
    "UV_ECONNRESET": {
        "count": 1,
        "size": 40
    },
    "UV_EDESTADDRREQ": {
        "count": 1,
        "size": 40
    },
    "UV_EEXIST": {
        "count": 1,
        "size": 40
    },
    "UV_EFAULT": {
        "count": 1,
        "size": 40
    },
    "UV_EFBIG": {
        "count": 1,
        "size": 32
    },
    "UV_EHOSTDOWN": {
        "count": 1,
        "size": 40
    },
    "UV_EHOSTUNREACH": {
        "count": 1,
        "size": 40
    },
    "UV_EINTR": {
        "count": 1,
        "size": 32
    },
    "UV_EINVAL": {
        "count": 1,
        "size": 40
    },
    "UV_EIO": {
        "count": 1,
        "size": 32
    },
    "UV_EISCONN": {
        "count": 1,
        "size": 40
    },
    "UV_EISDIR": {
        "count": 1,
        "size": 40
    },
    "UV_ELOOP": {
        "count": 1,
        "size": 32
    },
    "UV_EMFILE": {
        "count": 1,
        "size": 40
    },
    "UV_EMLINK": {
        "count": 1,
        "size": 40
    },
    "UV_EMSGSIZE": {
        "count": 1,
        "size": 40
    },
    "UV_ENAMETOOLONG": {
        "count": 1,
        "size": 40
    },
    "UV_ENETDOWN": {
        "count": 1,
        "size": 40
    },
    "UV_ENETUNREACH": {
        "count": 1,
        "size": 40
    },
    "UV_ENFILE": {
        "count": 1,
        "size": 40
    },
    "UV_ENOBUFS": {
        "count": 1,
        "size": 40
    },
    "UV_ENODEV": {
        "count": 1,
        "size": 40
    },
    "UV_ENOENT": {
        "count": 1,
        "size": 40
    },
    "UV_ENOMEM": {
        "count": 1,
        "size": 40
    },
    "UV_ENONET": {
        "count": 1,
        "size": 40
    },
    "UV_ENOPROTOOPT": {
        "count": 1,
        "size": 40
    },
    "UV_ENOSPC": {
        "count": 1,
        "size": 40
    },
    "UV_ENOSYS": {
        "count": 1,
        "size": 40
    },
    "UV_ENOTCONN": {
        "count": 1,
        "size": 40
    },
    "UV_ENOTDIR": {
        "count": 1,
        "size": 40
    },
    "UV_ENOTEMPTY": {
        "count": 1,
        "size": 40
    },
    "UV_ENOTSOCK": {
        "count": 1,
        "size": 40
    },
    "UV_ENOTSUP": {
        "count": 1,
        "size": 40
    },
    "UV_ENXIO": {
        "count": 1,
        "size": 32
    },
    "UV_EOF": {
        "count": 1,
        "size": 32
    },
    "UV_EPERM": {
        "count": 1,
        "size": 32
    },
    "UV_EPIPE": {
        "count": 1,
        "size": 32
    },
    "UV_EPROTO": {
        "count": 1,
        "size": 40
    },
    "UV_EPROTONOSUPPORT": {
        "count": 1,
        "size": 48
    },
    "UV_EPROTOTYPE": {
        "count": 1,
        "size": 40
    },
    "UV_ERANGE": {
        "count": 1,
        "size": 40
    },
    "UV_EROFS": {
        "count": 1,
        "size": 32
    },
    "UV_ESHUTDOWN": {
        "count": 1,
        "size": 40
    },
    "UV_ESPIPE": {
        "count": 1,
        "size": 40
    },
    "UV_ESRCH": {
        "count": 1,
        "size": 32
    },
    "UV_ETIMEDOUT": {
        "count": 1,
        "size": 40
    },
    "UV_ETXTBSY": {
        "count": 1,
        "size": 40
    },
    "UV_EXDEV": {
        "count": 1,
        "size": 32
    },
    "UV_UDP_REUSEADDR": {
        "count": 1,
        "size": 40
    },
    "UV_UNKNOWN": {
        "count": 1,
        "size": 40
    },
    "Uint16Array": {
        "count": 3,
        "size": 256
    },
    "Uint16ArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 280
    },
    "Uint16ArrayConstructByArrayLike": {
        "count": 3,
        "size": 272
    },
    "Uint16ArrayConstructByIterable": {
        "count": 3,
        "size": 272
    },
    "Uint16ArrayConstructByLength": {
        "count": 3,
        "size": 272
    },
    "Uint16ArrayConstructor": {
        "count": 2,
        "size": 192
    },
    "Uint16ArraySubArray": {
        "count": 1,
        "size": 48
    },
    "Uint16Array_GetBuffer": {
        "count": 1,
        "size": 48
    },
    "Uint16Array_GetByteLength": {
        "count": 1,
        "size": 56
    },
    "Uint16Array_GetByteOffset": {
        "count": 1,
        "size": 56
    },
    "Uint16Array_GetLength": {
        "count": 1,
        "size": 48
    },
    "Uint32Array": {
        "count": 7,
        "size": 576
    },
    "Uint32ArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 280
    },
    "Uint32ArrayConstructByArrayLike": {
        "count": 3,
        "size": 272
    },
    "Uint32ArrayConstructByIterable": {
        "count": 3,
        "size": 272
    },
    "Uint32ArrayConstructByLength": {
        "count": 3,
        "size": 272
    },
    "Uint32ArrayConstructor": {
        "count": 2,
        "size": 192
    },
    "Uint32ArraySubArray": {
        "count": 1,
        "size": 48
    },
    "Uint32Array_GetBuffer": {
        "count": 1,
        "size": 48
    },
    "Uint32Array_GetByteLength": {
        "count": 1,
        "size": 56
    },
    "Uint32Array_GetByteOffset": {
        "count": 1,
        "size": 56
    },
    "Uint32Array_GetLength": {
        "count": 1,
        "size": 48
    },
    "Uint8Array": {
        "count": 41,
        "size": 3296
    },
    "Uint8Array.length": {
        "count": 1,
        "size": 48
    },
    "Uint8Array.subarray": {
        "count": 1,
        "size": 48
    },
    "Uint8ArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 272
    },
    "Uint8ArrayConstructByArrayLike": {
        "count": 3,
        "size": 272
    },
    "Uint8ArrayConstructByIterable": {
        "count": 3,
        "size": 272
    },
    "Uint8ArrayConstructByLength": {
        "count": 3,
        "size": 272
    },
    "Uint8ArrayConstructor": {
        "count": 2,
        "size": 192
    },
    "Uint8ArraySubArray": {
        "count": 1,
        "size": 48
    },
    "Uint8Array_GetBuffer": {
        "count": 1,
        "size": 48
    },
    "Uint8Array_GetByteLength": {
        "count": 1,
        "size": 48
    },
    "Uint8Array_GetByteOffset": {
        "count": 1,
        "size": 48
    },
    "Uint8Array_GetLength": {
        "count": 1,
        "size": 48
    },
    "Uint8ClampedArray": {
        "count": 3,
        "size": 264
    },
    "Uint8ClampedArrayConstructByArrayBuffer": {
        "count": 3,
        "size": 280
    },
    "Uint8ClampedArrayConstructByArrayLike": {
        "count": 3,
        "size": 280
    },
    "Uint8ClampedArrayConstructByIterable": {
        "count": 3,
        "size": 280
    },
    "Uint8ClampedArrayConstructByLength": {
        "count": 3,
        "size": 280
    },
    "Uint8ClampedArrayConstructor": {
        "count": 2,
        "size": 200
    },
    "Uint8ClampedArraySubArray": {
        "count": 1,
        "size": 56
    },
    "Uint8ClampedArray_GetBuffer": {
        "count": 1,
        "size": 56
    },
    "Uint8ClampedArray_GetByteLength": {
        "count": 1,
        "size": 56
    },
    "Uint8ClampedArray_GetByteOffset": {
        "count": 1,
        "size": 56
    },
    "Uint8ClampedArray_GetLength": {
        "count": 1,
        "size": 56
    },
    "Ultron": {
        "count": 3,
        "size": 248
    },
    "Unauthorized": {
        "count": 1,
        "size": 40
    },
    "UnblockConcurrentRecompilation": {
        "count": 1,
        "size": 56
    },
    "Uncaught, unspecified \"error\" event.": {
        "count": 1,
        "size": 64
    },
    "Uncaught, unspecified \"error\" event. (": {
        "count": 1,
        "size": 64
    },
    "Unknown encoding: ": {
        "count": 1,
        "size": 48
    },
    "Unknown file open flag: ": {
        "count": 1,
        "size": 48
    },
    "Unlikely": {
        "count": 1,
        "size": 32
    },
    "Unordered Collection": {
        "count": 1,
        "size": 48
    },
    "Unprocessable Entity": {
        "count": 1,
        "size": 48
    },
    "Unsupported Media Type": {
        "count": 1,
        "size": 48
    },
    "UnwindAndFindExceptionHandler": {
        "count": 1,
        "size": 56
    },
    "Unzip": {
        "count": 3,
        "size": 248
    },
    "Upgrade Required": {
        "count": 1,
        "size": 40
    },
    "Url": {
        "count": 3,
        "size": 248
    },
    "Url.format": {
        "count": 1,
        "size": 40
    },
    "Url.parse": {
        "count": 1,
        "size": 40
    },
    "Url.resolve": {
        "count": 1,
        "size": 40
    },
    "Use Proxy": {
        "count": 1,
        "size": 40
    },
    "Use Server.getConnections method instead.": {
        "count": 1,
        "size": 72
    },
    "Use emitter.setMaxListeners() to increase limit.": {
        "count": 1,
        "size": 72
    },
    "Use options.stdio instead.": {
        "count": 1,
        "size": 56
    },
    "Use os.networkInterfaces instead.": {
        "count": 1,
        "size": 64
    },
    "Use process.stdin.setRawMode instead.": {
        "count": 1,
        "size": 64
    },
    "Use tls.createSecureContext instead.": {
        "count": 1,
        "size": 64
    },
    "UseSparseVariant": {
        "count": 3,
        "size": 256
    },
    "V": {
        "count": 3,
        "size": 248
    },
    "V4MAPPED": {
        "count": 1,
        "size": 32
    },
    "VERSION": {
        "count": 1,
        "size": 32
    },
    "Validation": {
        "count": 1,
        "size": 40
    },
    "ValueOf": {
        "count": 1,
        "size": 32
    },
    "Variant Also Negotiates": {
        "count": 1,
        "size": 48
    },
    "Verify": {
        "count": 3,
        "size": 248
    },
    "VersionField": {
        "count": 1,
        "size": 40
    },
    "W": {
        "count": 1,
        "size": 32
    },
    "WARN": {
        "count": 1,
        "size": 32
    },
    "WEEK": {
        "count": 1,
        "size": 32
    },
    "WEEKDAY": {
        "count": 1,
        "size": 32
    },
    "WS": {
        "count": 1,
        "size": 32
    },
    "WW": {
        "count": 1,
        "size": 32
    },
    "W_OK": {
        "count": 1,
        "size": 32
    },
    "We": {
        "count": 1,
        "size": 32
    },
    "WeakCollectionDelete": {
        "count": 1,
        "size": 48
    },
    "WeakCollectionGet": {
        "count": 1,
        "size": 48
    },
    "WeakCollectionHas": {
        "count": 1,
        "size": 48
    },
    "WeakCollectionInitialize": {
        "count": 1,
        "size": 48
    },
    "WeakCollectionSet": {
        "count": 1,
        "size": 48
    },
    "WeakMap": {
        "count": 5,
        "size": 328
    },
    "WeakSet": {
        "count": 3,
        "size": 248
    },
    "WebSocket": {
        "count": 3,
        "size": 256
    },
    "WebSocketServer": {
        "count": 3,
        "size": 256
    },
    "Websocket": {
        "count": 1,
        "size": 40
    },
    "WebsocketChannel": {
        "count": 3,
        "size": 256
    },
    "Wed": {
        "count": 1,
        "size": 32
    },
    "Wednesday": {
        "count": 1,
        "size": 40
    },
    "Wo": {
        "count": 1,
        "size": 32
    },
    "Worker": {
        "count": 4,
        "size": 368
    },
    "Worker.kill": {
        "count": 1,
        "size": 40
    },
    "Worker.send": {
        "count": 1,
        "size": 40
    },
    "Writable": {
        "count": 3,
        "size": 248
    },
    "Writable.end": {
        "count": 1,
        "size": 40
    },
    "WritableState": {
        "count": 34,
        "size": 6208
    },
    "WriteReq": {
        "count": 4,
        "size": 368
    },
    "WriteStream": {
        "count": 11,
        "size": 1112
    },
    "WriteStream$open": {
        "count": 3,
        "size": 256
    },
    "WriteWrap": {
        "count": 4,
        "size": 296
    },
    "X": {
        "count": 1,
        "size": 32
    },
    "XFCE": {
        "count": 1,
        "size": 32
    },
    "XRANGE": {
        "count": 1,
        "size": 32
    },
    "XRANGEIDENTIFIER": {
        "count": 1,
        "size": 40
    },
    "XRANGEIDENTIFIERLOOSE": {
        "count": 1,
        "size": 48
    },
    "XRANGELOOSE": {
        "count": 1,
        "size": 40
    },
    "XRANGEPLAIN": {
        "count": 1,
        "size": 40
    },
    "XRANGEPLAINLOOSE": {
        "count": 1,
        "size": 40
    },
    "X_OK": {
        "count": 1,
        "size": 32
    },
    "Y": {
        "count": 1,
        "size": 32
    },
    "YEAR": {
        "count": 1,
        "size": 32
    },
    "YY": {
        "count": 1,
        "size": 32
    },
    "YYYY": {
        "count": 1,
        "size": 32
    },
    "YYYY-DDD": {
        "count": 1,
        "size": 32
    },
    "YYYY-MM": {
        "count": 1,
        "size": 32
    },
    "YYYY-MM-DD": {
        "count": 1,
        "size": 40
    },
    "YYYY-MM-DDTHH:mm:ssZ": {
        "count": 1,
        "size": 48
    },
    "YYYY-MM-DDTHH:mm:ss[Z]": {
        "count": 1,
        "size": 48
    },
    "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]": {
        "count": 1,
        "size": 56
    },
    "YYYYDDD": {
        "count": 1,
        "size": 32
    },
    "YYYYMMDD": {
        "count": 1,
        "size": 32
    },
    "YYYYY": {
        "count": 1,
        "size": 32
    },
    "YYYYYY": {
        "count": 1,
        "size": 32
    },
    "YYYYYY-MM-DD": {
        "count": 1,
        "size": 40
    },
    "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]": {
        "count": 1,
        "size": 56
    },
    "YYYYYYMMDD": {
        "count": 1,
        "size": 40
    },
    "You cannot use IPC with synchronous forks": {
        "count": 1,
        "size": 72
    },
    "Z": {
        "count": 1,
        "size": 32
    },
    "ZERO_RETURN": {
        "count": 1,
        "size": 40
    },
    "ZLIB_VERNUM": {
        "count": 1,
        "size": 40
    },
    "ZLIB_VERSION": {
        "count": 1,
        "size": 40
    },
    "ZZ": {
        "count": 1,
        "size": 32
    },
    "Z_BEST_COMPRESSION": {
        "count": 1,
        "size": 48
    },
    "Z_BEST_SPEED": {
        "count": 1,
        "size": 40
    },
    "Z_BLOCK": {
        "count": 1,
        "size": 32
    },
    "Z_BUF_ERROR": {
        "count": 1,
        "size": 40
    },
    "Z_DATA_ERROR": {
        "count": 1,
        "size": 40
    },
    "Z_DEFAULT_CHUNK": {
        "count": 1,
        "size": 40
    },
    "Z_DEFAULT_COMPRESSION": {
        "count": 1,
        "size": 48
    },
    "Z_DEFAULT_LEVEL": {
        "count": 1,
        "size": 40
    },
    "Z_DEFAULT_MEMLEVEL": {
        "count": 1,
        "size": 48
    },
    "Z_DEFAULT_STRATEGY": {
        "count": 1,
        "size": 48
    },
    "Z_DEFAULT_WINDOWBITS": {
        "count": 1,
        "size": 48
    },
    "Z_ERRNO": {
        "count": 1,
        "size": 32
    },
    "Z_FILTERED": {
        "count": 1,
        "size": 40
    },
    "Z_FINISH": {
        "count": 1,
        "size": 32
    },
    "Z_FIXED": {
        "count": 1,
        "size": 32
    },
    "Z_FULL_FLUSH": {
        "count": 1,
        "size": 40
    },
    "Z_HUFFMAN_ONLY": {
        "count": 1,
        "size": 40
    },
    "Z_MAX_CHUNK": {
        "count": 1,
        "size": 40
    },
    "Z_MAX_LEVEL": {
        "count": 1,
        "size": 40
    },
    "Z_MAX_MEMLEVEL": {
        "count": 1,
        "size": 40
    },
    "Z_MAX_WINDOWBITS": {
        "count": 1,
        "size": 40
    },
    "Z_MEM_ERROR": {
        "count": 1,
        "size": 40
    },
    "Z_MIN_CHUNK": {
        "count": 1,
        "size": 40
    },
    "Z_MIN_LEVEL": {
        "count": 1,
        "size": 40
    },
    "Z_MIN_MEMLEVEL": {
        "count": 1,
        "size": 40
    },
    "Z_MIN_WINDOWBITS": {
        "count": 1,
        "size": 40
    },
    "Z_NEED_DICT": {
        "count": 1,
        "size": 40
    },
    "Z_NO_COMPRESSION": {
        "count": 1,
        "size": 40
    },
    "Z_NO_FLUSH": {
        "count": 1,
        "size": 40
    },
    "Z_OK": {
        "count": 1,
        "size": 32
    },
    "Z_PARTIAL_FLUSH": {
        "count": 1,
        "size": 40
    },
    "Z_RLE": {
        "count": 1,
        "size": 32
    },
    "Z_STREAM_END": {
        "count": 1,
        "size": 40
    },
    "Z_STREAM_ERROR": {
        "count": 1,
        "size": 40
    },
    "Z_SYNC_FLUSH": {
        "count": 1,
        "size": 40
    },
    "Z_VERSION_ERROR": {
        "count": 1,
        "size": 40
    },
    "Zlib": {
        "count": 6,
        "size": 496
    },
    "Zlib._flush": {
        "count": 1,
        "size": 40
    },
    "Zlib.close": {
        "count": 1,
        "size": 40
    },
    "Zlib.flush": {
        "count": 1,
        "size": 40
    },
    "Zlib.params": {
        "count": 1,
        "size": 40
    },
    "Zlib.reset": {
        "count": 1,
        "size": 40
    },
    "Z|[+-]\\d\\d(?::?\\d\\d)?": {
        "count": 5,
        "size": 336
    },
    "Z|[+-]\\d\\d:?\\d\\d": {
        "count": 3,
        "size": 184
    },
    "[": {
        "count": 1,
        "size": 32
    },
    "[\"statsd://:33209\"]": {
        "count": 1,
        "size": 48
    },
    "[&<>\"'`]": {
        "count": 4,
        "size": 248
    },
    "['\\n\\r\\u2028\\u2029\\\\]": {
        "count": 3,
        "size": 192
    },
    "[+-]?\\d+": {
        "count": 3,
        "size": 176
    },
    "[+-]?\\d+(\\.\\d{1,3})?": {
        "count": 3,
        "size": 192
    },
    "[+-]?\\d{1,6}": {
        "count": 3,
        "size": 184
    },
    "[+-]?\\d{6}": {
        "count": 3,
        "size": 184
    },
    "[+-]\\d{10}": {
        "count": 3,
        "size": 184
    },
    "[+-]\\d{6}-\\d\\d-\\d\\d": {
        "count": 3,
        "size": 192
    },
    "[, encoding]) instead.": {
        "count": 1,
        "size": 48
    },
    "[,=]+": {
        "count": 2,
        "size": 104
    },
    "[,]+": {
        "count": 1,
        "size": 32
    },
    "[-_]": {
        "count": 2,
        "size": 104
    },
    "[0-9A-Za-z-]+": {
        "count": 2,
        "size": 112
    },
    "[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}": {
        "count": 3,
        "size": 280
    },
    "[0-9]+": {
        "count": 2,
        "size": 104
    },
    "[0-9]+|x|X|\\*": {
        "count": 2,
        "size": 112
    },
    "[:\\/]([^\\/]+\\/[^\\/]+?|[0-9]+)$": {
        "count": 2,
        "size": 128
    },
    "[?#]": {
        "count": 2,
        "size": 104
    },
    "[A-Z\\xc0-\\xd6\\xd8-\\xde]": {
        "count": 1,
        "size": 48
    },
    "[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?=[A-Z\\xc0-\\xd6\\xd8-\\xde][a-z\\xdf-\\xf6\\xf8-\\xff]+)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+|[A-Z\\xc0-\\xd6\\xd8-\\xde]+|[0-9]+": {
        "count": 2,
        "size": 256
    },
    "[Boolean: ": {
        "count": 1,
        "size": 40
    },
    "[Circular]": {
        "count": 1,
        "size": 40
    },
    "[Function": {
        "count": 1,
        "size": 40
    },
    "[Getter/Setter]": {
        "count": 1,
        "size": 40
    },
    "[Getter]": {
        "count": 1,
        "size": 32
    },
    "[Last] dddd [at] LT": {
        "count": 1,
        "size": 48
    },
    "[Number: ": {
        "count": 1,
        "size": 40
    },
    "[Object]": {
        "count": 1,
        "size": 32
    },
    "[Setter]": {
        "count": 1,
        "size": 32
    },
    "[String: ": {
        "count": 1,
        "size": 40
    },
    "[Symbol.iterator]": {
        "count": 9,
        "size": 792
    },
    "[Today at] LT": {
        "count": 1,
        "size": 40
    },
    "[Tomorrow at] LT": {
        "count": 1,
        "size": 40
    },
    "[Yesterday at] LT": {
        "count": 1,
        "size": 48
    },
    "[\\/\\\\]": {
        "count": 1,
        "size": 32
    },
    "[\\\\^$.*+?()[\\]{}|]": {
        "count": 2,
        "size": 120
    },
    "[\\s,]+": {
        "count": 2,
        "size": 104
    },
    "[\\u0300-\\u036f\\ufe20-\\ufe23]": {
        "count": 3,
        "size": 200
    },
    "[\\x2E\\u3002\\uFF0E\\uFF61]": {
        "count": 3,
        "size": 192
    },
    "[\\xc0-\\xd6\\xd8-\\xde\\xdf-\\xf6\\xf8-\\xff]": {
        "count": 3,
        "size": 208
    },
    "[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]": {
        "count": 3,
        "size": 240
    },
    "[^.]+\\.[^.]+\\.([^.]+)\\.(.*)": {
        "count": 3,
        "size": 200
    },
    "[^/]": {
        "count": 1,
        "size": 32
    },
    "[^/]*?": {
        "count": 1,
        "size": 32
    },
    "[^:]\\\\$": {
        "count": 1,
        "size": 32
    },
    "[^\\x20-\\x7E]": {
        "count": 3,
        "size": 184
    },
    "[a-z\\xdf-\\xf6\\xf8-\\xff]+": {
        "count": 1,
        "size": 48
    },
    "[ap]\\.?m?\\.?": {
        "count": 3,
        "size": 184
    },
    "[eval]": {
        "count": 1,
        "size": 32
    },
    "[object ": {
        "count": 1,
        "size": 32
    },
    "[object Arguments]": {
        "count": 1,
        "size": 48
    },
    "[object ArrayBuffer]": {
        "count": 1,
        "size": 48
    },
    "[object Array]": {
        "count": 1,
        "size": 40
    },
    "[object Boolean]": {
        "count": 1,
        "size": 40
    },
    "[object Date]": {
        "count": 1,
        "size": 40
    },
    "[object Error]": {
        "count": 1,
        "size": 40
    },
    "[object Float32Array]": {
        "count": 1,
        "size": 48
    },
    "[object Float64Array]": {
        "count": 1,
        "size": 48
    },
    "[object Function]": {
        "count": 1,
        "size": 48
    },
    "[object Int16Array]": {
        "count": 1,
        "size": 48
    },
    "[object Int32Array]": {
        "count": 1,
        "size": 48
    },
    "[object Int8Array]": {
        "count": 1,
        "size": 48
    },
    "[object Map]": {
        "count": 1,
        "size": 40
    },
    "[object Null]": {
        "count": 1,
        "size": 40
    },
    "[object Number]": {
        "count": 1,
        "size": 40
    },
    "[object Object]": {
        "count": 1,
        "size": 40
    },
    "[object RegExp]": {
        "count": 1,
        "size": 40
    },
    "[object Set]": {
        "count": 1,
        "size": 40
    },
    "[object String]": {
        "count": 1,
        "size": 40
    },
    "[object Uint16Array]": {
        "count": 1,
        "size": 48
    },
    "[object Uint32Array]": {
        "count": 1,
        "size": 48
    },
    "[object Uint8Array]": {
        "count": 1,
        "size": 48
    },
    "[object Uint8ClampedArray]": {
        "count": 1,
        "size": 56
    },
    "[object Undefined]": {
        "count": 1,
        "size": 48
    },
    "[object WeakMap]": {
        "count": 1,
        "size": 40
    },
    "[v=\\s]*": {
        "count": 1,
        "size": 32
    },
    "[v=\\s]*(": {
        "count": 1,
        "size": 32
    },
    "[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?": {
        "count": 2,
        "size": 320
    },
    "[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?": {
        "count": 2,
        "size": 296
    },
    "\\": {
        "count": 1,
        "size": 32
    },
    "\\\"": {
        "count": 2,
        "size": 64
    },
    "\\$": {
        "count": 1,
        "size": 32
    },
    "\\$&": {
        "count": 1,
        "size": 32
    },
    "\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}": {
        "count": 3,
        "size": 200
    },
    "\\'": {
        "count": 1,
        "size": 32
    },
    "\\*": {
        "count": 2,
        "size": 104
    },
    "\\.": {
        "count": 3,
        "size": 176
    },
    "\\..*": {
        "count": 2,
        "size": 104
    },
    "\\.count$": {
        "count": 3,
        "size": 176
    },
    "\\.timer$": {
        "count": 3,
        "size": 176
    },
    "\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\n\\\\]|\\\\.)*?\\1)\\]": {
        "count": 3,
        "size": 224
    },
    "\\/": {
        "count": 2,
        "size": 104
    },
    "\\/+": {
        "count": 3,
        "size": 176
    },
    "\\\\": {
        "count": 2,
        "size": 104
    },
    "\\\\\"": {
        "count": 2,
        "size": 104
    },
    "\\\\(\\\\)?": {
        "count": 3,
        "size": 176
    },
    "\\\\?\\pipe": {
        "count": 1,
        "size": 32
    },
    "\\\\\\\\": {
        "count": 1,
        "size": 32
    },
    "\\\\n": {
        "count": 1,
        "size": 32
    },
    "\\b": {
        "count": 1,
        "size": 32
    },
    "\\b(__p \\+=) '' \\+": {
        "count": 3,
        "size": 192
    },
    "\\b__p \\+= '';": {
        "count": 3,
        "size": 184
    },
    "\\bgfs4\\b": {
        "count": 2,
        "size": 104
    },
    "\\bgfs\\b": {
        "count": 2,
        "size": 104
    },
    "\\bsemver\\b": {
        "count": 1,
        "size": 40
    },
    "\\d": {
        "count": 3,
        "size": 176
    },
    "\\d*[a-zA-Z-][a-zA-Z0-9-]*": {
        "count": 2,
        "size": 128
    },
    "\\d+": {
        "count": 3,
        "size": 176
    },
    "\\d\\d": {
        "count": 5,
        "size": 320
    },
    "\\d\\d:\\d\\d": {
        "count": 3,
        "size": 184
    },
    "\\d\\d:\\d\\d:\\d\\d": {
        "count": 3,
        "size": 184
    },
    "\\d\\d:\\d\\d:\\d\\d,\\d+": {
        "count": 3,
        "size": 192
    },
    "\\d\\d:\\d\\d:\\d\\d\\.\\d+": {
        "count": 3,
        "size": 192
    },
    "\\d\\d?": {
        "count": 3,
        "size": 176
    },
    "\\d\\d\\d\\d": {
        "count": 3,
        "size": 176
    },
    "\\d\\d\\d\\d?": {
        "count": 3,
        "size": 184
    },
    "\\d\\d\\d\\d\\d\\d": {
        "count": 3,
        "size": 184
    },
    "\\d\\d\\d\\d\\d\\d,\\d+": {
        "count": 3,
        "size": 184
    },
    "\\d\\d\\d\\d\\d\\d?": {
        "count": 3,
        "size": 184
    },
    "\\d\\d\\d\\d\\d\\d\\.\\d+": {
        "count": 3,
        "size": 192
    },
    "\\d{1,2}": {
        "count": 4,
        "size": 248
    },
    "\\d{1,2}(th|st|nd|rd)": {
        "count": 3,
        "size": 192
    },
    "\\d{1,2}(th|st|nd|rd)|\\d{1,2}": {
        "count": 2,
        "size": 128
    },
    "\\d{1,3}": {
        "count": 3,
        "size": 176
    },
    "\\d{1,4}": {
        "count": 3,
        "size": 176
    },
    "\\d{3}": {
        "count": 3,
        "size": 176
    },
    "\\d{4}": {
        "count": 3,
        "size": 176
    },
    "\\d{4}-W\\d\\d": {
        "count": 3,
        "size": 184
    },
    "\\d{4}-W\\d\\d-\\d": {
        "count": 3,
        "size": 184
    },
    "\\d{4}-\\d\\d": {
        "count": 3,
        "size": 184
    },
    "\\d{4}-\\d\\d-\\d\\d": {
        "count": 3,
        "size": 184
    },
    "\\d{4}-\\d{3}": {
        "count": 3,
        "size": 184
    },
    "\\d{4}W\\d{2}": {
        "count": 3,
        "size": 184
    },
    "\\d{4}W\\d{3}": {
        "count": 3,
        "size": 184
    },
    "\\d{7}": {
        "count": 3,
        "size": 176
    },
    "\\d{8}": {
        "count": 3,
        "size": 176
    },
    "\\n": {
        "count": 4,
        "size": 248
    },
    "\\r?\\n": {
        "count": 2,
        "size": 104
    },
    "\\r\\n|\\r|\\n": {
        "count": 2,
        "size": 112
    },
    "\\s*": {
        "count": 1,
        "size": 32
    },
    "\\s*$": {
        "count": 1,
        "size": 32
    },
    "\\s*(": {
        "count": 1,
        "size": 32
    },
    "\\s*,\\s*": {
        "count": 2,
        "size": 104
    },
    "\\s+": {
        "count": 1,
        "size": 32
    },
    "\\s+-\\s+": {
        "count": 1,
        "size": 32
    },
    "\\u001b\\[\\d\\d?m": {
        "count": 1,
        "size": 40
    },
    "\\w*$": {
        "count": 3,
        "size": 176
    },
    "]": {
        "count": 1,
        "size": 32
    },
    "^": {
        "count": 1,
        "size": 32
    },
    "^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$": {
        "count": 1,
        "size": 56
    },
    "^\"|\"$": {
        "count": 2,
        "size": 104
    },
    "^((?:<|>)?=?)\\s*([v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$": {
        "count": 2,
        "size": 288
    },
    "^((?:<|>)?=?)\\s*(v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)$|^$": {
        "count": 2,
        "size": 304
    },
    "^((?:<|>)?=?)\\s*[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$": {
        "count": 2,
        "size": 336
    },
    "^((?:<|>)?=?)\\s*[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$": {
        "count": 2,
        "size": 320
    },
    "^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$": {
        "count": 3,
        "size": 312
    },
    "^(--debug|--debug-(brk|port))(=\\d+)?$": {
        "count": 1,
        "size": 64
    },
    "^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*": {
        "count": 1,
        "size": 80
    },
    "^(?:\\/\\/)|(?:\\\\\\\\).[\\\\/]pipe[\\\\/]": {
        "count": 1,
        "size": 64
    },
    "^(?:\\^)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$": {
        "count": 2,
        "size": 328
    },
    "^(?:\\^)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$": {
        "count": 2,
        "size": 304
    },
    "^(?:filter|map|reject)|While$": {
        "count": 2,
        "size": 128
    },
    "^(?:first|last)$": {
        "count": 2,
        "size": 112
    },
    "^(?:https?:\\/\\/|git:\\/\\/|git\\+ssh:\\/\\/|git\\+https:\\/\\/)?(?:[^@]+@)?": {
        "count": 2,
        "size": 168
    },
    "^(?:https?:\\/\\/|git:\\/\\/|git\\+ssh:\\/\\/|git\\+https:\\/\\/)?(?:[^@]+@)?(gist.github.com|github.com)[:\\/]([^\\/]+\\/[^\\/]+?|[0-9]+)$": {
        "count": 2,
        "size": 224
    },
    "^(?:join|pop|replace|shift)$": {
        "count": 2,
        "size": 128
    },
    "^(?:push|sort|unshift)$": {
        "count": 2,
        "size": 120
    },
    "^(?:replace|split)$": {
        "count": 2,
        "size": 120
    },
    "^(?:~>?)[v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$": {
        "count": 2,
        "size": 328
    },
    "^(?:~>?)[v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?$": {
        "count": 2,
        "size": 312
    },
    "^([+a-z0-9A-Z_-]{0,63})(.*)$": {
        "count": 3,
        "size": 200
    },
    "^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$": {
        "count": 3,
        "size": 232
    },
    "^([a-z0-9.+-]+:)": {
        "count": 3,
        "size": 184
    },
    "^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$": {
        "count": 3,
        "size": 240
    },
    "^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$": {
        "count": 3,
        "size": 232
    },
    "^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$": {
        "count": 3,
        "size": 232
    },
    "^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$": {
        "count": 3,
        "size": 208
    },
    "^--(control|port|addr|path)$": {
        "count": 2,
        "size": 128
    },
    "^--(control|port|addr|path)=": {
        "count": 2,
        "size": 128
    },
    "^--[^=]+=(.*)": {
        "count": 2,
        "size": 112
    },
    "^--cluster=": {
        "count": 2,
        "size": 112
    },
    "^--log=": {
        "count": 2,
        "size": 104
    },
    "^--metrics=": {
        "count": 2,
        "size": 112
    },
    "^--pid=": {
        "count": 2,
        "size": 104
    },
    "^-?[0-9]+$": {
        "count": 2,
        "size": 112
    },
    "^0.1.0": {
        "count": 1,
        "size": 32
    },
    "^0.1.1": {
        "count": 3,
        "size": 96
    },
    "^0.3.5": {
        "count": 1,
        "size": 32
    },
    "^0.5.0": {
        "count": 1,
        "size": 32
    },
    "^0.8.0": {
        "count": 2,
        "size": 64
    },
    "^0.9.0": {
        "count": 1,
        "size": 32
    },
    "^0[xX]": {
        "count": 3,
        "size": 176
    },
    "^1.0.0": {
        "count": 9,
        "size": 288
    },
    "^1.0.2": {
        "count": 1,
        "size": 32
    },
    "^1.1.0": {
        "count": 2,
        "size": 64
    },
    "^1.11.3": {
        "count": 1,
        "size": 32
    },
    "^1.13.1": {
        "count": 1,
        "size": 32
    },
    "^1.2.0": {
        "count": 3,
        "size": 96
    },
    "^1.2.1": {
        "count": 2,
        "size": 64
    },
    "^1.3.0": {
        "count": 1,
        "size": 32
    },
    "^1.3.1": {
        "count": 1,
        "size": 32
    },
    "^1.3.2": {
        "count": 1,
        "size": 32
    },
    "^1.4.1": {
        "count": 1,
        "size": 32
    },
    "^1.x": {
        "count": 1,
        "size": 32
    },
    "^2.0.0": {
        "count": 6,
        "size": 192
    },
    "^2.0.5": {
        "count": 1,
        "size": 32
    },
    "^2.1.1": {
        "count": 1,
        "size": 32
    },
    "^2.1.3": {
        "count": 1,
        "size": 32
    },
    "^2.2.0": {
        "count": 1,
        "size": 32
    },
    "^2.2.4": {
        "count": 1,
        "size": 32
    },
    "^2.3.0": {
        "count": 1,
        "size": 32
    },
    "^2.3.4": {
        "count": 1,
        "size": 32
    },
    "^2.6.0": {
        "count": 2,
        "size": 64
    },
    "^2.9.26": {
        "count": 1,
        "size": 32
    },
    "^2.x": {
        "count": 2,
        "size": 64
    },
    "^3.0.0": {
        "count": 1,
        "size": 32
    },
    "^3.10.0": {
        "count": 1,
        "size": 32
    },
    "^4.0.0": {
        "count": 1,
        "size": 32
    },
    "^4.1.1": {
        "count": 1,
        "size": 32
    },
    "^4.12.4": {
        "count": 1,
        "size": 32
    },
    "^4.2.1": {
        "count": 1,
        "size": 32
    },
    "^Connection$": {
        "count": 3,
        "size": 184
    },
    "^Content-Length$": {
        "count": 3,
        "size": 184
    },
    "^Date$": {
        "count": 3,
        "size": 176
    },
    "^Expect$": {
        "count": 3,
        "size": 176
    },
    "^LOG_": {
        "count": 1,
        "size": 32
    },
    "^Trailer$": {
        "count": 3,
        "size": 184
    },
    "^Transfer-Encoding$": {
        "count": 3,
        "size": 192
    },
    "^Z": {
        "count": 2,
        "size": 104
    },
    "^[+a-z0-9A-Z_-]{0,63}$": {
        "count": 3,
        "size": 192
    },
    "^[0-9]+$": {
        "count": 3,
        "size": 176
    },
    "^[:!,]|[\\\\^$.*+?()[\\]{}|\\/]|(^[0-9a-fA-Fnrtuvx])|([\\n\\r\\u2028\\u2029])": {
        "count": 4,
        "size": 312
    },
    "^[\\/]*": {
        "count": 5,
        "size": 320
    },
    "^[v=\\s]*([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$": {
        "count": 2,
        "size": 264
    },
    "^\\#\\!.*": {
        "count": 2,
        "size": 104
    },
    "^\\/?Date\\((\\-?\\d+)": {
        "count": 3,
        "size": 192
    },
    "^\\/\\/[^@\\/]+@[^@\\/]+": {
        "count": 2,
        "size": 120
    },
    "^\\[object .+?Constructor\\]$": {
        "count": 3,
        "size": 200
    },
    "^\\d+$": {
        "count": 4,
        "size": 248
    },
    "^\\s*(": {
        "count": 1,
        "size": 32
    },
    "^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?": {
        "count": 3,
        "size": 312
    },
    "^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?": {
        "count": 3,
        "size": 312
    },
    "^\\s*([\\w\\.\\-]+)\\s*=\\s*(.*)?\\s*$": {
        "count": 1,
        "size": 56
    },
    "^\\s*([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:\\.(0|[1-9]\\d*|x|X|\\*)(?:(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$": {
        "count": 2,
        "size": 560
    },
    "^\\s*([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s+-\\s+([v=\\s]*([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:\\.([0-9]+|x|X|\\*)(?:(?:-?((?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:[0-9]+|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*)))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?)?)?)\\s*$": {
        "count": 2,
        "size": 520
    },
    "^\\w*$": {
        "count": 3,
        "size": 176
    },
    "^function.*?\\(\\) \\{ \\[native code\\] \\}$": {
        "count": 2,
        "size": 136
    },
    "^index\\.\\w+?$": {
        "count": 2,
        "size": 112
    },
    "^strong.*?$": {
        "count": 2,
        "size": 112
    },
    "^v0\\.6\\.[0-2]|^v0\\.5\\.": {
        "count": 1,
        "size": 48
    },
    "^v?(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][a-zA-Z0-9-]*))*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$": {
        "count": 2,
        "size": 280
    },
    "^xn--": {
        "count": 3,
        "size": 176
    },
    "_": {
        "count": 1,
        "size": 32
    },
    "_Abort": {
        "count": 1,
        "size": 32
    },
    "_AbortJS": {
        "count": 1,
        "size": 32
    },
    "_AddElement": {
        "count": 1,
        "size": 40
    },
    "_AddNamedProperty": {
        "count": 1,
        "size": 48
    },
    "_AllocateHeapNumber": {
        "count": 1,
        "size": 48
    },
    "_AllocateInNewSpace": {
        "count": 1,
        "size": 48
    },
    "_AllocateInTargetSpace": {
        "count": 1,
        "size": 48
    },
    "_AppendElement": {
        "count": 1,
        "size": 40
    },
    "_Apply": {
        "count": 1,
        "size": 32
    },
    "_Arguments": {
        "count": 1,
        "size": 40
    },
    "_ArgumentsLength": {
        "count": 1,
        "size": 40
    },
    "_ArrayBufferGetByteLength": {
        "count": 1,
        "size": 56
    },
    "_ArrayBufferInitialize": {
        "count": 1,
        "size": 48
    },
    "_ArrayBufferIsView": {
        "count": 1,
        "size": 48
    },
    "_ArrayBufferNeuter": {
        "count": 1,
        "size": 48
    },
    "_ArrayBufferSliceImpl": {
        "count": 1,
        "size": 48
    },
    "_ArrayBufferViewGetByteLength": {
        "count": 1,
        "size": 56
    },
    "_ArrayBufferViewGetByteOffset": {
        "count": 1,
        "size": 56
    },
    "_ArrayConcat": {
        "count": 1,
        "size": 40
    },
    "_ArrayConstructor": {
        "count": 1,
        "size": 48
    },
    "_ArrayConstructorWithSubclassing": {
        "count": 1,
        "size": 56
    },
    "_AtomicsAdd": {
        "count": 1,
        "size": 40
    },
    "_AtomicsAnd": {
        "count": 1,
        "size": 40
    },
    "_AtomicsCompareExchange": {
        "count": 1,
        "size": 48
    },
    "_AtomicsExchange": {
        "count": 1,
        "size": 40
    },
    "_AtomicsIsLockFree": {
        "count": 1,
        "size": 48
    },
    "_AtomicsLoad": {
        "count": 1,
        "size": 40
    },
    "_AtomicsOr": {
        "count": 1,
        "size": 40
    },
    "_AtomicsStore": {
        "count": 1,
        "size": 40
    },
    "_AtomicsSub": {
        "count": 1,
        "size": 40
    },
    "_AtomicsXor": {
        "count": 1,
        "size": 40
    },
    "_AvailableLocalesOf": {
        "count": 1,
        "size": 48
    },
    "_BasicJSONStringify": {
        "count": 1,
        "size": 48
    },
    "_BoundFunctionGetBindings": {
        "count": 1,
        "size": 56
    },
    "_BreakIteratorAdoptText": {
        "count": 1,
        "size": 48
    },
    "_BreakIteratorBreakType": {
        "count": 1,
        "size": 48
    },
    "_BreakIteratorCurrent": {
        "count": 1,
        "size": 48
    },
    "_BreakIteratorFirst": {
        "count": 1,
        "size": 48
    },
    "_BreakIteratorNext": {
        "count": 1,
        "size": 48
    },
    "_Call": {
        "count": 1,
        "size": 32
    },
    "_CallFunction": {
        "count": 1,
        "size": 40
    },
    "_CallSiteGetColumnNumberRT": {
        "count": 1,
        "size": 56
    },
    "_CallSiteGetFileNameRT": {
        "count": 1,
        "size": 48
    },
    "_CallSiteGetFunctionNameRT": {
        "count": 1,
        "size": 56
    },
    "_CallSiteGetLineNumberRT": {
        "count": 1,
        "size": 48
    },
    "_CallSiteGetMethodNameRT": {
        "count": 1,
        "size": 48
    },
    "_CallSiteGetScriptNameOrSourceUrlRT": {
        "count": 1,
        "size": 64
    },
    "_CallSiteIsConstructorRT": {
        "count": 1,
        "size": 48
    },
    "_CallSiteIsEvalRT": {
        "count": 1,
        "size": 48
    },
    "_CallSiteIsNativeRT": {
        "count": 1,
        "size": 48
    },
    "_CallSiteIsToplevelRT": {
        "count": 1,
        "size": 48
    },
    "_CallSuperWithSpread": {
        "count": 1,
        "size": 48
    },
    "_CanonicalizeLanguageTag": {
        "count": 1,
        "size": 48
    },
    "_ChangeBreakOnException": {
        "count": 1,
        "size": 48
    },
    "_CharFromCode": {
        "count": 1,
        "size": 40
    },
    "_CheckExecutionState": {
        "count": 1,
        "size": 48
    },
    "_CheckIsBootstrapping": {
        "count": 1,
        "size": 48
    },
    "_ClassGetSourceCode": {
        "count": 1,
        "size": 48
    },
    "_ClassOf": {
        "count": 1,
        "size": 32
    },
    "_ClearBreakPoint": {
        "count": 1,
        "size": 40
    },
    "_ClearFunctionTypeFeedback": {
        "count": 1,
        "size": 56
    },
    "_ClearStepping": {
        "count": 1,
        "size": 40
    },
    "_CollectGarbage": {
        "count": 1,
        "size": 40
    },
    "_CollectStackTrace": {
        "count": 1,
        "size": 48
    },
    "_CompileForOnStackReplacement": {
        "count": 1,
        "size": 56
    },
    "_CompileLazy": {
        "count": 1,
        "size": 40
    },
    "_CompileOptimized": {
        "count": 1,
        "size": 48
    },
    "_CompileString": {
        "count": 1,
        "size": 40
    },
    "_ConstructDouble": {
        "count": 1,
        "size": 40
    },
    "_CreateArrayLiteral": {
        "count": 1,
        "size": 48
    },
    "_CreateArrayLiteralStubBailout": {
        "count": 1,
        "size": 56
    },
    "_CreateBreakIterator": {
        "count": 1,
        "size": 48
    },
    "_CreateCollator": {
        "count": 1,
        "size": 40
    },
    "_CreateDateTimeFormat": {
        "count": 1,
        "size": 48
    },
    "_CreateGlobalPrivateSymbol": {
        "count": 1,
        "size": 56
    },
    "_CreateJSFunctionProxy": {
        "count": 1,
        "size": 48
    },
    "_CreateJSGeneratorObject": {
        "count": 1,
        "size": 48
    },
    "_CreateJSProxy": {
        "count": 1,
        "size": 40
    },
    "_CreateNumberFormat": {
        "count": 1,
        "size": 48
    },
    "_CreateObjectLiteral": {
        "count": 1,
        "size": 48
    },
    "_CreatePrivateSymbol": {
        "count": 1,
        "size": 48
    },
    "_CreateSymbol": {
        "count": 1,
        "size": 40
    },
    "_DataViewGetBuffer": {
        "count": 1,
        "size": 48
    },
    "_DataViewGetFloat32": {
        "count": 1,
        "size": 48
    },
    "_DataViewGetFloat64": {
        "count": 1,
        "size": 48
    },
    "_DataViewGetInt16": {
        "count": 1,
        "size": 48
    },
    "_DataViewGetInt32": {
        "count": 1,
        "size": 48
    },
    "_DataViewGetInt8": {
        "count": 1,
        "size": 40
    },
    "_DataViewGetUint16": {
        "count": 1,
        "size": 48
    },
    "_DataViewGetUint32": {
        "count": 1,
        "size": 48
    },
    "_DataViewGetUint8": {
        "count": 1,
        "size": 48
    },
    "_DataViewInitialize": {
        "count": 1,
        "size": 48
    },
    "_DataViewSetFloat32": {
        "count": 1,
        "size": 48
    },
    "_DataViewSetFloat64": {
        "count": 1,
        "size": 48
    },
    "_DataViewSetInt16": {
        "count": 1,
        "size": 48
    },
    "_DataViewSetInt32": {
        "count": 1,
        "size": 48
    },
    "_DataViewSetInt8": {
        "count": 1,
        "size": 40
    },
    "_DataViewSetUint16": {
        "count": 1,
        "size": 48
    },
    "_DataViewSetUint32": {
        "count": 1,
        "size": 48
    },
    "_DataViewSetUint8": {
        "count": 1,
        "size": 48
    },
    "_DateCacheVersion": {
        "count": 1,
        "size": 48
    },
    "_DateCurrentTime": {
        "count": 1,
        "size": 40
    },
    "_DateField": {
        "count": 1,
        "size": 40
    },
    "_DateLocalTimezone": {
        "count": 1,
        "size": 48
    },
    "_DateMakeDay": {
        "count": 1,
        "size": 40
    },
    "_DateParseString": {
        "count": 1,
        "size": 40
    },
    "_DateSetValue": {
        "count": 1,
        "size": 40
    },
    "_DateToUTC": {
        "count": 1,
        "size": 40
    },
    "_DebugAsyncTaskEvent": {
        "count": 1,
        "size": 48
    },
    "_DebugBreak": {
        "count": 1,
        "size": 40
    },
    "_DebugBreakInOptimizedCode": {
        "count": 1,
        "size": 56
    },
    "_DebugCallbackSupportsStepping": {
        "count": 1,
        "size": 56
    },
    "_DebugConstructedBy": {
        "count": 1,
        "size": 48
    },
    "_DebugEvaluate": {
        "count": 1,
        "size": 40
    },
    "_DebugEvaluateGlobal": {
        "count": 1,
        "size": 48
    },
    "_DebugGetInternalProperties": {
        "count": 1,
        "size": 56
    },
    "_DebugGetLoadedScripts": {
        "count": 1,
        "size": 48
    },
    "_DebugGetProperty": {
        "count": 1,
        "size": 48
    },
    "_DebugGetPropertyDetails": {
        "count": 1,
        "size": 48
    },
    "_DebugGetPrototype": {
        "count": 1,
        "size": 48
    },
    "_DebugIndexedInterceptorElementValue": {
        "count": 1,
        "size": 64
    },
    "_DebugIsActive": {
        "count": 1,
        "size": 40
    },
    "_DebugNamedInterceptorPropertyValue": {
        "count": 1,
        "size": 64
    },
    "_DebugPopPromise": {
        "count": 1,
        "size": 40
    },
    "_DebugPrepareStepInIfStepping": {
        "count": 1,
        "size": 56
    },
    "_DebugPrint": {
        "count": 1,
        "size": 40
    },
    "_DebugPrintScopes": {
        "count": 1,
        "size": 48
    },
    "_DebugPromiseEvent": {
        "count": 1,
        "size": 48
    },
    "_DebugPropertyAttributesFromDetails": {
        "count": 1,
        "size": 64
    },
    "_DebugPropertyIndexFromDetails": {
        "count": 1,
        "size": 56
    },
    "_DebugPropertyTypeFromDetails": {
        "count": 1,
        "size": 56
    },
    "_DebugPushPromise": {
        "count": 1,
        "size": 48
    },
    "_DebugReferencedBy": {
        "count": 1,
        "size": 48
    },
    "_DebugSetScriptSource": {
        "count": 1,
        "size": 48
    },
    "_DebugTrace": {
        "count": 1,
        "size": 40
    },
    "_DeclareGlobals": {
        "count": 1,
        "size": 40
    },
    "_DeclareLookupSlot": {
        "count": 1,
        "size": 48
    },
    "_DeclareModules": {
        "count": 1,
        "size": 40
    },
    "_DefaultConstructorCallSuper": {
        "count": 1,
        "size": 56
    },
    "_DefineAccessorPropertyUnchecked": {
        "count": 1,
        "size": 56
    },
    "_DefineClass": {
        "count": 1,
        "size": 40
    },
    "_DefineClassMethod": {
        "count": 1,
        "size": 48
    },
    "_DefineDataPropertyUnchecked": {
        "count": 1,
        "size": 56
    },
    "_DefineGetterPropertyUnchecked": {
        "count": 1,
        "size": 56
    },
    "_DefineSetterPropertyUnchecked": {
        "count": 1,
        "size": 56
    },
    "_DeleteLookupSlot": {
        "count": 1,
        "size": 48
    },
    "_DeleteProperty": {
        "count": 1,
        "size": 40
    },
    "_DeliverObservationChangeRecords": {
        "count": 1,
        "size": 56
    },
    "_DeoptimizeFunction": {
        "count": 1,
        "size": 48
    },
    "_DeoptimizeNow": {
        "count": 1,
        "size": 40
    },
    "_DisassembleFunction": {
        "count": 1,
        "size": 48
    },
    "_DoubleHi": {
        "count": 1,
        "size": 40
    },
    "_DoubleLo": {
        "count": 1,
        "size": 40
    },
    "_EnqueueMicrotask": {
        "count": 1,
        "size": 48
    },
    "_EstimateNumberOfElements": {
        "count": 1,
        "size": 56
    },
    "_ExecuteInDebugContext": {
        "count": 1,
        "size": 48
    },
    "_FastOneByteArrayJoin": {
        "count": 1,
        "size": 48
    },
    "_FinalizeInstanceSize": {
        "count": 1,
        "size": 48
    },
    "_FinishArrayPrototypeSetup": {
        "count": 1,
        "size": 56
    },
    "_Fix": {
        "count": 1,
        "size": 32
    },
    "_FixedArrayGet": {
        "count": 1,
        "size": 40
    },
    "_FixedArraySet": {
        "count": 1,
        "size": 40
    },
    "_FlattenString": {
        "count": 1,
        "size": 40
    },
    "_ForInDone": {
        "count": 1,
        "size": 40
    },
    "_ForInFilter": {
        "count": 1,
        "size": 40
    },
    "_ForInNext": {
        "count": 1,
        "size": 40
    },
    "_ForInStep": {
        "count": 1,
        "size": 40
    },
    "_FormatMessageString": {
        "count": 1,
        "size": 48
    },
    "_FunctionBindArguments": {
        "count": 1,
        "size": 48
    },
    "_FunctionGetInferredName": {
        "count": 1,
        "size": 48
    },
    "_FunctionGetName": {
        "count": 1,
        "size": 40
    },
    "_FunctionGetPositionForOffset": {
        "count": 1,
        "size": 56
    },
    "_FunctionGetScript": {
        "count": 1,
        "size": 48
    },
    "_FunctionGetScriptSourcePosition": {
        "count": 1,
        "size": 56
    },
    "_FunctionGetSourceCode": {
        "count": 1,
        "size": 48
    },
    "_FunctionIsAPIFunction": {
        "count": 1,
        "size": 48
    },
    "_FunctionIsArrow": {
        "count": 1,
        "size": 40
    },
    "_FunctionIsBuiltin": {
        "count": 1,
        "size": 48
    },
    "_FunctionIsConciseMethod": {
        "count": 1,
        "size": 48
    },
    "_FunctionIsGenerator": {
        "count": 1,
        "size": 48
    },
    "_FunctionMarkNameShouldPrintAsAnonymous": {
        "count": 1,
        "size": 64
    },
    "_FunctionNameShouldPrintAsAnonymous": {
        "count": 1,
        "size": 64
    },
    "_FunctionRemovePrototype": {
        "count": 1,
        "size": 48
    },
    "_FunctionSetInstanceClassName": {
        "count": 1,
        "size": 56
    },
    "_FunctionSetLength": {
        "count": 1,
        "size": 48
    },
    "_FunctionSetName": {
        "count": 1,
        "size": 40
    },
    "_FunctionSetPrototype": {
        "count": 1,
        "size": 48
    },
    "_GeneratorClose": {
        "count": 1,
        "size": 40
    },
    "_GeneratorGetContext": {
        "count": 1,
        "size": 48
    },
    "_GeneratorGetContinuation": {
        "count": 1,
        "size": 56
    },
    "_GeneratorGetFunction": {
        "count": 1,
        "size": 48
    },
    "_GeneratorGetReceiver": {
        "count": 1,
        "size": 48
    },
    "_GeneratorGetSourcePosition": {
        "count": 1,
        "size": 56
    },
    "_GeneratorNext": {
        "count": 1,
        "size": 40
    },
    "_GeneratorThrow": {
        "count": 1,
        "size": 40
    },
    "_GenericHash": {
        "count": 1,
        "size": 40
    },
    "_GetAllScopesDetails": {
        "count": 1,
        "size": 48
    },
    "_GetArgumentsProperty": {
        "count": 1,
        "size": 48
    },
    "_GetArrayKeys": {
        "count": 1,
        "size": 40
    },
    "_GetBreakLocations": {
        "count": 1,
        "size": 48
    },
    "_GetCachedArrayIndex": {
        "count": 1,
        "size": 48
    },
    "_GetCallTrap": {
        "count": 1,
        "size": 40
    },
    "_GetCallerJSFunction": {
        "count": 1,
        "size": 48
    },
    "_GetConstructTrap": {
        "count": 1,
        "size": 48
    },
    "_GetConstructorDelegate": {
        "count": 1,
        "size": 48
    },
    "_GetDataProperty": {
        "count": 1,
        "size": 40
    },
    "_GetDebugContext": {
        "count": 1,
        "size": 40
    },
    "_GetDefaultICULocale": {
        "count": 1,
        "size": 48
    },
    "_GetFrameCount": {
        "count": 1,
        "size": 40
    },
    "_GetFrameDetails": {
        "count": 1,
        "size": 40
    },
    "_GetFromCache": {
        "count": 1,
        "size": 40
    },
    "_GetFromCacheRT": {
        "count": 1,
        "size": 40
    },
    "_GetFunctionCodePositionFromSource": {
        "count": 1,
        "size": 64
    },
    "_GetFunctionDelegate": {
        "count": 1,
        "size": 48
    },
    "_GetFunctionScopeCount": {
        "count": 1,
        "size": 48
    },
    "_GetFunctionScopeDetails": {
        "count": 1,
        "size": 48
    },
    "_GetHandler": {
        "count": 1,
        "size": 40
    },
    "_GetHeapUsage": {
        "count": 1,
        "size": 40
    },
    "_GetImplFromInitializedIntlObject": {
        "count": 1,
        "size": 64
    },
    "_GetIndexedInterceptorElementNames": {
        "count": 1,
        "size": 64
    },
    "_GetInterceptorInfo": {
        "count": 1,
        "size": 48
    },
    "_GetLanguageTagVariants": {
        "count": 1,
        "size": 48
    },
    "_GetNamedInterceptorPropertyNames": {
        "count": 1,
        "size": 64
    },
    "_GetObjectContextNotifierPerformChange": {
        "count": 1,
        "size": 64
    },
    "_GetObjectContextObjectGetNotifier": {
        "count": 1,
        "size": 64
    },
    "_GetObjectContextObjectObserve": {
        "count": 1,
        "size": 56
    },
    "_GetObservationState": {
        "count": 1,
        "size": 48
    },
    "_GetOptimizationCount": {
        "count": 1,
        "size": 48
    },
    "_GetOptimizationStatus": {
        "count": 1,
        "size": 48
    },
    "_GetOriginalConstructor": {
        "count": 1,
        "size": 48
    },
    "_GetOwnElementNames": {
        "count": 1,
        "size": 48
    },
    "_GetOwnProperty": {
        "count": 1,
        "size": 40
    },
    "_GetOwnPropertyNames": {
        "count": 1,
        "size": 48
    },
    "_GetProperty": {
        "count": 1,
        "size": 40
    },
    "_GetPropertyNames": {
        "count": 1,
        "size": 48
    },
    "_GetPropertyNamesFast": {
        "count": 1,
        "size": 48
    },
    "_GetPropertyStrong": {
        "count": 1,
        "size": 48
    },
    "_GetPrototype": {
        "count": 1,
        "size": 40
    },
    "_GetRootNaN": {
        "count": 1,
        "size": 40
    },
    "_GetScopeCount": {
        "count": 1,
        "size": 40
    },
    "_GetScopeDetails": {
        "count": 1,
        "size": 40
    },
    "_GetScript": {
        "count": 1,
        "size": 40
    },
    "_GetStepInPositions": {
        "count": 1,
        "size": 48
    },
    "_GetThreadCount": {
        "count": 1,
        "size": 40
    },
    "_GetThreadDetails": {
        "count": 1,
        "size": 48
    },
    "_GetTypeFeedbackVector": {
        "count": 1,
        "size": 48
    },
    "_GetUndetectable": {
        "count": 1,
        "size": 40
    },
    "_GetV8Version": {
        "count": 1,
        "size": 40
    },
    "_GetWeakMapEntries": {
        "count": 1,
        "size": 48
    },
    "_GetWeakSetValues": {
        "count": 1,
        "size": 48
    },
    "_GlobalPrint": {
        "count": 1,
        "size": 40
    },
    "_GlobalProxy": {
        "count": 1,
        "size": 40
    },
    "_GrowArrayElements": {
        "count": 1,
        "size": 48
    },
    "_HandleStepInForDerivedConstructors": {
        "count": 1,
        "size": 64
    },
    "_HarmonyToString": {
        "count": 1,
        "size": 40
    },
    "_HasCachedArrayIndex": {
        "count": 1,
        "size": 48
    },
    "_HasComplexElements": {
        "count": 1,
        "size": 48
    },
    "_HasDictionaryElements": {
        "count": 1,
        "size": 48
    },
    "_HasElement": {
        "count": 1,
        "size": 40
    },
    "_HasExternalArrayElements": {
        "count": 1,
        "size": 56
    },
    "_HasExternalFloat32Elements": {
        "count": 1,
        "size": 56
    },
    "_HasExternalFloat64Elements": {
        "count": 1,
        "size": 56
    },
    "_HasExternalInt16Elements": {
        "count": 1,
        "size": 56
    },
    "_HasExternalInt32Elements": {
        "count": 1,
        "size": 56
    },
    "_HasExternalInt8Elements": {
        "count": 1,
        "size": 48
    },
    "_HasExternalUint16Elements": {
        "count": 1,
        "size": 56
    },
    "_HasExternalUint32Elements": {
        "count": 1,
        "size": 56
    },
    "_HasExternalUint8ClampedElements": {
        "count": 1,
        "size": 56
    },
    "_HasExternalUint8Elements": {
        "count": 1,
        "size": 56
    },
    "_HasFastDoubleElements": {
        "count": 1,
        "size": 48
    },
    "_HasFastHoleyElements": {
        "count": 1,
        "size": 48
    },
    "_HasFastObjectElements": {
        "count": 1,
        "size": 48
    },
    "_HasFastPackedElements": {
        "count": 1,
        "size": 48
    },
    "_HasFastProperties": {
        "count": 1,
        "size": 48
    },
    "_HasFastSmiElements": {
        "count": 1,
        "size": 48
    },
    "_HasFastSmiOrObjectElements": {
        "count": 1,
        "size": 56
    },
    "_HasFixedFloat32Elements": {
        "count": 1,
        "size": 48
    },
    "_HasFixedFloat64Elements": {
        "count": 1,
        "size": 48
    },
    "_HasFixedInt16Elements": {
        "count": 1,
        "size": 48
    },
    "_HasFixedInt32Elements": {
        "count": 1,
        "size": 48
    },
    "_HasFixedInt8Elements": {
        "count": 1,
        "size": 48
    },
    "_HasFixedUint16Elements": {
        "count": 1,
        "size": 48
    },
    "_HasFixedUint32Elements": {
        "count": 1,
        "size": 48
    },
    "_HasFixedUint8ClampedElements": {
        "count": 1,
        "size": 56
    },
    "_HasFixedUint8Elements": {
        "count": 1,
        "size": 48
    },
    "_HasOwnProperty": {
        "count": 1,
        "size": 40
    },
    "_HasProperty": {
        "count": 1,
        "size": 40
    },
    "_HasSloppyArgumentsElements": {
        "count": 1,
        "size": 56
    },
    "_HaveSameMap": {
        "count": 1,
        "size": 40
    },
    "_HeapObjectGetMap": {
        "count": 1,
        "size": 48
    },
    "_HomeObjectSymbol": {
        "count": 1,
        "size": 48
    },
    "_IS_VAR": {
        "count": 1,
        "size": 32
    },
    "_IncrementStatsCounter": {
        "count": 1,
        "size": 48
    },
    "_InitializeConstGlobal": {
        "count": 1,
        "size": 48
    },
    "_InitializeLegacyConstLookupSlot": {
        "count": 1,
        "size": 56
    },
    "_InitializeVarGlobal": {
        "count": 1,
        "size": 48
    },
    "_InternalArrayConstructor": {
        "count": 1,
        "size": 56
    },
    "_InternalCompare": {
        "count": 1,
        "size": 40
    },
    "_InternalDateFormat": {
        "count": 1,
        "size": 48
    },
    "_InternalDateParse": {
        "count": 1,
        "size": 48
    },
    "_InternalNumberFormat": {
        "count": 1,
        "size": 48
    },
    "_InternalNumberParse": {
        "count": 1,
        "size": 48
    },
    "_InternalSetPrototype": {
        "count": 1,
        "size": 48
    },
    "_InternalizeString": {
        "count": 1,
        "size": 48
    },
    "_Interrupt": {
        "count": 1,
        "size": 40
    },
    "_IsAccessCheckNeeded": {
        "count": 1,
        "size": 48
    },
    "_IsArray": {
        "count": 1,
        "size": 32
    },
    "_IsBreakOnException": {
        "count": 1,
        "size": 48
    },
    "_IsConcurrentRecompilationSupported": {
        "count": 1,
        "size": 64
    },
    "_IsConstructCall": {
        "count": 1,
        "size": 40
    },
    "_IsConstructor": {
        "count": 1,
        "size": 40
    },
    "_IsDate": {
        "count": 1,
        "size": 32
    },
    "_IsExtensible": {
        "count": 1,
        "size": 40
    },
    "_IsFunction": {
        "count": 1,
        "size": 40
    },
    "_IsInPrototypeChain": {
        "count": 1,
        "size": 48
    },
    "_IsInitializedIntlObject": {
        "count": 1,
        "size": 48
    },
    "_IsInitializedIntlObjectOfType": {
        "count": 1,
        "size": 56
    },
    "_IsJSFunctionProxy": {
        "count": 1,
        "size": 48
    },
    "_IsJSGlobalProxy": {
        "count": 1,
        "size": 40
    },
    "_IsJSModule": {
        "count": 1,
        "size": 40
    },
    "_IsJSProxy": {
        "count": 1,
        "size": 40
    },
    "_IsMinusZero": {
        "count": 1,
        "size": 40
    },
    "_IsNonNegativeSmi": {
        "count": 1,
        "size": 48
    },
    "_IsObject": {
        "count": 1,
        "size": 40
    },
    "_IsObserved": {
        "count": 1,
        "size": 40
    },
    "_IsPropertyEnumerable": {
        "count": 1,
        "size": 48
    },
    "_IsRegExp": {
        "count": 1,
        "size": 40
    },
    "_IsSharedIntegerTypedArray": {
        "count": 1,
        "size": 56
    },
    "_IsSharedTypedArray": {
        "count": 1,
        "size": 48
    },
    "_IsSloppyModeFunction": {
        "count": 1,
        "size": 48
    },
    "_IsSmi": {
        "count": 1,
        "size": 32
    },
    "_IsSpecObject": {
        "count": 1,
        "size": 40
    },
    "_IsStringWrapperSafeForDefaultValueOf": {
        "count": 1,
        "size": 64
    },
    "_IsStrong": {
        "count": 1,
        "size": 40
    },
    "_IsTypedArray": {
        "count": 1,
        "size": 40
    },
    "_IsUndetectableObject": {
        "count": 1,
        "size": 48
    },
    "_IsValidSmi": {
        "count": 1,
        "size": 40
    },
    "_JSCollectionGetTable": {
        "count": 1,
        "size": 48
    },
    "_JSValueGetValue": {
        "count": 1,
        "size": 40
    },
    "_KeyedGetProperty": {
        "count": 1,
        "size": 48
    },
    "_KeyedGetPropertyStrong": {
        "count": 1,
        "size": 48
    },
    "_Likely": {
        "count": 1,
        "size": 32
    },
    "_LiveEditCheckAndDropActivations": {
        "count": 1,
        "size": 56
    },
    "_LiveEditCompareStrings": {
        "count": 1,
        "size": 48
    },
    "_LiveEditFindSharedFunctionInfosForScript": {
        "count": 1,
        "size": 72
    },
    "_LiveEditFunctionSetScript": {
        "count": 1,
        "size": 56
    },
    "_LiveEditFunctionSourceUpdated": {
        "count": 1,
        "size": 56
    },
    "_LiveEditGatherCompileInfo": {
        "count": 1,
        "size": 56
    },
    "_LiveEditPatchFunctionPositions": {
        "count": 1,
        "size": 56
    },
    "_LiveEditReplaceFunctionCode": {
        "count": 1,
        "size": 56
    },
    "_LiveEditReplaceRefToNestedFunction": {
        "count": 1,
        "size": 64
    },
    "_LiveEditReplaceScript": {
        "count": 1,
        "size": 48
    },
    "_LiveEditRestartFrame": {
        "count": 1,
        "size": 48
    },
    "_LoadFromSuper": {
        "count": 1,
        "size": 40
    },
    "_LoadKeyedFromSuper": {
        "count": 1,
        "size": 48
    },
    "_LoadLookupSlot": {
        "count": 1,
        "size": 40
    },
    "_LoadLookupSlotNoReferenceError": {
        "count": 1,
        "size": 56
    },
    "_LoadMutableDouble": {
        "count": 1,
        "size": 48
    },
    "_LookupAccessor": {
        "count": 1,
        "size": 40
    },
    "_MapClear": {
        "count": 1,
        "size": 40
    },
    "_MapGetInstanceType": {
        "count": 1,
        "size": 48
    },
    "_MapGrow": {
        "count": 1,
        "size": 32
    },
    "_MapInitialize": {
        "count": 1,
        "size": 40
    },
    "_MapIteratorClone": {
        "count": 1,
        "size": 48
    },
    "_MapIteratorDetails": {
        "count": 1,
        "size": 48
    },
    "_MapIteratorInitialize": {
        "count": 1,
        "size": 48
    },
    "_MapIteratorNext": {
        "count": 1,
        "size": 40
    },
    "_MapShrink": {
        "count": 1,
        "size": 40
    },
    "_MarkAsInitializedIntlObjectOfType": {
        "count": 1,
        "size": 64
    },
    "_MaterializeRegExpLiteral": {
        "count": 1,
        "size": 56
    },
    "_MathAcos": {
        "count": 1,
        "size": 40
    },
    "_MathAsin": {
        "count": 1,
        "size": 40
    },
    "_MathAtan": {
        "count": 1,
        "size": 40
    },
    "_MathAtan2": {
        "count": 1,
        "size": 40
    },
    "_MathClz32": {
        "count": 1,
        "size": 40
    },
    "_MathExpRT": {
        "count": 1,
        "size": 40
    },
    "_MathFloor": {
        "count": 1,
        "size": 40
    },
    "_MathFround": {
        "count": 1,
        "size": 40
    },
    "_MathLogRT": {
        "count": 1,
        "size": 40
    },
    "_MathPow": {
        "count": 1,
        "size": 32
    },
    "_MathPowRT": {
        "count": 1,
        "size": 40
    },
    "_MathPowSlow": {
        "count": 1,
        "size": 40
    },
    "_MathSqrt": {
        "count": 1,
        "size": 40
    },
    "_MaxSmi": {
        "count": 1,
        "size": 32
    },
    "_MessageGetScript": {
        "count": 1,
        "size": 48
    },
    "_MessageGetStartPosition": {
        "count": 1,
        "size": 48
    },
    "_MoveArrayContents": {
        "count": 1,
        "size": 48
    },
    "_NativeScriptsCount": {
        "count": 1,
        "size": 48
    },
    "_NeverOptimizeFunction": {
        "count": 1,
        "size": 48
    },
    "_NewArguments": {
        "count": 1,
        "size": 40
    },
    "_NewClosure": {
        "count": 1,
        "size": 40
    },
    "_NewClosureFromStubFailure": {
        "count": 1,
        "size": 56
    },
    "_NewConsString": {
        "count": 1,
        "size": 40
    },
    "_NewFunctionContext": {
        "count": 1,
        "size": 48
    },
    "_NewObject": {
        "count": 1,
        "size": 40
    },
    "_NewObjectFromBound": {
        "count": 1,
        "size": 48
    },
    "_NewObjectWithAllocationSite": {
        "count": 1,
        "size": 56
    },
    "_NewReferenceError": {
        "count": 1,
        "size": 48
    },
    "_NewRestParam": {
        "count": 1,
        "size": 40
    },
    "_NewRestParamSlow": {
        "count": 1,
        "size": 48
    },
    "_NewScriptContext": {
        "count": 1,
        "size": 48
    },
    "_NewSloppyArguments": {
        "count": 1,
        "size": 48
    },
    "_NewStrictArguments": {
        "count": 1,
        "size": 48
    },
    "_NewString": {
        "count": 1,
        "size": 40
    },
    "_NewStringWrapper": {
        "count": 1,
        "size": 48
    },
    "_NewSymbolWrapper": {
        "count": 1,
        "size": 48
    },
    "_NewSyntaxError": {
        "count": 1,
        "size": 40
    },
    "_NewTypeError": {
        "count": 1,
        "size": 40
    },
    "_NormalizeElements": {
        "count": 1,
        "size": 48
    },
    "_NotifyContextDisposed": {
        "count": 1,
        "size": 48
    },
    "_NotifyDeoptimized": {
        "count": 1,
        "size": 48
    },
    "_NotifyStubFailure": {
        "count": 1,
        "size": 48
    },
    "_NumberAdd": {
        "count": 1,
        "size": 40
    },
    "_NumberAnd": {
        "count": 1,
        "size": 40
    },
    "_NumberCompare": {
        "count": 1,
        "size": 40
    },
    "_NumberDiv": {
        "count": 1,
        "size": 40
    },
    "_NumberEquals": {
        "count": 1,
        "size": 40
    },
    "_NumberImul": {
        "count": 1,
        "size": 40
    },
    "_NumberMod": {
        "count": 1,
        "size": 40
    },
    "_NumberMul": {
        "count": 1,
        "size": 40
    },
    "_NumberOr": {
        "count": 1,
        "size": 40
    },
    "_NumberSar": {
        "count": 1,
        "size": 40
    },
    "_NumberShl": {
        "count": 1,
        "size": 40
    },
    "_NumberShr": {
        "count": 1,
        "size": 40
    },
    "_NumberSub": {
        "count": 1,
        "size": 40
    },
    "_NumberToExponential": {
        "count": 1,
        "size": 48
    },
    "_NumberToFixed": {
        "count": 1,
        "size": 40
    },
    "_NumberToInteger": {
        "count": 1,
        "size": 40
    },
    "_NumberToIntegerMapMinusZero": {
        "count": 1,
        "size": 56
    },
    "_NumberToJSInt32": {
        "count": 1,
        "size": 40
    },
    "_NumberToJSUint32": {
        "count": 1,
        "size": 48
    },
    "_NumberToPrecision": {
        "count": 1,
        "size": 48
    },
    "_NumberToRadixString": {
        "count": 1,
        "size": 48
    },
    "_NumberToSmi": {
        "count": 1,
        "size": 40
    },
    "_NumberToString": {
        "count": 1,
        "size": 40
    },
    "_NumberToStringRT": {
        "count": 1,
        "size": 48
    },
    "_NumberToStringSkipCache": {
        "count": 1,
        "size": 48
    },
    "_NumberUnaryMinus": {
        "count": 1,
        "size": 48
    },
    "_NumberXor": {
        "count": 1,
        "size": 40
    },
    "_ObjectEquals": {
        "count": 1,
        "size": 40
    },
    "_ObjectFreeze": {
        "count": 1,
        "size": 40
    },
    "_ObjectSeal": {
        "count": 1,
        "size": 40
    },
    "_ObjectWasCreatedInCurrentOrigin": {
        "count": 1,
        "size": 56
    },
    "_ObservationWeakMapCreate": {
        "count": 1,
        "size": 56
    },
    "_ObserverObjectAndRecordHaveSameOrigin": {
        "count": 1,
        "size": 64
    },
    "_OneByteSeqStringGetChar": {
        "count": 1,
        "size": 48
    },
    "_OneByteSeqStringSetChar": {
        "count": 1,
        "size": 48
    },
    "_OptimizeFunctionOnNextCall": {
        "count": 1,
        "size": 56
    },
    "_OptimizeObjectForAddingMultipleProperties": {
        "count": 1,
        "size": 72
    },
    "_OptimizeOsr": {
        "count": 1,
        "size": 40
    },
    "_OwnKeys": {
        "count": 1,
        "size": 32
    },
    "_ParseJson": {
        "count": 1,
        "size": 40
    },
    "_PrepareStep": {
        "count": 1,
        "size": 40
    },
    "_PreventExtensions": {
        "count": 1,
        "size": 48
    },
    "_PromiseHasHandlerSymbol": {
        "count": 1,
        "size": 48
    },
    "_PromiseRejectEvent": {
        "count": 1,
        "size": 48
    },
    "_PromiseRevokeReject": {
        "count": 1,
        "size": 48
    },
    "_PromoteScheduledException": {
        "count": 1,
        "size": 56
    },
    "_PushBlockContext": {
        "count": 1,
        "size": 48
    },
    "_PushCatchContext": {
        "count": 1,
        "size": 48
    },
    "_PushIfAbsent": {
        "count": 1,
        "size": 40
    },
    "_PushModuleContext": {
        "count": 1,
        "size": 48
    },
    "_PushWithContext": {
        "count": 1,
        "size": 40
    },
    "_QuoteJSONString": {
        "count": 1,
        "size": 40
    },
    "_ReThrow": {
        "count": 1,
        "size": 32
    },
    "_RegExpConstructResult": {
        "count": 1,
        "size": 48
    },
    "_RegExpConstructResultRT": {
        "count": 1,
        "size": 48
    },
    "_RegExpExec": {
        "count": 1,
        "size": 40
    },
    "_RegExpExecMultiple": {
        "count": 1,
        "size": 48
    },
    "_RegExpExecReThrow": {
        "count": 1,
        "size": 48
    },
    "_RegExpInitializeAndCompile": {
        "count": 1,
        "size": 56
    },
    "_RemPiO2": {
        "count": 1,
        "size": 32
    },
    "_RemoveArrayHoles": {
        "count": 1,
        "size": 48
    },
    "_RenderCallSite": {
        "count": 1,
        "size": 40
    },
    "_ResolvePossiblyDirectEval": {
        "count": 1,
        "size": 56
    },
    "_ResumeJSGeneratorObject": {
        "count": 1,
        "size": 48
    },
    "_RoundNumber": {
        "count": 1,
        "size": 40
    },
    "_RunMicrotasks": {
        "count": 1,
        "size": 40
    },
    "_RunningInSimulator": {
        "count": 1,
        "size": 48
    },
    "_ScheduleBreak": {
        "count": 1,
        "size": 40
    },
    "_SetAllocationTimeout": {
        "count": 1,
        "size": 48
    },
    "_SetClear": {
        "count": 1,
        "size": 40
    },
    "_SetCode": {
        "count": 1,
        "size": 32
    },
    "_SetDebugEventListener": {
        "count": 1,
        "size": 48
    },
    "_SetDisableBreak": {
        "count": 1,
        "size": 40
    },
    "_SetFlags": {
        "count": 1,
        "size": 40
    },
    "_SetForceInlineFlag": {
        "count": 1,
        "size": 48
    },
    "_SetFunctionBreakPoint": {
        "count": 1,
        "size": 48
    },
    "_SetGrow": {
        "count": 1,
        "size": 32
    },
    "_SetInitialize": {
        "count": 1,
        "size": 40
    },
    "_SetIsObserved": {
        "count": 1,
        "size": 40
    },
    "_SetIteratorClone": {
        "count": 1,
        "size": 48
    },
    "_SetIteratorDetails": {
        "count": 1,
        "size": 48
    },
    "_SetIteratorInitialize": {
        "count": 1,
        "size": 48
    },
    "_SetIteratorNext": {
        "count": 1,
        "size": 40
    },
    "_SetNativeFlag": {
        "count": 1,
        "size": 40
    },
    "_SetProperty": {
        "count": 1,
        "size": 40
    },
    "_SetPrototype": {
        "count": 1,
        "size": 40
    },
    "_SetScopeVariableValue": {
        "count": 1,
        "size": 48
    },
    "_SetScriptBreakPoint": {
        "count": 1,
        "size": 48
    },
    "_SetShrink": {
        "count": 1,
        "size": 40
    },
    "_SetValueOf": {
        "count": 1,
        "size": 40
    },
    "_SmiLexicographicCompare": {
        "count": 1,
        "size": 48
    },
    "_SparseJoinWithSeparator": {
        "count": 1,
        "size": 48
    },
    "_SpecialArrayFunctions": {
        "count": 1,
        "size": 48
    },
    "_StackGuard": {
        "count": 1,
        "size": 40
    },
    "_StoreArrayLiteralElement": {
        "count": 1,
        "size": 56
    },
    "_StoreKeyedToSuper_Sloppy": {
        "count": 1,
        "size": 56
    },
    "_StoreKeyedToSuper_Strict": {
        "count": 1,
        "size": 56
    },
    "_StoreLookupSlot": {
        "count": 1,
        "size": 40
    },
    "_StoreToSuper_Sloppy": {
        "count": 1,
        "size": 48
    },
    "_StoreToSuper_Strict": {
        "count": 1,
        "size": 48
    },
    "_StringAdd": {
        "count": 1,
        "size": 40
    },
    "_StringAddRT": {
        "count": 1,
        "size": 40
    },
    "_StringBuilderConcat": {
        "count": 1,
        "size": 48
    },
    "_StringBuilderJoin": {
        "count": 1,
        "size": 48
    },
    "_StringCharAt": {
        "count": 1,
        "size": 40
    },
    "_StringCharCodeAt": {
        "count": 1,
        "size": 48
    },
    "_StringCharCodeAtRT": {
        "count": 1,
        "size": 48
    },
    "_StringCharFromCode": {
        "count": 1,
        "size": 48
    },
    "_StringCompare": {
        "count": 1,
        "size": 40
    },
    "_StringCompareRT": {
        "count": 1,
        "size": 40
    },
    "_StringEquals": {
        "count": 1,
        "size": 40
    },
    "_StringGetLength": {
        "count": 1,
        "size": 40
    },
    "_StringGetRawHashField": {
        "count": 1,
        "size": 48
    },
    "_StringIndexOf": {
        "count": 1,
        "size": 40
    },
    "_StringLastIndexOf": {
        "count": 1,
        "size": 48
    },
    "_StringLocaleCompare": {
        "count": 1,
        "size": 48
    },
    "_StringMatch": {
        "count": 1,
        "size": 40
    },
    "_StringNormalize": {
        "count": 1,
        "size": 40
    },
    "_StringParseFloat": {
        "count": 1,
        "size": 48
    },
    "_StringParseInt": {
        "count": 1,
        "size": 40
    },
    "_StringReplaceGlobalRegExpWithString": {
        "count": 1,
        "size": 64
    },
    "_StringReplaceOneCharWithString": {
        "count": 1,
        "size": 56
    },
    "_StringSplit": {
        "count": 1,
        "size": 40
    },
    "_StringToArray": {
        "count": 1,
        "size": 40
    },
    "_StringToLowerCase": {
        "count": 1,
        "size": 48
    },
    "_StringToNumber": {
        "count": 1,
        "size": 40
    },
    "_StringToUpperCase": {
        "count": 1,
        "size": 48
    },
    "_StringTrim": {
        "count": 1,
        "size": 40
    },
    "_SubString": {
        "count": 1,
        "size": 40
    },
    "_SubStringRT": {
        "count": 1,
        "size": 40
    },
    "_SuspendJSGeneratorObject": {
        "count": 1,
        "size": 56
    },
    "_SymbolDescription": {
        "count": 1,
        "size": 48
    },
    "_SymbolIsPrivate": {
        "count": 1,
        "size": 40
    },
    "_SymbolRegistry": {
        "count": 1,
        "size": 40
    },
    "_SystemBreak": {
        "count": 1,
        "size": 40
    },
    "_TheHole": {
        "count": 1,
        "size": 32
    },
    "_Throw": {
        "count": 1,
        "size": 32
    },
    "_ThrowArrayNotSubclassableError": {
        "count": 1,
        "size": 56
    },
    "_ThrowConstAssignError": {
        "count": 1,
        "size": 48
    },
    "_ThrowConstructorNonCallableError": {
        "count": 1,
        "size": 64
    },
    "_ThrowIfStaticPrototype": {
        "count": 1,
        "size": 48
    },
    "_ThrowIteratorResultNotAnObject": {
        "count": 1,
        "size": 56
    },
    "_ThrowNonMethodError": {
        "count": 1,
        "size": 48
    },
    "_ThrowNotDateError": {
        "count": 1,
        "size": 48
    },
    "_ThrowReferenceError": {
        "count": 1,
        "size": 48
    },
    "_ThrowStaticPrototypeError": {
        "count": 1,
        "size": 56
    },
    "_ThrowStrongModeImplicitConversion": {
        "count": 1,
        "size": 64
    },
    "_ThrowStrongModeTooFewArguments": {
        "count": 1,
        "size": 56
    },
    "_ThrowUnsupportedSuperError": {
        "count": 1,
        "size": 56
    },
    "_ToBool": {
        "count": 1,
        "size": 32
    },
    "_ToFastProperties": {
        "count": 1,
        "size": 48
    },
    "_ToMethod": {
        "count": 1,
        "size": 40
    },
    "_TraceEnter": {
        "count": 1,
        "size": 40
    },
    "_TraceExit": {
        "count": 1,
        "size": 40
    },
    "_TransitionElementsKind": {
        "count": 1,
        "size": 48
    },
    "_TruncateString": {
        "count": 1,
        "size": 40
    },
    "_TryInstallOptimizedCode": {
        "count": 1,
        "size": 48
    },
    "_TryMigrateInstance": {
        "count": 1,
        "size": 48
    },
    "_TwoByteSeqStringGetChar": {
        "count": 1,
        "size": 48
    },
    "_TwoByteSeqStringSetChar": {
        "count": 1,
        "size": 48
    },
    "_TypedArrayGetBuffer": {
        "count": 1,
        "size": 48
    },
    "_TypedArrayGetLength": {
        "count": 1,
        "size": 48
    },
    "_TypedArrayInitialize": {
        "count": 1,
        "size": 48
    },
    "_TypedArrayInitializeFromArrayLike": {
        "count": 1,
        "size": 64
    },
    "_TypedArrayMaxSizeInHeap": {
        "count": 1,
        "size": 48
    },
    "_TypedArraySetFastCases": {
        "count": 1,
        "size": 48
    },
    "_URIEscape": {
        "count": 1,
        "size": 40
    },
    "_URIUnescape": {
        "count": 1,
        "size": 40
    },
    "_UnblockConcurrentRecompilation": {
        "count": 1,
        "size": 56
    },
    "_Unlikely": {
        "count": 1,
        "size": 40
    },
    "_UnwindAndFindExceptionHandler": {
        "count": 1,
        "size": 56
    },
    "_ValueOf": {
        "count": 1,
        "size": 32
    },
    "_WeakCollectionDelete": {
        "count": 1,
        "size": 48
    },
    "_WeakCollectionGet": {
        "count": 1,
        "size": 48
    },
    "_WeakCollectionHas": {
        "count": 1,
        "size": 48
    },
    "_WeakCollectionInitialize": {
        "count": 1,
        "size": 56
    },
    "_WeakCollectionSet": {
        "count": 1,
        "size": 48
    },
    "__ddProbeAttached__": {
        "count": 1,
        "size": 48
    },
    "__dirname": {
        "count": 1,
        "size": 40
    },
    "__filename": {
        "count": 1,
        "size": 40
    },
    "__lodash_placeholder__": {
        "count": 1,
        "size": 48
    },
    "_a": {
        "count": 1,
        "size": 32
    },
    "_abbr": {
        "count": 1,
        "size": 32
    },
    "_addHeaderLine": {
        "count": 1,
        "size": 40
    },
    "_addHeaderLines": {
        "count": 1,
        "size": 40
    },
    "_address": {
        "count": 1,
        "size": 32
    },
    "_applyEach": {
        "count": 3,
        "size": 256
    },
    "_arrayEach": {
        "count": 3,
        "size": 256
    },
    "_asyncMap": {
        "count": 3,
        "size": 256
    },
    "_asyncQueue": {
        "count": 1,
        "size": 40
    },
    "_attach": {
        "count": 1,
        "size": 32
    },
    "_bindState": {
        "count": 1,
        "size": 40
    },
    "_bubble": {
        "count": 1,
        "size": 32
    },
    "_buffer": {
        "count": 1,
        "size": 32
    },
    "_bytesDispatched": {
        "count": 1,
        "size": 40
    },
    "_cache": {
        "count": 1,
        "size": 32
    },
    "_cacheSession": {
        "count": 3,
        "size": 256
    },
    "_calendar": {
        "count": 1,
        "size": 40
    },
    "_called": {
        "count": 1,
        "size": 32
    },
    "_changeInProgress": {
        "count": 1,
        "size": 48
    },
    "_channel": {
        "count": 1,
        "size": 32
    },
    "_checkModeProperty": {
        "count": 1,
        "size": 48
    },
    "_chunkEncoding": {
        "count": 1,
        "size": 40
    },
    "_chunks": {
        "count": 1,
        "size": 32
    },
    "_closeWebsocket": {
        "count": 1,
        "size": 40
    },
    "_closesGot": {
        "count": 1,
        "size": 40
    },
    "_closesNeeded": {
        "count": 1,
        "size": 40
    },
    "_compile": {
        "count": 1,
        "size": 32
    },
    "_concat": {
        "count": 3,
        "size": 248
    },
    "_config": {
        "count": 1,
        "size": 32
    },
    "_connect": {
        "count": 1,
        "size": 32
    },
    "_connecting": {
        "count": 1,
        "size": 40
    },
    "_connectionKey": {
        "count": 1,
        "size": 40
    },
    "_connectionListener": {
        "count": 1,
        "size": 48
    },
    "_connections": {
        "count": 1,
        "size": 40
    },
    "_console_fn": {
        "count": 3,
        "size": 256
    },
    "_consuming": {
        "count": 1,
        "size": 40
    },
    "_control": {
        "count": 1,
        "size": 32
    },
    "_convertCustomFds": {
        "count": 3,
        "size": 264
    },
    "_createServerHandle": {
        "count": 1,
        "size": 48
    },
    "_createSocketHandle": {
        "count": 1,
        "size": 48
    },
    "_createTester": {
        "count": 3,
        "size": 256
    },
    "_d": {
        "count": 1,
        "size": 32
    },
    "_debug": {
        "count": 1,
        "size": 32
    },
    "_debugEnd": {
        "count": 3,
        "size": 256
    },
    "_debugPause": {
        "count": 3,
        "size": 256
    },
    "_debugProcess": {
        "count": 3,
        "size": 256
    },
    "_debug_agent": {
        "count": 1,
        "size": 40
    },
    "_debugger": {
        "count": 1,
        "size": 40
    },
    "_decoder": {
        "count": 1,
        "size": 32
    },
    "_deepEqual": {
        "count": 3,
        "size": 256
    },
    "_deferToConnect": {
        "count": 1,
        "size": 40
    },
    "_delay": {
        "count": 1,
        "size": 32
    },
    "_deprecate": {
        "count": 1,
        "size": 40
    },
    "_deprecatedCustomFds": {
        "count": 1,
        "size": 48
    },
    "_dequeue": {
        "count": 1,
        "size": 32
    },
    "_destroy": {
        "count": 1,
        "size": 32
    },
    "_destroySSL": {
        "count": 3,
        "size": 256
    },
    "_detach": {
        "count": 1,
        "size": 32
    },
    "_detect": {
        "count": 1,
        "size": 32
    },
    "_disconnect": {
        "count": 1,
        "size": 40
    },
    "_disposed": {
        "count": 1,
        "size": 40
    },
    "_domain": {
        "count": 1,
        "size": 32
    },
    "_domain_flag": {
        "count": 1,
        "size": 40
    },
    "_done": {
        "count": 1,
        "size": 32
    },
    "_dump": {
        "count": 1,
        "size": 32
    },
    "_each": {
        "count": 1,
        "size": 32
    },
    "_eachLimit": {
        "count": 1,
        "size": 40
    },
    "_eachOfLimit": {
        "count": 3,
        "size": 256
    },
    "_emitCloseIfDrained": {
        "count": 1,
        "size": 48
    },
    "_emitMatch": {
        "count": 1,
        "size": 40
    },
    "_emitTLSError": {
        "count": 1,
        "size": 40
    },
    "_emittingTopLevelDomainError": {
        "count": 1,
        "size": 56
    },
    "_end": {
        "count": 22,
        "size": 1616
    },
    "_ended": {
        "count": 1,
        "size": 32
    },
    "_enqueue": {
        "count": 1,
        "size": 32
    },
    "_errnoException": {
        "count": 1,
        "size": 40
    },
    "_errorHandler": {
        "count": 1,
        "size": 40
    },
    "_eval": {
        "count": 1,
        "size": 32
    },
    "_events": {
        "count": 1,
        "size": 32
    },
    "_eventsCount": {
        "count": 1,
        "size": 40
    },
    "_exceptionWithHostPort": {
        "count": 1,
        "size": 48
    },
    "_exiting": {
        "count": 1,
        "size": 32
    },
    "_extend": {
        "count": 1,
        "size": 32
    },
    "_extensions": {
        "count": 1,
        "size": 40
    },
    "_external": {
        "count": 1,
        "size": 40
    },
    "_externalStream": {
        "count": 1,
        "size": 40
    },
    "_f": {
        "count": 1,
        "size": 32
    },
    "_fatalError": {
        "count": 1,
        "size": 40
    },
    "_fatalException": {
        "count": 1,
        "size": 40
    },
    "_filter": {
        "count": 3,
        "size": 248
    },
    "_findGetResult": {
        "count": 3,
        "size": 256
    },
    "_findPath": {
        "count": 1,
        "size": 40
    },
    "_finish": {
        "count": 1,
        "size": 32
    },
    "_finishInit": {
        "count": 1,
        "size": 40
    },
    "_flush": {
        "count": 1,
        "size": 32
    },
    "_flushSendQueue": {
        "count": 1,
        "size": 40
    },
    "_forEachOf": {
        "count": 3,
        "size": 256
    },
    "_forceRepl": {
        "count": 1,
        "size": 40
    },
    "_forkChild": {
        "count": 1,
        "size": 40
    },
    "_from": {
        "count": 1,
        "size": 32
    },
    "_fromList": {
        "count": 1,
        "size": 40
    },
    "_getActiveHandles": {
        "count": 3,
        "size": 264
    },
    "_getActiveRequests": {
        "count": 3,
        "size": 264
    },
    "_getServer": {
        "count": 1,
        "size": 40
    },
    "_getServerData": {
        "count": 1,
        "size": 40
    },
    "_getSession": {
        "count": 3,
        "size": 256
    },
    "_getpeername": {
        "count": 1,
        "size": 40
    },
    "_getsockname": {
        "count": 1,
        "size": 40
    },
    "_hadError": {
        "count": 1,
        "size": 40
    },
    "_handle": {
        "count": 1,
        "size": 32
    },
    "_handleDisconnect": {
        "count": 1,
        "size": 48
    },
    "_handleError": {
        "count": 1,
        "size": 40
    },
    "_handleMessage": {
        "count": 1,
        "size": 40
    },
    "_handleQueue": {
        "count": 1,
        "size": 40
    },
    "_handleTimeout": {
        "count": 1,
        "size": 40
    },
    "_healthCheck": {
        "count": 1,
        "size": 40
    },
    "_host": {
        "count": 1,
        "size": 32
    },
    "_http_agent": {
        "count": 1,
        "size": 40
    },
    "_http_agent.js": {
        "count": 1,
        "size": 128
    },
    "_http_client": {
        "count": 1,
        "size": 40
    },
    "_http_client.js": {
        "count": 1,
        "size": 128
    },
    "_http_common": {
        "count": 1,
        "size": 40
    },
    "_http_common.js": {
        "count": 1,
        "size": 128
    },
    "_http_incoming": {
        "count": 1,
        "size": 40
    },
    "_http_incoming.js": {
        "count": 1,
        "size": 128
    },
    "_http_outgoing": {
        "count": 1,
        "size": 40
    },
    "_http_outgoing.js": {
        "count": 1,
        "size": 128
    },
    "_http_server": {
        "count": 1,
        "size": 40
    },
    "_http_server.js": {
        "count": 1,
        "size": 128
    },
    "_i": {
        "count": 1,
        "size": 32
    },
    "_id": {
        "count": 1,
        "size": 32
    },
    "_idleNext": {
        "count": 1,
        "size": 40
    },
    "_idlePrev": {
        "count": 1,
        "size": 40
    },
    "_idleStart": {
        "count": 1,
        "size": 40
    },
    "_idleTimeout": {
        "count": 1,
        "size": 40
    },
    "_immediateCallback": {
        "count": 1,
        "size": 48
    },
    "_implicitHeader": {
        "count": 1,
        "size": 40
    },
    "_indexOf": {
        "count": 3,
        "size": 248
    },
    "_init": {
        "count": 1,
        "size": 32
    },
    "_initPaths": {
        "count": 1,
        "size": 40
    },
    "_internallyPendingBytes": {
        "count": 1,
        "size": 48
    },
    "_invalidDate": {
        "count": 1,
        "size": 40
    },
    "_isAMomentObject": {
        "count": 1,
        "size": 40
    },
    "_isArray": {
        "count": 1,
        "size": 32
    },
    "_isArrayLike": {
        "count": 3,
        "size": 256
    },
    "_isObject": {
        "count": 1,
        "size": 40
    },
    "_isOpen": {
        "count": 1,
        "size": 32
    },
    "_isStdio": {
        "count": 1,
        "size": 32
    },
    "_isUTC": {
        "count": 1,
        "size": 32
    },
    "_isValid": {
        "count": 1,
        "size": 32
    },
    "_keepEmptyLines": {
        "count": 1,
        "size": 40
    },
    "_keyIterator": {
        "count": 3,
        "size": 256
    },
    "_keys": {
        "count": 1,
        "size": 32
    },
    "_kill": {
        "count": 3,
        "size": 248
    },
    "_l": {
        "count": 1,
        "size": 32
    },
    "_lastAbnormalExit": {
        "count": 1,
        "size": 48
    },
    "_lastChunkEndedWithCR": {
        "count": 1,
        "size": 48
    },
    "_lazyConstants": {
        "count": 1,
        "size": 40
    },
    "_lineBuffer": {
        "count": 1,
        "size": 40
    },
    "_linkedBinding": {
        "count": 3,
        "size": 256
    },
    "_linklist": {
        "count": 1,
        "size": 40
    },
    "_linklist.js": {
        "count": 2,
        "size": 168
    },
    "_listen": {
        "count": 3,
        "size": 248
    },
    "_listen2": {
        "count": 1,
        "size": 32
    },
    "_listen2: create a handle": {
        "count": 1,
        "size": 56
    },
    "_listen2: have a handle already": {
        "count": 1,
        "size": 56
    },
    "_load": {
        "count": 1,
        "size": 32
    },
    "_locale": {
        "count": 1,
        "size": 32
    },
    "_longDateFormat": {
        "count": 1,
        "size": 40
    },
    "_makeAbs": {
        "count": 1,
        "size": 32
    },
    "_makeLong": {
        "count": 1,
        "size": 40
    },
    "_makeTimerTimeout": {
        "count": 3,
        "size": 264
    },
    "_map": {
        "count": 3,
        "size": 248
    },
    "_mapLimit": {
        "count": 1,
        "size": 40
    },
    "_mark": {
        "count": 1,
        "size": 32
    },
    "_maxListeners": {
        "count": 1,
        "size": 40
    },
    "_meridiemParse": {
        "count": 1,
        "size": 40
    },
    "_moment": {
        "count": 1,
        "size": 32
    },
    "_months": {
        "count": 1,
        "size": 32
    },
    "_monthsRegex": {
        "count": 1,
        "size": 40
    },
    "_monthsShort": {
        "count": 1,
        "size": 40
    },
    "_monthsShortRegex": {
        "count": 1,
        "size": 48
    },
    "_needImmediateCallback": {
        "count": 1,
        "size": 48
    },
    "_nextDay": {
        "count": 1,
        "size": 32
    },
    "_nodeModulePaths": {
        "count": 1,
        "size": 40
    },
    "_normalizeConnectArgs": {
        "count": 1,
        "size": 48
    },
    "_offset": {
        "count": 1,
        "size": 32
    },
    "_onImmediate": {
        "count": 1,
        "size": 40
    },
    "_onNotification": {
        "count": 1,
        "size": 40
    },
    "_onOpen": {
        "count": 1,
        "size": 32
    },
    "_onTimeout": {
        "count": 1,
        "size": 40
    },
    "_once": {
        "count": 3,
        "size": 248
    },
    "_onclose": {
        "count": 1,
        "size": 32
    },
    "_onmessage": {
        "count": 1,
        "size": 40
    },
    "_ordinal": {
        "count": 1,
        "size": 32
    },
    "_ordinalParse": {
        "count": 1,
        "size": 40
    },
    "_ordinalParseLenient": {
        "count": 1,
        "size": 48
    },
    "_overflowDayOfYear": {
        "count": 1,
        "size": 48
    },
    "_overflowWeekday": {
        "count": 1,
        "size": 40
    },
    "_overflowWeeks": {
        "count": 1,
        "size": 40
    },
    "_parallel": {
        "count": 3,
        "size": 256
    },
    "_parent": {
        "count": 1,
        "size": 32
    },
    "_pathCache": {
        "count": 1,
        "size": 40
    },
    "_pendingData": {
        "count": 1,
        "size": 40
    },
    "_pendingEncoding": {
        "count": 1,
        "size": 40
    },
    "_pf": {
        "count": 1,
        "size": 32
    },
    "_pipeName": {
        "count": 1,
        "size": 40
    },
    "_preloadModules": {
        "count": 1,
        "size": 40
    },
    "_preload_modules": {
        "count": 1,
        "size": 40
    },
    "_printDeprecationMessage": {
        "count": 1,
        "size": 48
    },
    "_process": {
        "count": 1,
        "size": 32
    },
    "_processChunk": {
        "count": 1,
        "size": 40
    },
    "_processGlobStar": {
        "count": 1,
        "size": 40
    },
    "_processGlobStar2": {
        "count": 1,
        "size": 48
    },
    "_processReaddir": {
        "count": 1,
        "size": 40
    },
    "_processReaddir2": {
        "count": 1,
        "size": 40
    },
    "_processSimple": {
        "count": 1,
        "size": 40
    },
    "_processSimple2": {
        "count": 1,
        "size": 40
    },
    "_promiseRejectEvent": {
        "count": 1,
        "size": 48
    },
    "_protocol": {
        "count": 1,
        "size": 40
    },
    "_pushBuffer": {
        "count": 1,
        "size": 40
    },
    "_queue": {
        "count": 3,
        "size": 248
    },
    "_range": {
        "count": 3,
        "size": 248
    },
    "_rawDebug": {
        "count": 3,
        "size": 256
    },
    "_read": {
        "count": 3,
        "size": 248
    },
    "_read wait for connection": {
        "count": 1,
        "size": 56
    },
    "_readableState": {
        "count": 1,
        "size": 40
    },
    "_readdir": {
        "count": 1,
        "size": 32
    },
    "_readdirEntries": {
        "count": 1,
        "size": 40
    },
    "_readdirError": {
        "count": 1,
        "size": 40
    },
    "_readdirInGlobStar": {
        "count": 1,
        "size": 48
    },
    "_realpath": {
        "count": 1,
        "size": 40
    },
    "_realpathCache": {
        "count": 1,
        "size": 40
    },
    "_realpathSet": {
        "count": 1,
        "size": 40
    },
    "_receiving": {
        "count": 1,
        "size": 40
    },
    "_reconnect": {
        "count": 1,
        "size": 40
    },
    "_recordSuicide": {
        "count": 3,
        "size": 256
    },
    "_reduce": {
        "count": 3,
        "size": 248
    },
    "_reencode": {
        "count": 1,
        "size": 40
    },
    "_refreshSize": {
        "count": 1,
        "size": 40
    },
    "_reject": {
        "count": 3,
        "size": 248
    },
    "_relativeTime": {
        "count": 1,
        "size": 40
    },
    "_releaseControl": {
        "count": 1,
        "size": 40
    },
    "_renderHeaders": {
        "count": 1,
        "size": 40
    },
    "_repeat": {
        "count": 1,
        "size": 32
    },
    "_request": {
        "count": 1,
        "size": 32
    },
    "_resize": {
        "count": 1,
        "size": 32
    },
    "_resize: worker %s": {
        "count": 1,
        "size": 48
    },
    "_resizing": {
        "count": 1,
        "size": 40
    },
    "_resolveFilename": {
        "count": 1,
        "size": 40
    },
    "_resolveLookupPaths": {
        "count": 1,
        "size": 48
    },
    "_resolved": {
        "count": 1,
        "size": 40
    },
    "_restParam": {
        "count": 3,
        "size": 256
    },
    "_reuseAddr": {
        "count": 1,
        "size": 40
    },
    "_runMicrotasks": {
        "count": 1,
        "size": 40
    },
    "_runOnTimeout": {
        "count": 3,
        "size": 256
    },
    "_running": {
        "count": 1,
        "size": 32
    },
    "_scheduleSendAck": {
        "count": 1,
        "size": 40
    },
    "_send": {
        "count": 3,
        "size": 248
    },
    "_sendAck": {
        "count": 1,
        "size": 32
    },
    "_sessionCache": {
        "count": 1,
        "size": 40
    },
    "_setImmediate": {
        "count": 1,
        "size": 40
    },
    "_setServerData": {
        "count": 1,
        "size": 40
    },
    "_setSimultaneousAccepts": {
        "count": 1,
        "size": 48
    },
    "_setupDomainUse": {
        "count": 3,
        "size": 256
    },
    "_setupNextTick": {
        "count": 3,
        "size": 256
    },
    "_setupPromises": {
        "count": 3,
        "size": 256
    },
    "_setupSlave": {
        "count": 1,
        "size": 40
    },
    "_setupWorker": {
        "count": 1,
        "size": 40
    },
    "_shasum": {
        "count": 1,
        "size": 32
    },
    "_simultaneousAccepts": {
        "count": 1,
        "size": 48
    },
    "_slaves": {
        "count": 1,
        "size": 32
    },
    "_socketEnd": {
        "count": 1,
        "size": 40
    },
    "_sockname": {
        "count": 1,
        "size": 40
    },
    "_source": {
        "count": 1,
        "size": 32
    },
    "_stack": {
        "count": 1,
        "size": 32
    },
    "_start": {
        "count": 1,
        "size": 32
    },
    "_startDelay": {
        "count": 3,
        "size": 256
    },
    "_startOne": {
        "count": 1,
        "size": 40
    },
    "_startOneAfterDelay": {
        "count": 3,
        "size": 264
    },
    "_startProfilerIdleNotifier": {
        "count": 3,
        "size": 272
    },
    "_stat": {
        "count": 1,
        "size": 32
    },
    "_stat2": {
        "count": 1,
        "size": 32
    },
    "_stderr": {
        "count": 1,
        "size": 32
    },
    "_stdout": {
        "count": 1,
        "size": 32
    },
    "_stopOne": {
        "count": 1,
        "size": 32
    },
    "_stopProfilerIdleNotifier": {
        "count": 3,
        "size": 272
    },
    "_stopReceiving": {
        "count": 1,
        "size": 40
    },
    "_storeHeader": {
        "count": 1,
        "size": 40
    },
    "_stream_duplex": {
        "count": 1,
        "size": 40
    },
    "_stream_duplex.js": {
        "count": 1,
        "size": 128
    },
    "_stream_passthrough": {
        "count": 1,
        "size": 48
    },
    "_stream_passthrough.js": {
        "count": 1,
        "size": 128
    },
    "_stream_readable": {
        "count": 1,
        "size": 40
    },
    "_stream_readable.js": {
        "count": 1,
        "size": 128
    },
    "_stream_transform": {
        "count": 1,
        "size": 48
    },
    "_stream_transform.js": {
        "count": 1,
        "size": 128
    },
    "_stream_wrap": {
        "count": 1,
        "size": 40
    },
    "_stream_wrap.js": {
        "count": 1,
        "size": 128
    },
    "_stream_writable": {
        "count": 1,
        "size": 40
    },
    "_stream_writable.js": {
        "count": 1,
        "size": 128
    },
    "_strict": {
        "count": 1,
        "size": 32
    },
    "_stringToFlags": {
        "count": 1,
        "size": 40
    },
    "_strongControlChannel": {
        "count": 1,
        "size": 48
    },
    "_strongControlMaster": {
        "count": 1,
        "size": 48
    },
    "_syntax_check_only": {
        "count": 1,
        "size": 48
    },
    "_target": {
        "count": 1,
        "size": 32
    },
    "_third_party_main": {
        "count": 1,
        "size": 48
    },
    "_throws": {
        "count": 3,
        "size": 248
    },
    "_tickCallback": {
        "count": 2,
        "size": 184
    },
    "_tickDomainCallback": {
        "count": 3,
        "size": 264
    },
    "_times": {
        "count": 3,
        "size": 248
    },
    "_tlsError": {
        "count": 1,
        "size": 40
    },
    "_tls_common": {
        "count": 1,
        "size": 40
    },
    "_tls_common.js": {
        "count": 1,
        "size": 128
    },
    "_tls_legacy": {
        "count": 1,
        "size": 40
    },
    "_tls_legacy.js": {
        "count": 1,
        "size": 128
    },
    "_tls_wrap": {
        "count": 1,
        "size": 40
    },
    "_tls_wrap.js": {
        "count": 2,
        "size": 168
    },
    "_toBuf": {
        "count": 1,
        "size": 32
    },
    "_toString": {
        "count": 1,
        "size": 40
    },
    "_toUnixTimestamp": {
        "count": 1,
        "size": 40
    },
    "_transform": {
        "count": 1,
        "size": 40
    },
    "_transformState": {
        "count": 1,
        "size": 40
    },
    "_type": {
        "count": 1,
        "size": 32
    },
    "_tzm": {
        "count": 1,
        "size": 32
    },
    "_unref": {
        "count": 1,
        "size": 32
    },
    "_unrefActive": {
        "count": 1,
        "size": 40
    },
    "_unrefTimer": {
        "count": 1,
        "size": 40
    },
    "_unscheduleSendAck": {
        "count": 1,
        "size": 48
    },
    "_useUTC": {
        "count": 1,
        "size": 32
    },
    "_usingSlaves": {
        "count": 1,
        "size": 40
    },
    "_validateStdio": {
        "count": 3,
        "size": 256
    },
    "_watchers": {
        "count": 1,
        "size": 40
    },
    "_week": {
        "count": 1,
        "size": 32
    },
    "_weekdays": {
        "count": 1,
        "size": 40
    },
    "_weekdaysMin": {
        "count": 1,
        "size": 40
    },
    "_weekdaysMinRegex": {
        "count": 1,
        "size": 48
    },
    "_weekdaysRegex": {
        "count": 1,
        "size": 40
    },
    "_weekdaysShort": {
        "count": 1,
        "size": 40
    },
    "_weekdaysShortRegex": {
        "count": 1,
        "size": 48
    },
    "_withoutIndex": {
        "count": 3,
        "size": 256
    },
    "_wrapHandle": {
        "count": 1,
        "size": 40
    },
    "_writableState": {
        "count": 1,
        "size": 40
    },
    "_writableState.buffer is deprecated. Use _writableState.getBuffer ": {
        "count": 1,
        "size": 96
    },
    "_write": {
        "count": 1,
        "size": 32
    },
    "_writeGeneric": {
        "count": 1,
        "size": 40
    },
    "_writePending": {
        "count": 1,
        "size": 40
    },
    "_writeRaw": {
        "count": 1,
        "size": 40
    },
    "_writev": {
        "count": 1,
        "size": 32
    },
    "`": {
        "count": 1,
        "size": 32
    },
    "a": {
        "count": 1,
        "size": 32
    },
    "a day": {
        "count": 1,
        "size": 32
    },
    "a few seconds": {
        "count": 1,
        "size": 40
    },
    "a minute": {
        "count": 1,
        "size": 32
    },
    "a month": {
        "count": 1,
        "size": 32
    },
    "a year": {
        "count": 1,
        "size": 32
    },
    "a+": {
        "count": 1,
        "size": 32
    },
    "aA": {
        "count": 1,
        "size": 32
    },
    "aB": {
        "count": 1,
        "size": 32
    },
    "aC": {
        "count": 1,
        "size": 32
    },
    "aD": {
        "count": 1,
        "size": 32
    },
    "aE": {
        "count": 1,
        "size": 32
    },
    "aF": {
        "count": 1,
        "size": 32
    },
    "aG": {
        "count": 1,
        "size": 32
    },
    "aH": {
        "count": 1,
        "size": 32
    },
    "aI": {
        "count": 1,
        "size": 32
    },
    "aJ": {
        "count": 1,
        "size": 32
    },
    "aK": {
        "count": 1,
        "size": 32
    },
    "aM": {
        "count": 1,
        "size": 32
    },
    "aN": {
        "count": 1,
        "size": 32
    },
    "aO": {
        "count": 1,
        "size": 32
    },
    "aP": {
        "count": 1,
        "size": 32
    },
    "aQ": {
        "count": 1,
        "size": 32
    },
    "aR": {
        "count": 1,
        "size": 32
    },
    "aS": {
        "count": 1,
        "size": 32
    },
    "aT": {
        "count": 1,
        "size": 32
    },
    "aU": {
        "count": 1,
        "size": 32
    },
    "aV": {
        "count": 1,
        "size": 32
    },
    "aW": {
        "count": 1,
        "size": 32
    },
    "aX": {
        "count": 1,
        "size": 32
    },
    "aY": {
        "count": 1,
        "size": 32
    },
    "aZ": {
        "count": 1,
        "size": 32
    },
    "aa": {
        "count": 1,
        "size": 32
    },
    "ab": {
        "count": 1,
        "size": 32
    },
    "abbr": {
        "count": 1,
        "size": 32
    },
    "abormal exit by worker %s at time %s": {
        "count": 1,
        "size": 64
    },
    "abort": {
        "count": 3,
        "size": 248
    },
    "abortConnection": {
        "count": 3,
        "size": 256
    },
    "aborted": {
        "count": 1,
        "size": 32
    },
    "abs": {
        "count": 3,
        "size": 248
    },
    "absCeil": {
        "count": 3,
        "size": 248
    },
    "absFloor": {
        "count": 3,
        "size": 248
    },
    "absRound": {
        "count": 3,
        "size": 248
    },
    "absolute": {
        "count": 1,
        "size": 32
    },
    "absolutePath": {
        "count": 1,
        "size": 40
    },
    "ac": {
        "count": 1,
        "size": 32
    },
    "acc": {
        "count": 1,
        "size": 32
    },
    "accept": {
        "count": 3,
        "size": 248
    },
    "acceptAsClient": {
        "count": 1,
        "size": 40
    },
    "acceptAsServer": {
        "count": 1,
        "size": 40
    },
    "acceptExtensions": {
        "count": 3,
        "size": 256
    },
    "access": {
        "count": 3,
        "size": 248
    },
    "accessSync": {
        "count": 1,
        "size": 40
    },
    "accountKey": {
        "count": 1,
        "size": 40
    },
    "ack": {
        "count": 1,
        "size": 32
    },
    "acos": {
        "count": 3,
        "size": 248
    },
    "acosh": {
        "count": 3,
        "size": 248
    },
    "act": {
        "count": 1,
        "size": 32
    },
    "active": {
        "count": 1,
        "size": 32
    },
    "actual": {
        "count": 1,
        "size": 32
    },
    "ad": {
        "count": 1,
        "size": 32
    },
    "adapt": {
        "count": 3,
        "size": 248
    },
    "adapter": {
        "count": 1,
        "size": 32
    },
    "add": {
        "count": 7,
        "size": 680
    },
    "addBoundMethod": {
        "count": 3,
        "size": 256
    },
    "addCACert": {
        "count": 3,
        "size": 256
    },
    "addCRL": {
        "count": 3,
        "size": 248
    },
    "addContext": {
        "count": 1,
        "size": 40
    },
    "addDebuggerStatusNotification": {
        "count": 3,
        "size": 272
    },
    "addEventListener": {
        "count": 1,
        "size": 40
    },
    "addFormatToken": {
        "count": 3,
        "size": 256
    },
    "addListener": {
        "count": 3,
        "size": 256
    },
    "addMembership": {
        "count": 3,
        "size": 256
    },
    "addMonitoring": {
        "count": 7,
        "size": 688
    },
    "addOptionalDepsToDeps": {
        "count": 3,
        "size": 264
    },
    "addParseToken": {
        "count": 3,
        "size": 256
    },
    "addPendingUnhandledRejection": {
        "count": 1,
        "size": 56
    },
    "addRegexToken": {
        "count": 3,
        "size": 256
    },
    "addRequest": {
        "count": 1,
        "size": 40
    },
    "addRootCerts": {
        "count": 3,
        "size": 256
    },
    "addTimeToArrayFromToken": {
        "count": 3,
        "size": 264
    },
    "addToFront": {
        "count": 1,
        "size": 40
    },
    "addTrailers": {
        "count": 1,
        "size": 40
    },
    "addUnitAlias": {
        "count": 2,
        "size": 184
    },
    "addWECPropertyIfDefined": {
        "count": 3,
        "size": 264
    },
    "addWEPropertyIfDefined": {
        "count": 2,
        "size": 192
    },
    "addWeekParseToken": {
        "count": 3,
        "size": 264
    },
    "addWeekYearFormatToken": {
        "count": 2,
        "size": 192
    },
    "add_subtract__add": {
        "count": 1,
        "size": 48
    },
    "add_subtract__addSubtract": {
        "count": 3,
        "size": 272
    },
    "add_subtract__subtract": {
        "count": 1,
        "size": 48
    },
    "additional": {
        "count": 1,
        "size": 40
    },
    "addon": {
        "count": 1,
        "size": 32
    },
    "addr": {
        "count": 1,
        "size": 32
    },
    "address": {
        "count": 3,
        "size": 248
    },
    "addressType": {
        "count": 1,
        "size": 40
    },
    "adoptText": {
        "count": 3,
        "size": 256
    },
    "ae": {
        "count": 1,
        "size": 32
    },
    "af": {
        "count": 1,
        "size": 32
    },
    "after": {
        "count": 3,
        "size": 248
    },
    "afterConnect": {
        "count": 3,
        "size": 256
    },
    "afterConstructor": {
        "count": 1,
        "size": 40
    },
    "afterSend": {
        "count": 3,
        "size": 256
    },
    "afterShutdown": {
        "count": 3,
        "size": 256
    },
    "afterTransform": {
        "count": 3,
        "size": 256
    },
    "afterWrite": {
        "count": 5,
        "size": 472
    },
    "afterWrite call cb": {
        "count": 1,
        "size": 48
    },
    "afterWrite destroyed": {
        "count": 1,
        "size": 48
    },
    "ag": {
        "count": 1,
        "size": 32
    },
    "agent": {
        "count": 4,
        "size": 280
    },
    "agent is not configured to report metrics": {
        "count": 1,
        "size": 72
    },
    "agent-trace": {
        "count": 1,
        "size": 40
    },
    "agent:trace": {
        "count": 1,
        "size": 40
    },
    "agentVersion": {
        "count": 1,
        "size": 40
    },
    "agentcore.version": {
        "count": 1,
        "size": 48
    },
    "ah": {
        "count": 1,
        "size": 32
    },
    "ai": {
        "count": 1,
        "size": 32
    },
    "aj": {
        "count": 1,
        "size": 32
    },
    "ak": {
        "count": 1,
        "size": 32
    },
    "al": {
        "count": 1,
        "size": 32
    },
    "alias": {
        "count": 1,
        "size": 32
    },
    "aliases": {
        "count": 1,
        "size": 32
    },
    "alignPool": {
        "count": 3,
        "size": 256
    },
    "all": {
        "count": 3,
        "size": 248
    },
    "alloc": {
        "count": 1,
        "size": 32
    },
    "allocNewPool": {
        "count": 5,
        "size": 472
    },
    "allocPool": {
        "count": 1,
        "size": 40
    },
    "allocate": {
        "count": 3,
        "size": 248
    },
    "allocateFromPool": {
        "count": 1,
        "size": 40
    },
    "allowAboveRoot": {
        "count": 1,
        "size": 40
    },
    "allowHalfOpen": {
        "count": 1,
        "size": 40
    },
    "allowIndexes": {
        "count": 1,
        "size": 40
    },
    "alphasort": {
        "count": 3,
        "size": 256
    },
    "alphasorti": {
        "count": 3,
        "size": 256
    },
    "already destroyed, fire error callbacks": {
        "count": 1,
        "size": 64
    },
    "am": {
        "count": 1,
        "size": 32
    },
    "amd": {
        "count": 1,
        "size": 32
    },
    "an": {
        "count": 1,
        "size": 32
    },
    "an existing locale. moment.defineLocale(localeName, ": {
        "count": 1,
        "size": 80
    },
    "an hour": {
        "count": 1,
        "size": 32
    },
    "an unexpected condition prevented the request from being fulfilled": {
        "count": 1,
        "size": 96
    },
    "analyze": {
        "count": 1,
        "size": 32
    },
    "anchor": {
        "count": 3,
        "size": 248
    },
    "anonymous": {
        "count": 1,
        "size": 40
    },
    "any": {
        "count": 1,
        "size": 32
    },
    "anycast": {
        "count": 1,
        "size": 32
    },
    "api": {
        "count": 1,
        "size": 32
    },
    "app": {
        "count": 1,
        "size": 32
    },
    "app is not a file or a directory ": {
        "count": 1,
        "size": 64
    },
    "app.js": {
        "count": 1,
        "size": 32
    },
    "appName": {
        "count": 1,
        "size": 32
    },
    "append": {
        "count": 3,
        "size": 248
    },
    "appendFile": {
        "count": 3,
        "size": 256
    },
    "appendFileSync": {
        "count": 1,
        "size": 40
    },
    "appendNewline": {
        "count": 7,
        "size": 544
    },
    "appendToDateTimeObject": {
        "count": 3,
        "size": 264
    },
    "appendToLDMLString": {
        "count": 3,
        "size": 264
    },
    "application": {
        "count": 1,
        "size": 40
    },
    "apply": {
        "count": 3,
        "size": 248
    },
    "applyEach": {
        "count": 1,
        "size": 40
    },
    "applyEachSeries": {
        "count": 1,
        "size": 40
    },
    "applyExtensions": {
        "count": 1,
        "size": 40
    },
    "appmetrics": {
        "count": 2,
        "size": 80
    },
    "appmetrics.version": {
        "count": 1,
        "size": 48
    },
    "appmetrics/package.json": {
        "count": 1,
        "size": 48
    },
    "appmetrics@1.0.12-dev": {
        "count": 1,
        "size": 48
    },
    "appmetricsStarted": {
        "count": 1,
        "size": 48
    },
    "ar": {
        "count": 1,
        "size": 32
    },
    "arch": {
        "count": 1,
        "size": 32
    },
    "archiveInterval": {
        "count": 1,
        "size": 40
    },
    "ares": {
        "count": 1,
        "size": 32
    },
    "arg": {
        "count": 1,
        "size": 32
    },
    "arg1": {
        "count": 1,
        "size": 32
    },
    "arg2": {
        "count": 1,
        "size": 32
    },
    "arg3": {
        "count": 1,
        "size": 32
    },
    "argCount": {
        "count": 1,
        "size": 32
    },
    "argPos": {
        "count": 1,
        "size": 32
    },
    "args": {
        "count": 1,
        "size": 32
    },
    "argsTag": {
        "count": 1,
        "size": 32
    },
    "arguments": {
        "count": 1,
        "size": 40
    },
    "arguments_marker": {
        "count": 1,
        "size": 40
    },
    "argv": {
        "count": 1,
        "size": 32
    },
    "arity": {
        "count": 1,
        "size": 32
    },
    "around": {
        "count": 1,
        "size": 32
    },
    "aroundCallback": {
        "count": 1,
        "size": 40
    },
    "arr": {
        "count": 1,
        "size": 32
    },
    "array": {
        "count": 1,
        "size": 32
    },
    "arrayBufferTag": {
        "count": 1,
        "size": 40
    },
    "arrayClone": {
        "count": 3,
        "size": 256
    },
    "arrayConcat": {
        "count": 3,
        "size": 256
    },
    "arrayCopy": {
        "count": 3,
        "size": 256
    },
    "arrayEach": {
        "count": 3,
        "size": 256
    },
    "arrayEachRight": {
        "count": 3,
        "size": 256
    },
    "arrayEvery": {
        "count": 3,
        "size": 256
    },
    "arrayExtremum": {
        "count": 3,
        "size": 256
    },
    "arrayFilter": {
        "count": 3,
        "size": 256
    },
    "arrayFunc": {
        "count": 1,
        "size": 40
    },
    "arrayMap": {
        "count": 3,
        "size": 248
    },
    "arrayProto": {
        "count": 1,
        "size": 40
    },
    "arrayPush": {
        "count": 3,
        "size": 256
    },
    "arrayReduce": {
        "count": 3,
        "size": 256
    },
    "arrayReduceRight": {
        "count": 3,
        "size": 256
    },
    "arraySome": {
        "count": 3,
        "size": 256
    },
    "arraySum": {
        "count": 3,
        "size": 248
    },
    "arrayTag": {
        "count": 1,
        "size": 32
    },
    "arrayToHash": {
        "count": 3,
        "size": 256
    },
    "arrays": {
        "count": 1,
        "size": 32
    },
    "arrow": {
        "count": 1,
        "size": 32
    },
    "arrowMessage": {
        "count": 1,
        "size": 40
    },
    "ary": {
        "count": 3,
        "size": 248
    },
    "as": {
        "count": 3,
        "size": 248
    },
    "asDays": {
        "count": 1,
        "size": 32
    },
    "asHours": {
        "count": 1,
        "size": 32
    },
    "asMilliseconds": {
        "count": 1,
        "size": 40
    },
    "asMinutes": {
        "count": 1,
        "size": 40
    },
    "asMonths": {
        "count": 1,
        "size": 32
    },
    "asSeconds": {
        "count": 1,
        "size": 40
    },
    "asWeeks": {
        "count": 1,
        "size": 32
    },
    "asYears": {
        "count": 1,
        "size": 32
    },
    "asan": {
        "count": 1,
        "size": 32
    },
    "asap": {
        "count": 3,
        "size": 248
    },
    "ascii": {
        "count": 1,
        "size": 32
    },
    "asciiSlice": {
        "count": 3,
        "size": 256
    },
    "asciiWrite": {
        "count": 3,
        "size": 256
    },
    "asin": {
        "count": 3,
        "size": 248
    },
    "asinh": {
        "count": 3,
        "size": 248
    },
    "aspNetJsonRegex": {
        "count": 1,
        "size": 40
    },
    "aspNetRegex": {
        "count": 1,
        "size": 40
    },
    "aspect": {
        "count": 1,
        "size": 32
    },
    "aspectCollectionMethod": {
        "count": 1,
        "size": 48
    },
    "aspectJugglerMethod": {
        "count": 3,
        "size": 264
    },
    "aspectLvldownMethod": {
        "count": 3,
        "size": 264
    },
    "assert": {
        "count": 2,
        "size": 64
    },
    "assert.js": {
        "count": 2,
        "size": 168
    },
    "assertEncoding": {
        "count": 7,
        "size": 688
    },
    "assertPath": {
        "count": 3,
        "size": 256
    },
    "assertion error": {
        "count": 1,
        "size": 40
    },
    "assign": {
        "count": 3,
        "size": 248
    },
    "assignDefaults": {
        "count": 3,
        "size": 256
    },
    "assignOwnDefaults": {
        "count": 3,
        "size": 264
    },
    "assignSocket": {
        "count": 1,
        "size": 40
    },
    "assignWith": {
        "count": 3,
        "size": 256
    },
    "assigner": {
        "count": 1,
        "size": 32
    },
    "async": {
        "count": 1,
        "size": 32
    },
    "async.apply": {
        "count": 1,
        "size": 40
    },
    "async.auto": {
        "count": 2,
        "size": 80
    },
    "async.cargo": {
        "count": 2,
        "size": 80
    },
    "async.during": {
        "count": 1,
        "size": 40
    },
    "async.each": {
        "count": 1,
        "size": 40
    },
    "async.every": {
        "count": 1,
        "size": 40
    },
    "async.foldr": {
        "count": 1,
        "size": 40
    },
    "async.inject": {
        "count": 1,
        "size": 40
    },
    "async.queue": {
        "count": 2,
        "size": 80
    },
    "async.reduce": {
        "count": 1,
        "size": 40
    },
    "async.retry": {
        "count": 2,
        "size": 80
    },
    "async.seq": {
        "count": 2,
        "size": 80
    },
    "async.series": {
        "count": 2,
        "size": 80
    },
    "async.some": {
        "count": 1,
        "size": 40
    },
    "async.sortBy": {
        "count": 2,
        "size": 80
    },
    "async.times": {
        "count": 1,
        "size": 40
    },
    "async.until": {
        "count": 2,
        "size": 80
    },
    "async.whilst": {
        "count": 2,
        "size": 80
    },
    "asyncCallback": {
        "count": 2,
        "size": 184
    },
    "asyncMap": {
        "count": 3,
        "size": 248
    },
    "asyncify": {
        "count": 3,
        "size": 248
    },
    "at": {
        "count": 1,
        "size": 32
    },
    "at %s.%s(%s%s)": {
        "count": 1,
        "size": 40
    },
    "at ((.*)(:\\d*)(:\\d*))": {
        "count": 3,
        "size": 192
    },
    "at (.*) \\(((.*)(:\\d*)(:\\d*))\\)": {
        "count": 3,
        "size": 200
    },
    "at (.*)\\.(.*) \\(((.*)(:\\d*)(:\\d*))\\)": {
        "count": 3,
        "size": 208
    },
    "atSign": {
        "count": 1,
        "size": 32
    },
    "atan": {
        "count": 3,
        "size": 248
    },
    "atan2": {
        "count": 3,
        "size": 248
    },
    "atanh": {
        "count": 3,
        "size": 248
    },
    "atim_msec": {
        "count": 1,
        "size": 40
    },
    "atime": {
        "count": 1,
        "size": 32
    },
    "attach": {
        "count": 9,
        "size": 896
    },
    "attaching to cluster in pid %d": {
        "count": 1,
        "size": 56
    },
    "attempt": {
        "count": 1,
        "size": 32
    },
    "attempt to write outside buffer bounds": {
        "count": 1,
        "size": 64
    },
    "au": {
        "count": 1,
        "size": 32
    },
    "auth": {
        "count": 1,
        "size": 32
    },
    "author": {
        "count": 3,
        "size": 96
    },
    "authors": {
        "count": 3,
        "size": 248
    },
    "authors_": {
        "count": 3,
        "size": 248
    },
    "auto": {
        "count": 1,
        "size": 32
    },
    "autoClose": {
        "count": 1,
        "size": 40
    },
    "autoDestroy": {
        "count": 1,
        "size": 40
    },
    "autoEscape": {
        "count": 1,
        "size": 40
    },
    "autohr": {
        "count": 1,
        "size": 32
    },
    "automaticHeaders": {
        "count": 1,
        "size": 40
    },
    "autor": {
        "count": 1,
        "size": 32
    },
    "av": {
        "count": 1,
        "size": 32
    },
    "available": {
        "count": 1,
        "size": 40
    },
    "averageRunningTotal": {
        "count": 1,
        "size": 48
    },
    "avg": {
        "count": 1,
        "size": 32
    },
    "aw": {
        "count": 1,
        "size": 32
    },
    "awaitDrain": {
        "count": 1,
        "size": 40
    },
    "ax": {
        "count": 1,
        "size": 32
    },
    "ax+": {
        "count": 1,
        "size": 32
    },
    "axon": {
        "count": 1,
        "size": 32
    },
    "ay": {
        "count": 1,
        "size": 32
    },
    "az": {
        "count": 1,
        "size": 32
    },
    "b": {
        "count": 1,
        "size": 32
    },
    "ba": {
        "count": 1,
        "size": 32
    },
    "backend": {
        "count": 3,
        "size": 248
    },
    "backendEvents": {
        "count": 1,
        "size": 40
    },
    "backendmod": {
        "count": 1,
        "size": 40
    },
    "backends": {
        "count": 1,
        "size": 32
    },
    "backends checked: %s": {
        "count": 1,
        "size": 48
    },
    "backflow": {
        "count": 1,
        "size": 32
    },
    "backlog": {
        "count": 1,
        "size": 32
    },
    "bad_lines_seen": {
        "count": 1,
        "size": 40
    },
    "balanced": {
        "count": 3,
        "size": 248
    },
    "balanced-match": {
        "count": 1,
        "size": 40
    },
    "base": {
        "count": 1,
        "size": 32
    },
    "base64": {
        "count": 1,
        "size": 32
    },
    "base64ByteLength": {
        "count": 3,
        "size": 256
    },
    "base64DetectIncompleteChar": {
        "count": 3,
        "size": 272
    },
    "base64Slice": {
        "count": 3,
        "size": 256
    },
    "base64Write": {
        "count": 3,
        "size": 256
    },
    "baseAssign": {
        "count": 3,
        "size": 256
    },
    "baseAt": {
        "count": 3,
        "size": 248
    },
    "baseCallback": {
        "count": 3,
        "size": 256
    },
    "baseClone": {
        "count": 3,
        "size": 256
    },
    "baseCompareAscending": {
        "count": 3,
        "size": 264
    },
    "baseCopy": {
        "count": 3,
        "size": 248
    },
    "baseCreate": {
        "count": 1,
        "size": 40
    },
    "baseDelay": {
        "count": 3,
        "size": 256
    },
    "baseDifference": {
        "count": 3,
        "size": 256
    },
    "baseEach": {
        "count": 1,
        "size": 32
    },
    "baseEachRight": {
        "count": 1,
        "size": 40
    },
    "baseEvery": {
        "count": 3,
        "size": 256
    },
    "baseExtremum": {
        "count": 3,
        "size": 256
    },
    "baseFill": {
        "count": 3,
        "size": 248
    },
    "baseFilter": {
        "count": 3,
        "size": 256
    },
    "baseFind": {
        "count": 3,
        "size": 248
    },
    "baseFindIndex": {
        "count": 3,
        "size": 256
    },
    "baseFlatten": {
        "count": 3,
        "size": 256
    },
    "baseFor": {
        "count": 1,
        "size": 32
    },
    "baseForIn": {
        "count": 3,
        "size": 256
    },
    "baseForOwn": {
        "count": 3,
        "size": 256
    },
    "baseForOwnRight": {
        "count": 3,
        "size": 256
    },
    "baseForRight": {
        "count": 1,
        "size": 40
    },
    "baseFunctions": {
        "count": 3,
        "size": 256
    },
    "baseGet": {
        "count": 3,
        "size": 248
    },
    "baseIndexOf": {
        "count": 3,
        "size": 256
    },
    "baseIsEqual": {
        "count": 3,
        "size": 256
    },
    "baseIsEqualDeep": {
        "count": 3,
        "size": 256
    },
    "baseIsFunction": {
        "count": 3,
        "size": 256
    },
    "baseIsMatch": {
        "count": 3,
        "size": 256
    },
    "baseLodash": {
        "count": 3,
        "size": 256
    },
    "baseMap": {
        "count": 3,
        "size": 248
    },
    "baseMatches": {
        "count": 3,
        "size": 256
    },
    "baseMatchesProperty": {
        "count": 3,
        "size": 264
    },
    "baseMerge": {
        "count": 3,
        "size": 256
    },
    "baseMergeDeep": {
        "count": 3,
        "size": 256
    },
    "baseMinusTMin": {
        "count": 1,
        "size": 40
    },
    "basePath": {
        "count": 1,
        "size": 32
    },
    "baseProperty": {
        "count": 3,
        "size": 256
    },
    "basePropertyDeep": {
        "count": 3,
        "size": 256
    },
    "basePullAt": {
        "count": 3,
        "size": 256
    },
    "baseRandom": {
        "count": 3,
        "size": 256
    },
    "baseReduce": {
        "count": 3,
        "size": 256
    },
    "baseSetData": {
        "count": 1,
        "size": 40
    },
    "baseSlice": {
        "count": 3,
        "size": 256
    },
    "baseSome": {
        "count": 3,
        "size": 248
    },
    "baseSortBy": {
        "count": 3,
        "size": 256
    },
    "baseSortByOrder": {
        "count": 3,
        "size": 256
    },
    "baseSum": {
        "count": 3,
        "size": 248
    },
    "baseToString": {
        "count": 3,
        "size": 256
    },
    "baseUniq": {
        "count": 3,
        "size": 248
    },
    "baseUrls": {
        "count": 1,
        "size": 32
    },
    "baseValues": {
        "count": 3,
        "size": 256
    },
    "baseWhile": {
        "count": 3,
        "size": 256
    },
    "baseWrapperValue": {
        "count": 3,
        "size": 256
    },
    "basename": {
        "count": 1,
        "size": 32
    },
    "basho-riak-client": {
        "count": 1,
        "size": 48
    },
    "basicIsoRegex": {
        "count": 1,
        "size": 40
    },
    "basicToDigit": {
        "count": 3,
        "size": 256
    },
    "batch": {
        "count": 1,
        "size": 32
    },
    "bb": {
        "count": 1,
        "size": 32
    },
    "bc": {
        "count": 1,
        "size": 32
    },
    "bd": {
        "count": 1,
        "size": 32
    },
    "be": {
        "count": 1,
        "size": 32
    },
    "be null or undefined.": {
        "count": 1,
        "size": 48
    },
    "before": {
        "count": 3,
        "size": 248
    },
    "bestFitMatcher": {
        "count": 3,
        "size": 256
    },
    "bestFitSupportedLocalesOf": {
        "count": 3,
        "size": 272
    },
    "bf": {
        "count": 1,
        "size": 32
    },
    "bg": {
        "count": 1,
        "size": 32
    },
    "bi": {
        "count": 1,
        "size": 32
    },
    "big": {
        "count": 3,
        "size": 248
    },
    "bigHour": {
        "count": 1,
        "size": 32
    },
    "bin": {
        "count": 1,
        "size": 32
    },
    "bin/appmetrics-cli.js": {
        "count": 1,
        "size": 48
    },
    "bin/sl-log-transformer.js": {
        "count": 1,
        "size": 56
    },
    "bin_": {
        "count": 1,
        "size": 32
    },
    "bin_i": {
        "count": 1,
        "size": 32
    },
    "bin_name": {
        "count": 1,
        "size": 32
    },
    "binary": {
        "count": 1,
        "size": 32
    },
    "binaryIndex": {
        "count": 3,
        "size": 256
    },
    "binaryIndexBy": {
        "count": 3,
        "size": 256
    },
    "binarySlice": {
        "count": 3,
        "size": 256
    },
    "binaryWrite": {
        "count": 3,
        "size": 256
    },
    "bind": {
        "count": 9,
        "size": 896
    },
    "bind to ": {
        "count": 1,
        "size": 32
    },
    "bind6": {
        "count": 5,
        "size": 464
    },
    "bindActor": {
        "count": 3,
        "size": 256
    },
    "bindAll": {
        "count": 1,
        "size": 32
    },
    "bindCallback": {
        "count": 3,
        "size": 256
    },
    "bindKey": {
        "count": 1,
        "size": 32
    },
    "binding": {
        "count": 3,
        "size": 248
    },
    "bindingName": {
        "count": 1,
        "size": 40
    },
    "bindingObj": {
        "count": 1,
        "size": 40
    },
    "bindings": {
        "count": 7,
        "size": 680
    },
    "bindings.node": {
        "count": 1,
        "size": 40
    },
    "bins": {
        "count": 3,
        "size": 248
    },
    "bins_": {
        "count": 3,
        "size": 248
    },
    "birthtim_msec": {
        "count": 1,
        "size": 40
    },
    "birthtime": {
        "count": 1,
        "size": 40
    },
    "bit": {
        "count": 1,
        "size": 32
    },
    "bitmask": {
        "count": 1,
        "size": 32
    },
    "bj": {
        "count": 1,
        "size": 32
    },
    "bk": {
        "count": 1,
        "size": 32
    },
    "bkey": {
        "count": 1,
        "size": 32
    },
    "bkeys": {
        "count": 1,
        "size": 32
    },
    "bl": {
        "count": 1,
        "size": 32
    },
    "black": {
        "count": 1,
        "size": 32
    },
    "blacklist": {
        "count": 1,
        "size": 40
    },
    "blink": {
        "count": 3,
        "size": 248
    },
    "blksize": {
        "count": 1,
        "size": 32
    },
    "blocks": {
        "count": 1,
        "size": 32
    },
    "blue": {
        "count": 1,
        "size": 32
    },
    "bluebird": {
        "count": 1,
        "size": 32
    },
    "bm": {
        "count": 1,
        "size": 32
    },
    "bn": {
        "count": 1,
        "size": 32
    },
    "bo": {
        "count": 1,
        "size": 32
    },
    "bold": {
        "count": 3,
        "size": 248
    },
    "boolTag": {
        "count": 1,
        "size": 32
    },
    "boolean": {
        "count": 1,
        "size": 32
    },
    "bound": {
        "count": 3,
        "size": 248
    },
    "bound ": {
        "count": 1,
        "size": 32
    },
    "bound emit": {
        "count": 4,
        "size": 160
    },
    "bound log": {
        "count": 1,
        "size": 40
    },
    "bound trace": {
        "count": 1,
        "size": 40
    },
    "bp": {
        "count": 1,
        "size": 32
    },
    "bq": {
        "count": 1,
        "size": 32
    },
    "br": {
        "count": 1,
        "size": 32
    },
    "brace-expansion": {
        "count": 1,
        "size": 40
    },
    "braceExpand": {
        "count": 3,
        "size": 256
    },
    "braces": {
        "count": 1,
        "size": 32
    },
    "breakType": {
        "count": 14,
        "size": 1120
    },
    "breakiterator": {
        "count": 1,
        "size": 40
    },
    "brokenGitUrl": {
        "count": 1,
        "size": 40
    },
    "bs": {
        "count": 1,
        "size": 32
    },
    "bt": {
        "count": 1,
        "size": 32
    },
    "bu": {
        "count": 1,
        "size": 32
    },
    "bubble": {
        "count": 3,
        "size": 248
    },
    "buf": {
        "count": 1,
        "size": 32
    },
    "buffer": {
        "count": 2,
        "size": 64
    },
    "buffer.js": {
        "count": 2,
        "size": 168
    },
    "bufferClone": {
        "count": 3,
        "size": 256
    },
    "bufferIndex": {
        "count": 3,
        "size": 256
    },
    "bufferProcessing": {
        "count": 1,
        "size": 40
    },
    "bufferSize": {
        "count": 1,
        "size": 40
    },
    "bufferUtil": {
        "count": 1,
        "size": 40
    },
    "bufferedAmount": {
        "count": 1,
        "size": 40
    },
    "bufferedRequest": {
        "count": 1,
        "size": 40
    },
    "buffering": {
        "count": 1,
        "size": 40
    },
    "buffers": {
        "count": 1,
        "size": 32
    },
    "buflen": {
        "count": 1,
        "size": 32
    },
    "bugs": {
        "count": 1,
        "size": 32
    },
    "bugs.email field must be a string email. Deleted.": {
        "count": 1,
        "size": 80
    },
    "bugs.url field must be a string url. Deleted.": {
        "count": 1,
        "size": 72
    },
    "bugsTypos": {
        "count": 3,
        "size": 256
    },
    "build": {
        "count": 1,
        "size": 32
    },
    "buildHostHeader": {
        "count": 3,
        "size": 256
    },
    "builtins": {
        "count": 1,
        "size": 32
    },
    "bus": {
        "count": 1,
        "size": 32
    },
    "bv": {
        "count": 1,
        "size": 32
    },
    "bw": {
        "count": 1,
        "size": 32
    },
    "bx": {
        "count": 1,
        "size": 32
    },
    "by": {
        "count": 1,
        "size": 32
    },
    "byline": {
        "count": 1,
        "size": 32
    },
    "byte length": {
        "count": 1,
        "size": 40
    },
    "byteLength": {
        "count": 3,
        "size": 256
    },
    "byteLengthUtf8": {
        "count": 3,
        "size": 256
    },
    "byteOffset": {
        "count": 1,
        "size": 40
    },
    "bytes": {
        "count": 1,
        "size": 32
    },
    "bytesParsed": {
        "count": 1,
        "size": 40
    },
    "bytesRead": {
        "count": 1,
        "size": 40
    },
    "bytesWritten": {
        "count": 1,
        "size": 40
    },
    "bz": {
        "count": 1,
        "size": 32
    },
    "c": {
        "count": 1,
        "size": 32
    },
    "ca": {
        "count": 1,
        "size": 32
    },
    "cache": {
        "count": 1,
        "size": 32
    },
    "cacheIndexOf": {
        "count": 3,
        "size": 256
    },
    "cacheKey": {
        "count": 1,
        "size": 32
    },
    "cachePush": {
        "count": 3,
        "size": 256
    },
    "cached": {
        "count": 1,
        "size": 32
    },
    "cachedModule": {
        "count": 1,
        "size": 40
    },
    "cachedOrNewService": {
        "count": 3,
        "size": 264
    },
    "caches": {
        "count": 1,
        "size": 32
    },
    "calendar": {
        "count": 1,
        "size": 32
    },
    "call": {
        "count": 3,
        "size": 248
    },
    "callback": {
        "count": 3,
        "size": 248
    },
    "callback required": {
        "count": 1,
        "size": 48
    },
    "callbackInterval": {
        "count": 1,
        "size": 40
    },
    "callbackOnlyMethods": {
        "count": 1,
        "size": 48
    },
    "callbacks": {
        "count": 1,
        "size": 40
    },
    "called": {
        "count": 1,
        "size": 32
    },
    "callee": {
        "count": 1,
        "size": 32
    },
    "caller": {
        "count": 1,
        "size": 32
    },
    "calling transform done when still transforming": {
        "count": 1,
        "size": 72
    },
    "calling transform done when ws.length != 0": {
        "count": 1,
        "size": 72
    },
    "calling_file": {
        "count": 1,
        "size": 40
    },
    "camelCase": {
        "count": 1,
        "size": 40
    },
    "canonicalizeLanguageTag": {
        "count": 3,
        "size": 264
    },
    "canonicalizeTimeZoneID": {
        "count": 3,
        "size": 264
    },
    "capabilities": {
        "count": 1,
        "size": 40
    },
    "capacity": {
        "count": 1,
        "size": 32
    },
    "capitalize": {
        "count": 3,
        "size": 256
    },
    "captureStackTrace": {
        "count": 3,
        "size": 264
    },
    "cares": {
        "count": 1,
        "size": 32
    },
    "cares_wrap": {
        "count": 1,
        "size": 40
    },
    "caretTrimReplace": {
        "count": 1,
        "size": 40
    },
    "cargo": {
        "count": 1,
        "size": 32
    },
    "catch": {
        "count": 3,
        "size": 248
    },
    "catcher": {
        "count": 1,
        "size": 32
    },
    "cb": {
        "count": 2,
        "size": 176
    },
    "cbrt": {
        "count": 3,
        "size": 248
    },
    "cd": {
        "count": 1,
        "size": 32
    },
    "ce": {
        "count": 1,
        "size": 32
    },
    "ceil": {
        "count": 3,
        "size": 248
    },
    "certCbDone": {
        "count": 5,
        "size": 472
    },
    "cflags": {
        "count": 1,
        "size": 32
    },
    "ch": {
        "count": 1,
        "size": 32
    },
    "chai": {
        "count": 1,
        "size": 32
    },
    "chain": {
        "count": 7,
        "size": 680
    },
    "chainName": {
        "count": 1,
        "size": 40
    },
    "change": {
        "count": 1,
        "size": 32
    },
    "channel": {
        "count": 1,
        "size": 32
    },
    "channel closed": {
        "count": 1,
        "size": 40
    },
    "channel data %s": {
        "count": 1,
        "size": 40
    },
    "channel error %s": {
        "count": 1,
        "size": 40
    },
    "channel server listening on %j": {
        "count": 1,
        "size": 56
    },
    "char": {
        "count": 1,
        "size": 32
    },
    "charAt": {
        "count": 3,
        "size": 248
    },
    "charBuffer": {
        "count": 1,
        "size": 40
    },
    "charCode": {
        "count": 3,
        "size": 248
    },
    "charCodeAt": {
        "count": 3,
        "size": 256
    },
    "charLength": {
        "count": 1,
        "size": 40
    },
    "charReceived": {
        "count": 1,
        "size": 40
    },
    "charSet": {
        "count": 2,
        "size": 176
    },
    "charStr": {
        "count": 1,
        "size": 32
    },
    "charsLeftIndex": {
        "count": 3,
        "size": 256
    },
    "charsLeftOver": {
        "count": 1,
        "size": 40
    },
    "charsRightIndex": {
        "count": 3,
        "size": 256
    },
    "chdir": {
        "count": 5,
        "size": 464
    },
    "check": {
        "count": 2,
        "size": 176
    },
    "checkBinReferences_": {
        "count": 3,
        "size": 264
    },
    "checkExecSyncError": {
        "count": 3,
        "size": 264
    },
    "checkFloat": {
        "count": 3,
        "size": 256
    },
    "checkInt": {
        "count": 3,
        "size": 248
    },
    "checkIteratee": {
        "count": 1,
        "size": 40
    },
    "checkOffset": {
        "count": 3,
        "size": 256
    },
    "checkOverflow": {
        "count": 3,
        "size": 256
    },
    "checkServerIdentity": {
        "count": 3,
        "size": 264
    },
    "checks": {
        "count": 1,
        "size": 32
    },
    "child": {
        "count": 1,
        "size": 32
    },
    "child %d attaching to parent": {
        "count": 1,
        "size": 56
    },
    "child_process": {
        "count": 2,
        "size": 80
    },
    "child_process.js": {
        "count": 1,
        "size": 128
    },
    "child_process: options.customFds option is deprecated. ": {
        "count": 1,
        "size": 80
    },
    "children": {
        "count": 1,
        "size": 32
    },
    "childrenIgnored": {
        "count": 3,
        "size": 256
    },
    "chmod": {
        "count": 3,
        "size": 248
    },
    "chmodSync": {
        "count": 1,
        "size": 40
    },
    "chooseLocale": {
        "count": 3,
        "size": 256
    },
    "chown": {
        "count": 3,
        "size": 248
    },
    "chownErOk": {
        "count": 5,
        "size": 472
    },
    "chownFix": {
        "count": 5,
        "size": 464
    },
    "chownFixSync": {
        "count": 5,
        "size": 472
    },
    "chownSync": {
        "count": 1,
        "size": 40
    },
    "chunk": {
        "count": 5,
        "size": 392
    },
    "chunkEncoding": {
        "count": 1,
        "size": 40
    },
    "chunkExpression": {
        "count": 1,
        "size": 40
    },
    "chunkInvalid": {
        "count": 3,
        "size": 256
    },
    "chunkOffset": {
        "count": 1,
        "size": 40
    },
    "chunks": {
        "count": 1,
        "size": 32
    },
    "ck": {
        "count": 1,
        "size": 32
    },
    "ckey": {
        "count": 1,
        "size": 32
    },
    "ckeys": {
        "count": 1,
        "size": 32
    },
    "class_end_position_symbol": {
        "count": 2,
        "size": 112
    },
    "class_script_symbol": {
        "count": 2,
        "size": 96
    },
    "class_start_position_symbol": {
        "count": 2,
        "size": 112
    },
    "clean": {
        "count": 3,
        "size": 248
    },
    "cleanString": {
        "count": 3,
        "size": 256
    },
    "clean_pct": {
        "count": 1,
        "size": 40
    },
    "cleanedUp": {
        "count": 1,
        "size": 40
    },
    "cleanup": {
        "count": 34,
        "size": 2624
    },
    "cleanupWebsocketResources": {
        "count": 3,
        "size": 272
    },
    "clear": {
        "count": 5,
        "size": 464
    },
    "clearBuffer": {
        "count": 3,
        "size": 256
    },
    "clearImmediate": {
        "count": 1,
        "size": 40
    },
    "clearIn": {
        "count": 3,
        "size": 248
    },
    "clearInterval": {
        "count": 1,
        "size": 40
    },
    "clearLine": {
        "count": 1,
        "size": 40
    },
    "clearOut": {
        "count": 3,
        "size": 248
    },
    "clearPending": {
        "count": 3,
        "size": 256
    },
    "clearScreenDown": {
        "count": 1,
        "size": 40
    },
    "clearTimeout": {
        "count": 1,
        "size": 40
    },
    "clear_metrics": {
        "count": 2,
        "size": 184
    },
    "cli": {
        "count": 3,
        "size": 248
    },
    "cliRepl": {
        "count": 1,
        "size": 32
    },
    "client": {
        "count": 1,
        "size": 32
    },
    "clientChannels": {
        "count": 1,
        "size": 40
    },
    "clientHandle": {
        "count": 1,
        "size": 40
    },
    "clone": {
        "count": 7,
        "size": 680
    },
    "cloneDeep": {
        "count": 3,
        "size": 256
    },
    "cloneWithOffset": {
        "count": 3,
        "size": 256
    },
    "cloneableTags": {
        "count": 1,
        "size": 40
    },
    "close": {
        "count": 39,
        "size": 4064
    },
    "close handle": {
        "count": 1,
        "size": 40
    },
    "closeExpression": {
        "count": 1,
        "size": 40
    },
    "closeProxy": {
        "count": 3,
        "size": 256
    },
    "closeSync": {
        "count": 3,
        "size": 256
    },
    "closeTimeout": {
        "count": 1,
        "size": 40
    },
    "cluster": {
        "count": 4,
        "size": 128
    },
    "cluster-control size: %j": {
        "count": 1,
        "size": 48
    },
    "cluster.fork": {
        "count": 1,
        "size": 40
    },
    "cluster.js": {
        "count": 2,
        "size": 168
    },
    "cluster:": {
        "count": 1,
        "size": 32
    },
    "clusterControl": {
        "count": 1,
        "size": 40
    },
    "clusterId": {
        "count": 1,
        "size": 40
    },
    "clusterSize": {
        "count": 3,
        "size": 256
    },
    "clusterStatus": {
        "count": 3,
        "size": 256
    },
    "cluster_size": {
        "count": 1,
        "size": 40
    },
    "clustered": {
        "count": 1,
        "size": 40
    },
    "clz32": {
        "count": 3,
        "size": 248
    },
    "cmd": {
        "count": 1,
        "size": 32
    },
    "cmp": {
        "count": 3,
        "size": 248
    },
    "code": {
        "count": 1,
        "size": 32
    },
    "codePointAt": {
        "count": 3,
        "size": 256
    },
    "codes": {
        "count": 1,
        "size": 32
    },
    "coerce": {
        "count": 3,
        "size": 248
    },
    "collator": {
        "count": 1,
        "size": 32
    },
    "collect": {
        "count": 1,
        "size": 32
    },
    "collection": {
        "count": 1,
        "size": 40
    },
    "color": {
        "count": 1,
        "size": 32
    },
    "colors": {
        "count": 1,
        "size": 32
    },
    "column": {
        "count": 1,
        "size": 32
    },
    "column_offset": {
        "count": 1,
        "size": 40
    },
    "columns": {
        "count": 1,
        "size": 32
    },
    "command": {
        "count": 1,
        "size": 32
    },
    "command.line": {
        "count": 1,
        "size": 40
    },
    "command.line.arguments": {
        "count": 1,
        "size": 48
    },
    "commandMethods": {
        "count": 1,
        "size": 40
    },
    "commit": {
        "count": 1,
        "size": 32
    },
    "common": {
        "count": 1,
        "size": 32
    },
    "common_cpu": {
        "count": 1,
        "size": 40
    },
    "common_env": {
        "count": 1,
        "size": 40
    },
    "common_memory": {
        "count": 1,
        "size": 40
    },
    "compact": {
        "count": 3,
        "size": 248
    },
    "comparator": {
        "count": 1,
        "size": 40
    },
    "comparatorTrimReplace": {
        "count": 1,
        "size": 48
    },
    "compare": {
        "count": 11,
        "size": 1112
    },
    "compareArrays": {
        "count": 3,
        "size": 256
    },
    "compareAscending": {
        "count": 3,
        "size": 256
    },
    "compareHistograms": {
        "count": 3,
        "size": 264
    },
    "compareIdentifiers": {
        "count": 3,
        "size": 264
    },
    "compareLoose": {
        "count": 3,
        "size": 256
    },
    "compareMain": {
        "count": 1,
        "size": 40
    },
    "compareMultiple": {
        "count": 3,
        "size": 256
    },
    "comparePre": {
        "count": 1,
        "size": 40
    },
    "comparer": {
        "count": 1,
        "size": 32
    },
    "compilation_type": {
        "count": 1,
        "size": 40
    },
    "compile": {
        "count": 3,
        "size": 248
    },
    "compiled": {
        "count": 1,
        "size": 32
    },
    "compiledWrapper": {
        "count": 1,
        "size": 40
    },
    "completed": {
        "count": 1,
        "size": 40
    },
    "compose": {
        "count": 1,
        "size": 32
    },
    "composeArgs": {
        "count": 3,
        "size": 256
    },
    "composeArgsRight": {
        "count": 3,
        "size": 256
    },
    "compress": {
        "count": 1,
        "size": 32
    },
    "computeMonthsParse": {
        "count": 3,
        "size": 264
    },
    "computeNewHighWaterMark": {
        "count": 3,
        "size": 264
    },
    "computeSecret": {
        "count": 7,
        "size": 688
    },
    "computeWeekdaysParse": {
        "count": 3,
        "size": 264
    },
    "concat": {
        "count": 5,
        "size": 464
    },
    "concat-map": {
        "count": 1,
        "size": 40
    },
    "concatBuffers": {
        "count": 1,
        "size": 40
    },
    "concatMap": {
        "count": 1,
        "size": 40
    },
    "concatSeries": {
        "count": 1,
        "size": 40
    },
    "conf": {
        "count": 1,
        "size": 32
    },
    "config": {
        "count": 1,
        "size": 32
    },
    "config required": {
        "count": 1,
        "size": 40
    },
    "config) should only be used for creating a new locale": {
        "count": 1,
        "size": 80
    },
    "configFile": {
        "count": 1,
        "size": 40
    },
    "configFromArray": {
        "count": 3,
        "size": 256
    },
    "configFromISO": {
        "count": 3,
        "size": 256
    },
    "configFromInput": {
        "count": 3,
        "size": 256
    },
    "configFromObject": {
        "count": 3,
        "size": 256
    },
    "configFromString": {
        "count": 3,
        "size": 256
    },
    "configFromStringAndArray": {
        "count": 3,
        "size": 264
    },
    "configFromStringAndFormat": {
        "count": 3,
        "size": 272
    },
    "configurable": {
        "count": 1,
        "size": 40
    },
    "configurable_": {
        "count": 1,
        "size": 40
    },
    "configure": {
        "count": 5,
        "size": 472
    },
    "conflictingName": {
        "count": 1,
        "size": 40
    },
    "connect": {
        "count": 9,
        "size": 896
    },
    "connect6": {
        "count": 3,
        "size": 248
    },
    "connectErrorNT": {
        "count": 3,
        "size": 256
    },
    "connected": {
        "count": 1,
        "size": 40
    },
    "connection": {
        "count": 1,
        "size": 40
    },
    "connectionCorkNT": {
        "count": 3,
        "size": 256
    },
    "connectionExpression": {
        "count": 1,
        "size": 48
    },
    "connectionListener": {
        "count": 3,
        "size": 264
    },
    "connections": {
        "count": 1,
        "size": 40
    },
    "console": {
        "count": 1,
        "size": 32
    },
    "console.js": {
        "count": 2,
        "size": 168
    },
    "constant": {
        "count": 3,
        "size": 248
    },
    "constants": {
        "count": 1,
        "size": 40
    },
    "constants.js": {
        "count": 1,
        "size": 40
    },
    "consume": {
        "count": 3,
        "size": 248
    },
    "contains": {
        "count": 1,
        "size": 32
    },
    "content": {
        "count": 1,
        "size": 32
    },
    "content-length": {
        "count": 1,
        "size": 40
    },
    "contentLengthExpression": {
        "count": 1,
        "size": 48
    },
    "context": {
        "count": 1,
        "size": 32
    },
    "contextProps": {
        "count": 1,
        "size": 40
    },
    "context_data": {
        "count": 1,
        "size": 40
    },
    "context_extension": {
        "count": 1,
        "size": 48
    },
    "contextify": {
        "count": 1,
        "size": 40
    },
    "continueExpression": {
        "count": 1,
        "size": 48
    },
    "contributers": {
        "count": 1,
        "size": 40
    },
    "contributors": {
        "count": 1,
        "size": 40
    },
    "control": {
        "count": 1,
        "size": 32
    },
    "convertLine": {
        "count": 3,
        "size": 256
    },
    "convertNPNProtocols": {
        "count": 3,
        "size": 264
    },
    "convertToArray": {
        "count": 3,
        "size": 256
    },
    "copy": {
        "count": 5,
        "size": 464
    },
    "copyConfig": {
        "count": 3,
        "size": 256
    },
    "copyWithin": {
        "count": 5,
        "size": 472
    },
    "coreModuleNames": {
        "count": 1,
        "size": 40
    },
    "cork": {
        "count": 1,
        "size": 32
    },
    "corked": {
        "count": 1,
        "size": 32
    },
    "cos": {
        "count": 3,
        "size": 248
    },
    "cosh": {
        "count": 3,
        "size": 248
    },
    "countBy": {
        "count": 1,
        "size": 32
    },
    "count_": {
        "count": 1,
        "size": 32
    },
    "count_ps": {
        "count": 1,
        "size": 32
    },
    "counter_key": {
        "count": 1,
        "size": 40
    },
    "counter_rates": {
        "count": 1,
        "size": 40
    },
    "counters": {
        "count": 1,
        "size": 32
    },
    "cp": {
        "count": 1,
        "size": 32
    },
    "cpu": {
        "count": 2,
        "size": 104
    },
    "cpu-profile": {
        "count": 1,
        "size": 40
    },
    "cpu-profiling": {
        "count": 1,
        "size": 40
    },
    "cpu:profile-data": {
        "count": 1,
        "size": 40
    },
    "cpuMetrics": {
        "count": 1,
        "size": 40
    },
    "cpuProfileWatcher": {
        "count": 1,
        "size": 48
    },
    "cpuprofile": {
        "count": 1,
        "size": 40
    },
    "cpus": {
        "count": 1,
        "size": 32
    },
    "cpu|on": {
        "count": 2,
        "size": 104
    },
    "cpy": {
        "count": 1,
        "size": 32
    },
    "create": {
        "count": 11,
        "size": 1112
    },
    "createAdder": {
        "count": 3,
        "size": 256
    },
    "createAggregator": {
        "count": 3,
        "size": 256
    },
    "createAssigner": {
        "count": 3,
        "size": 256
    },
    "createBaseEach": {
        "count": 3,
        "size": 256
    },
    "createBaseFor": {
        "count": 3,
        "size": 256
    },
    "createBindWrapper": {
        "count": 3,
        "size": 264
    },
    "createCache": {
        "count": 3,
        "size": 256
    },
    "createCallback": {
        "count": 1,
        "size": 40
    },
    "createCipher": {
        "count": 1,
        "size": 40
    },
    "createCipheriv": {
        "count": 1,
        "size": 40
    },
    "createClient": {
        "count": 1,
        "size": 40
    },
    "createCompounder": {
        "count": 3,
        "size": 256
    },
    "createConnection": {
        "count": 3,
        "size": 256
    },
    "createContext": {
        "count": 1,
        "size": 40
    },
    "createCpuListener": {
        "count": 3,
        "size": 264
    },
    "createCredentials": {
        "count": 1,
        "size": 48
    },
    "createCtorWrapper": {
        "count": 3,
        "size": 264
    },
    "createCurry": {
        "count": 3,
        "size": 256
    },
    "createDate": {
        "count": 3,
        "size": 256
    },
    "createDecipher": {
        "count": 1,
        "size": 40
    },
    "createDecipheriv": {
        "count": 1,
        "size": 40
    },
    "createDefaults": {
        "count": 3,
        "size": 256
    },
    "createDeflate": {
        "count": 1,
        "size": 40
    },
    "createDeflateRaw": {
        "count": 1,
        "size": 40
    },
    "createDiffieHellman": {
        "count": 1,
        "size": 48
    },
    "createDiffieHellmanGroup": {
        "count": 1,
        "size": 48
    },
    "createDomain": {
        "count": 1,
        "size": 40
    },
    "createECDH": {
        "count": 3,
        "size": 256
    },
    "createEventLoopListener": {
        "count": 3,
        "size": 264
    },
    "createExtremum": {
        "count": 3,
        "size": 256
    },
    "createFind": {
        "count": 3,
        "size": 256
    },
    "createFindIndex": {
        "count": 3,
        "size": 256
    },
    "createFindKey": {
        "count": 3,
        "size": 256
    },
    "createFlow": {
        "count": 3,
        "size": 256
    },
    "createForEach": {
        "count": 3,
        "size": 256
    },
    "createForIn": {
        "count": 3,
        "size": 256
    },
    "createForOwn": {
        "count": 3,
        "size": 256
    },
    "createFromArrayBuffer": {
        "count": 3,
        "size": 264
    },
    "createFromConfig": {
        "count": 3,
        "size": 256
    },
    "createFromInputFallback": {
        "count": 1,
        "size": 48
    },
    "createFromString": {
        "count": 3,
        "size": 256
    },
    "createGCListener": {
        "count": 3,
        "size": 256
    },
    "createGunzip": {
        "count": 1,
        "size": 40
    },
    "createGzip": {
        "count": 1,
        "size": 40
    },
    "createHTTPListener": {
        "count": 3,
        "size": 264
    },
    "createHandle": {
        "count": 3,
        "size": 256
    },
    "createHangUpError": {
        "count": 3,
        "size": 264
    },
    "createHash": {
        "count": 1,
        "size": 40
    },
    "createHeapListener": {
        "count": 3,
        "size": 264
    },
    "createHmac": {
        "count": 1,
        "size": 40
    },
    "createHybridWrapper": {
        "count": 3,
        "size": 264
    },
    "createInflate": {
        "count": 1,
        "size": 40
    },
    "createInflateRaw": {
        "count": 1,
        "size": 40
    },
    "createInternalRepl": {
        "count": 1,
        "size": 48
    },
    "createLineStream": {
        "count": 3,
        "size": 256
    },
    "createLocalOrUTC": {
        "count": 3,
        "size": 256
    },
    "createMessageListener": {
        "count": 3,
        "size": 264
    },
    "createObjectMapper": {
        "count": 3,
        "size": 264
    },
    "createPadDir": {
        "count": 3,
        "size": 256
    },
    "createPadding": {
        "count": 3,
        "size": 256
    },
    "createPartial": {
        "count": 3,
        "size": 256
    },
    "createPartialWrapper": {
        "count": 3,
        "size": 264
    },
    "createPool": {
        "count": 3,
        "size": 256
    },
    "createProbeListener": {
        "count": 3,
        "size": 264
    },
    "createPubQueue": {
        "count": 1,
        "size": 40
    },
    "createPullQueue": {
        "count": 1,
        "size": 40
    },
    "createPushQueue": {
        "count": 1,
        "size": 40
    },
    "createReadStream": {
        "count": 3,
        "size": 256
    },
    "createReduce": {
        "count": 3,
        "size": 256
    },
    "createRound": {
        "count": 3,
        "size": 256
    },
    "createScript": {
        "count": 1,
        "size": 40
    },
    "createSecureContext": {
        "count": 3,
        "size": 264
    },
    "createSecurePair": {
        "count": 1,
        "size": 40
    },
    "createServer": {
        "count": 7,
        "size": 688
    },
    "createServerHandle": {
        "count": 1,
        "size": 48
    },
    "createSign": {
        "count": 1,
        "size": 40
    },
    "createSocket": {
        "count": 3,
        "size": 256
    },
    "createSortedIndex": {
        "count": 3,
        "size": 264
    },
    "createStream": {
        "count": 1,
        "size": 40
    },
    "createSubQueue": {
        "count": 1,
        "size": 40
    },
    "createUTCDate": {
        "count": 3,
        "size": 256
    },
    "createUnzip": {
        "count": 1,
        "size": 40
    },
    "createVerify": {
        "count": 1,
        "size": 40
    },
    "createWorkerProcess": {
        "count": 3,
        "size": 264
    },
    "createWrapper": {
        "count": 3,
        "size": 256
    },
    "createWritableStdioStream": {
        "count": 4,
        "size": 416
    },
    "createWriteReq": {
        "count": 3,
        "size": 256
    },
    "createWriteStream": {
        "count": 3,
        "size": 264
    },
    "create__createDuration": {
        "count": 3,
        "size": 264
    },
    "create_utc__createUTC": {
        "count": 3,
        "size": 264
    },
    "creationData": {
        "count": 3,
        "size": 256
    },
    "criteria": {
        "count": 1,
        "size": 32
    },
    "crlf_buf": {
        "count": 1,
        "size": 32
    },
    "crypto": {
        "count": 2,
        "size": 64
    },
    "crypto.Credentials is deprecated. ": {
        "count": 1,
        "size": 64
    },
    "crypto.createCredentials is deprecated. ": {
        "count": 1,
        "size": 64
    },
    "crypto.js": {
        "count": 2,
        "size": 168
    },
    "ctim_msec": {
        "count": 1,
        "size": 40
    },
    "ctime": {
        "count": 1,
        "size": 32
    },
    "ctlChannel": {
        "count": 1,
        "size": 40
    },
    "ctor": {
        "count": 1,
        "size": 32
    },
    "ctx": {
        "count": 1,
        "size": 32
    },
    "cumulSumSquaresValues": {
        "count": 1,
        "size": 48
    },
    "cumulativeValues": {
        "count": 1,
        "size": 40
    },
    "cur": {
        "count": 1,
        "size": 32
    },
    "curr": {
        "count": 1,
        "size": 32
    },
    "current": {
        "count": 3,
        "size": 248
    },
    "currentDateArray": {
        "count": 3,
        "size": 256
    },
    "currentSize": {
        "count": 1,
        "size": 40
    },
    "current_timer_data": {
        "count": 1,
        "size": 48
    },
    "curry": {
        "count": 1,
        "size": 32
    },
    "curryFunc": {
        "count": 4,
        "size": 328
    },
    "curryRight": {
        "count": 1,
        "size": 40
    },
    "cursorTo": {
        "count": 1,
        "size": 32
    },
    "customFds": {
        "count": 1,
        "size": 40
    },
    "customInspect": {
        "count": 1,
        "size": 40
    },
    "customizer": {
        "count": 1,
        "size": 40
    },
    "cwd": {
        "count": 3,
        "size": 248
    },
    "cyan": {
        "count": 1,
        "size": 32
    },
    "d": {
        "count": 1,
        "size": 32
    },
    "d48d5d5ed96c480b511333a22bc96638416d5fe6": {
        "count": 1,
        "size": 64
    },
    "damp": {
        "count": 1,
        "size": 32
    },
    "data": {
        "count": 1,
        "size": 32
    },
    "date": {
        "count": 1,
        "size": 32
    },
    "dateCache": {
        "count": 1,
        "size": 40
    },
    "dateExpression": {
        "count": 1,
        "size": 40
    },
    "dateTag": {
        "count": 1,
        "size": 32
    },
    "dateformat": {
        "count": 1,
        "size": 40
    },
    "dateformatall": {
        "count": 1,
        "size": 40
    },
    "dateformatdate": {
        "count": 1,
        "size": 40
    },
    "dateformattime": {
        "count": 1,
        "size": 40
    },
    "dates": {
        "count": 1,
        "size": 32
    },
    "dates accessor is deprecated. Use date instead.": {
        "count": 1,
        "size": 72
    },
    "day": {
        "count": 1,
        "size": 32
    },
    "dayOfYear": {
        "count": 1,
        "size": 40
    },
    "dayOfYearFromWeekInfo": {
        "count": 3,
        "size": 264
    },
    "dayOfYearFromWeeks": {
        "count": 3,
        "size": 264
    },
    "day_of_week__handleStrictParse": {
        "count": 3,
        "size": 272
    },
    "dayofyear": {
        "count": 1,
        "size": 40
    },
    "dayofyears": {
        "count": 1,
        "size": 40
    },
    "days": {
        "count": 1,
        "size": 32
    },
    "daysInMonth": {
        "count": 3,
        "size": 256
    },
    "daysInYear": {
        "count": 3,
        "size": 256
    },
    "daysToMonths": {
        "count": 3,
        "size": 256
    },
    "dbg": {
        "count": 1,
        "size": 32
    },
    "dbg-start": {
        "count": 1,
        "size": 40
    },
    "dbg-status": {
        "count": 1,
        "size": 40
    },
    "dbg-stop": {
        "count": 1,
        "size": 32
    },
    "dd": {
        "count": 1,
        "size": 32
    },
    "ddd": {
        "count": 1,
        "size": 32
    },
    "dddd": {
        "count": 1,
        "size": 32
    },
    "dddd [at] LT": {
        "count": 1,
        "size": 40
    },
    "dddd, MMMM D, YYYY h:mm A": {
        "count": 1,
        "size": 56
    },
    "debounce": {
        "count": 3,
        "size": 248
    },
    "debug": {
        "count": 3,
        "size": 248
    },
    "debug:": {
        "count": 1,
        "size": 32
    },
    "debugColors": {
        "count": 1,
        "size": 40
    },
    "debugEnviron": {
        "count": 1,
        "size": 40
    },
    "debugPort": {
        "count": 1,
        "size": 40
    },
    "debugPortOffset": {
        "count": 1,
        "size": 40
    },
    "debugTimeout": {
        "count": 1,
        "size": 40
    },
    "debugger": {
        "count": 1,
        "size": 32
    },
    "debuggerStatus": {
        "count": 3,
        "size": 256
    },
    "debuggerVersion": {
        "count": 1,
        "size": 40
    },
    "debuglog": {
        "count": 1,
        "size": 32
    },
    "debuglog.js": {
        "count": 1,
        "size": 40
    },
    "debuglogEnabled": {
        "count": 1,
        "size": 40
    },
    "debugs": {
        "count": 1,
        "size": 32
    },
    "deburr": {
        "count": 3,
        "size": 248
    },
    "deburrLetter": {
        "count": 3,
        "size": 256
    },
    "deburredLetters": {
        "count": 1,
        "size": 40
    },
    "decode": {
        "count": 3,
        "size": 248
    },
    "decodeChunk": {
        "count": 3,
        "size": 256
    },
    "decodeStr": {
        "count": 3,
        "size": 256
    },
    "decodeStrings": {
        "count": 1,
        "size": 40
    },
    "decodeURI": {
        "count": 3,
        "size": 256
    },
    "decodeURIComponent": {
        "count": 3,
        "size": 264
    },
    "decoder": {
        "count": 1,
        "size": 32
    },
    "decompress": {
        "count": 1,
        "size": 40
    },
    "deepEqual": {
        "count": 3,
        "size": 256
    },
    "deepStrictEqual": {
        "count": 3,
        "size": 256
    },
    "def": {
        "count": 1,
        "size": 32
    },
    "default": {
        "count": 1,
        "size": 32
    },
    "defaultCalendar": {
        "count": 1,
        "size": 40
    },
    "defaultCipherList": {
        "count": 1,
        "size": 48
    },
    "defaultCoreCipherList": {
        "count": 1,
        "size": 48
    },
    "defaultEncoding": {
        "count": 1,
        "size": 40
    },
    "defaultFormat": {
        "count": 1,
        "size": 40
    },
    "defaultFormatUtc": {
        "count": 1,
        "size": 40
    },
    "defaultHwm": {
        "count": 1,
        "size": 40
    },
    "defaultInvalidDate": {
        "count": 1,
        "size": 48
    },
    "defaultLocaleMeridiemParse": {
        "count": 1,
        "size": 56
    },
    "defaultLocaleMonths": {
        "count": 1,
        "size": 48
    },
    "defaultLocaleMonthsShort": {
        "count": 1,
        "size": 48
    },
    "defaultLocaleWeek": {
        "count": 1,
        "size": 48
    },
    "defaultLocaleWeekdays": {
        "count": 1,
        "size": 48
    },
    "defaultLocaleWeekdaysMin": {
        "count": 1,
        "size": 48
    },
    "defaultLocaleWeekdaysShort": {
        "count": 1,
        "size": 56
    },
    "defaultLongDateFormat": {
        "count": 1,
        "size": 48
    },
    "defaultMaxListeners": {
        "count": 1,
        "size": 48
    },
    "defaultMaxSockets": {
        "count": 1,
        "size": 48
    },
    "defaultMonthsRegex": {
        "count": 1,
        "size": 48
    },
    "defaultMonthsShortRegex": {
        "count": 1,
        "size": 48
    },
    "defaultOrdinal": {
        "count": 1,
        "size": 40
    },
    "defaultOrdinalParse": {
        "count": 1,
        "size": 48
    },
    "defaultPadding": {
        "count": 1,
        "size": 40
    },
    "defaultParsingFlags": {
        "count": 3,
        "size": 264
    },
    "defaultPort": {
        "count": 1,
        "size": 40
    },
    "defaultRelativeTime": {
        "count": 1,
        "size": 48
    },
    "defaultWeekdaysMinRegex": {
        "count": 1,
        "size": 48
    },
    "defaultWeekdaysRegex": {
        "count": 1,
        "size": 48
    },
    "defaultWeekdaysShortRegex": {
        "count": 1,
        "size": 56
    },
    "default_configuration": {
        "count": 1,
        "size": 48
    },
    "defaults": {
        "count": 3,
        "size": 248
    },
    "defaultsDeep": {
        "count": 1,
        "size": 40
    },
    "defer": {
        "count": 3,
        "size": 248
    },
    "define": {
        "count": 1,
        "size": 32
    },
    "defineLocale": {
        "count": 3,
        "size": 256
    },
    "defineLocaleOverride": {
        "count": 1,
        "size": 48
    },
    "defineProperties": {
        "count": 3,
        "size": 256
    },
    "defineProperty": {
        "count": 3,
        "size": 256
    },
    "defineWECProperty": {
        "count": 3,
        "size": 264
    },
    "defineWEProperty": {
        "count": 3,
        "size": 256
    },
    "defines": {
        "count": 1,
        "size": 32
    },
    "deflate": {
        "count": 1,
        "size": 32
    },
    "deflateRaw": {
        "count": 1,
        "size": 40
    },
    "deflateRawSync": {
        "count": 1,
        "size": 40
    },
    "deflateSync": {
        "count": 1,
        "size": 40
    },
    "delay": {
        "count": 1,
        "size": 32
    },
    "delay worker start by %s": {
        "count": 1,
        "size": 48
    },
    "delete": {
        "count": 9,
        "size": 896
    },
    "deleteAllBut": {
        "count": 3,
        "size": 256
    },
    "deleteCounters": {
        "count": 1,
        "size": 40
    },
    "deleteGauges": {
        "count": 1,
        "size": 40
    },
    "deleteIdleStats": {
        "count": 1,
        "size": 40
    },
    "deleteIndex": {
        "count": 1,
        "size": 40
    },
    "deleteSets": {
        "count": 1,
        "size": 40
    },
    "deleteTimers": {
        "count": 1,
        "size": 40
    },
    "deleteValue": {
        "count": 1,
        "size": 40
    },
    "delimiter": {
        "count": 1,
        "size": 40
    },
    "delims": {
        "count": 1,
        "size": 32
    },
    "deliverChangeRecords": {
        "count": 3,
        "size": 264
    },
    "delta": {
        "count": 1,
        "size": 32
    },
    "depObjectify": {
        "count": 3,
        "size": 256
    },
    "depTypes": {
        "count": 1,
        "size": 32
    },
    "depdenencies": {
        "count": 1,
        "size": 40
    },
    "dependancies": {
        "count": 1,
        "size": 40
    },
    "dependecies": {
        "count": 1,
        "size": 40
    },
    "dependencies": {
        "count": 5,
        "size": 200
    },
    "depends": {
        "count": 1,
        "size": 32
    },
    "deprecate": {
        "count": 3,
        "size": 256
    },
    "deprecateSimple": {
        "count": 3,
        "size": 256
    },
    "deprecated": {
        "count": 26,
        "size": 1912
    },
    "deprecated. Use write(string[, offset[, length]]": {
        "count": 1,
        "size": 72
    },
    "deprecatedArrayDependencies": {
        "count": 1,
        "size": 56
    },
    "deprecatedModules": {
        "count": 1,
        "size": 48
    },
    "deprecationHandler": {
        "count": 1,
        "size": 48
    },
    "deprecationWarned": {
        "count": 1,
        "size": 48
    },
    "deprecationWarning": {
        "count": 3,
        "size": 264
    },
    "deprecations": {
        "count": 1,
        "size": 40
    },
    "depth": {
        "count": 1,
        "size": 32
    },
    "dequeue": {
        "count": 3,
        "size": 248
    },
    "desc": {
        "count": 1,
        "size": 32
    },
    "description": {
        "count": 1,
        "size": 40
    },
    "descriptor": {
        "count": 1,
        "size": 40
    },
    "deserialize": {
        "count": 1,
        "size": 40
    },
    "dest": {
        "count": 1,
        "size": 32
    },
    "destroy": {
        "count": 3,
        "size": 248
    },
    "destroyNT": {
        "count": 3,
        "size": 256
    },
    "destroySSL": {
        "count": 5,
        "size": 472
    },
    "destroySoon": {
        "count": 1,
        "size": 40
    },
    "destroyed": {
        "count": 1,
        "size": 40
    },
    "dests": {
        "count": 1,
        "size": 32
    },
    "detach": {
        "count": 3,
        "size": 248
    },
    "detachSocket": {
        "count": 1,
        "size": 40
    },
    "detached": {
        "count": 1,
        "size": 32
    },
    "detailed_stack_trace_symbol": {
        "count": 2,
        "size": 112
    },
    "details": {
        "count": 1,
        "size": 32
    },
    "detect": {
        "count": 1,
        "size": 32
    },
    "detectIncompleteChar": {
        "count": 1,
        "size": 48
    },
    "detectLimit": {
        "count": 1,
        "size": 40
    },
    "detectSeries": {
        "count": 1,
        "size": 40
    },
    "dev": {
        "count": 1,
        "size": 32
    },
    "dev-dependencies": {
        "count": 1,
        "size": 40
    },
    "devDependences": {
        "count": 1,
        "size": 40
    },
    "devDependencies": {
        "count": 6,
        "size": 240
    },
    "devDepenencies": {
        "count": 1,
        "size": 40
    },
    "devEependencies": {
        "count": 1,
        "size": 40
    },
    "devdependencies": {
        "count": 1,
        "size": 40
    },
    "dezalgo": {
        "count": 3,
        "size": 248
    },
    "dezalgo.js": {
        "count": 1,
        "size": 40
    },
    "dgram": {
        "count": 2,
        "size": 64
    },
    "dgram.Native": {
        "count": 1,
        "size": 40
    },
    "dgram.Socket": {
        "count": 1,
        "size": 40
    },
    "dgram.js": {
        "count": 2,
        "size": 160
    },
    "dhComputeSecret": {
        "count": 3,
        "size": 256
    },
    "dhGenerateKeys": {
        "count": 3,
        "size": 256
    },
    "dhGetGenerator": {
        "count": 3,
        "size": 256
    },
    "dhGetPrime": {
        "count": 3,
        "size": 256
    },
    "dhGetPrivateKey": {
        "count": 3,
        "size": 256
    },
    "dhGetPublicKey": {
        "count": 3,
        "size": 256
    },
    "didOnEnd": {
        "count": 1,
        "size": 32
    },
    "die": {
        "count": 2,
        "size": 176
    },
    "diff": {
        "count": 5,
        "size": 464
    },
    "difference": {
        "count": 1,
        "size": 40
    },
    "digest": {
        "count": 5,
        "size": 464
    },
    "digitToBasic": {
        "count": 3,
        "size": 256
    },
    "dir": {
        "count": 1,
        "size": 32
    },
    "dirPath": {
        "count": 1,
        "size": 32
    },
    "direction": {
        "count": 1,
        "size": 40
    },
    "directories": {
        "count": 1,
        "size": 40
    },
    "directory": {
        "count": 1,
        "size": 40
    },
    "directory. This functionality is deprecated and will be removed ": {
        "count": 1,
        "size": 88
    },
    "dirname": {
        "count": 1,
        "size": 32
    },
    "dirty-chai": {
        "count": 1,
        "size": 40
    },
    "disable": {
        "count": 3,
        "size": 248
    },
    "disableRequests": {
        "count": 1,
        "size": 40
    },
    "disabled": {
        "count": 2,
        "size": 176
    },
    "disabledRequest": {
        "count": 1,
        "size": 40
    },
    "disconnect": {
        "count": 1,
        "size": 40
    },
    "discouraged and will be removed in upcoming major ": {
        "count": 1,
        "size": 80
    },
    "displayErrors": {
        "count": 1,
        "size": 40
    },
    "dispose": {
        "count": 1,
        "size": 32
    },
    "distribute": {
        "count": 1,
        "size": 40
    },
    "dlopen": {
        "count": 3,
        "size": 248
    },
    "dns": {
        "count": 2,
        "size": 64
    },
    "dns.js": {
        "count": 2,
        "size": 160
    },
    "do": {
        "count": 1,
        "size": 32
    },
    "do read": {
        "count": 1,
        "size": 32
    },
    "doAfterWrite": {
        "count": 3,
        "size": 256
    },
    "doAlloc": {
        "count": 3,
        "size": 248
    },
    "doClose": {
        "count": 3,
        "size": 248
    },
    "doDuring": {
        "count": 1,
        "size": 32
    },
    "doEnd": {
        "count": 1,
        "size": 32
    },
    "doError": {
        "count": 1,
        "size": 32
    },
    "doNTCallback0": {
        "count": 3,
        "size": 256
    },
    "doNTCallback1": {
        "count": 3,
        "size": 256
    },
    "doNTCallback2": {
        "count": 3,
        "size": 256
    },
    "doNTCallback3": {
        "count": 3,
        "size": 256
    },
    "doNTCallbackMany": {
        "count": 3,
        "size": 256
    },
    "doParallel": {
        "count": 3,
        "size": 256
    },
    "doParallelLimit": {
        "count": 3,
        "size": 256
    },
    "doRead": {
        "count": 3,
        "size": 248
    },
    "doSeries": {
        "count": 3,
        "size": 248
    },
    "doShutdown": {
        "count": 3,
        "size": 256
    },
    "doUntil": {
        "count": 1,
        "size": 32
    },
    "doWhilst": {
        "count": 1,
        "size": 32
    },
    "doWrite": {
        "count": 5,
        "size": 464
    },
    "doesNotThrow": {
        "count": 1,
        "size": 40
    },
    "domain": {
        "count": 2,
        "size": 64
    },
    "domain.js": {
        "count": 2,
        "size": 168
    },
    "domainEmitter": {
        "count": 1,
        "size": 40
    },
    "domainThrown": {
        "count": 1,
        "size": 40
    },
    "done": {
        "count": 5,
        "size": 536
    },
    "dotenv": {
        "count": 1,
        "size": 32
    },
    "dow": {
        "count": 1,
        "size": 32
    },
    "doy": {
        "count": 1,
        "size": 32
    },
    "drain": {
        "count": 22,
        "size": 1616
    },
    "drop": {
        "count": 3,
        "size": 248
    },
    "dropMembership": {
        "count": 3,
        "size": 256
    },
    "dropName": {
        "count": 1,
        "size": 32
    },
    "dropRight": {
        "count": 4,
        "size": 296
    },
    "dropRightWhile": {
        "count": 3,
        "size": 256
    },
    "dropWhile": {
        "count": 3,
        "size": 256
    },
    "dst": {
        "count": 1,
        "size": 32
    },
    "dst %s notify %s": {
        "count": 1,
        "size": 40
    },
    "dst %s request %s": {
        "count": 1,
        "size": 48
    },
    "dummy": {
        "count": 1,
        "size": 32
    },
    "dumpHeap": {
        "count": 3,
        "size": 248
    },
    "dumpMessages": {
        "count": 1,
        "size": 40
    },
    "duplex": {
        "count": 3,
        "size": 248
    },
    "duplexer": {
        "count": 1,
        "size": 32
    },
    "duration": {
        "count": 1,
        "size": 32
    },
    "duration_abs__abs": {
        "count": 3,
        "size": 264
    },
    "duration_add_subtract__add": {
        "count": 3,
        "size": 272
    },
    "duration_add_subtract__addSubtract": {
        "count": 3,
        "size": 280
    },
    "duration_add_subtract__subtract": {
        "count": 3,
        "size": 272
    },
    "duration_as__valueOf": {
        "count": 3,
        "size": 264
    },
    "duration_get__get": {
        "count": 3,
        "size": 264
    },
    "duration_humanize__getSetRelativeTimeThreshold": {
        "count": 3,
        "size": 288
    },
    "duration_humanize__relativeTime": {
        "count": 3,
        "size": 272
    },
    "duration_prototype__proto": {
        "count": 1,
        "size": 56
    },
    "during": {
        "count": 1,
        "size": 32
    },
    "dyninst": {
        "count": 1,
        "size": 32
    },
    "dz": {
        "count": 1,
        "size": 32
    },
    "e": {
        "count": 1,
        "size": 32
    },
    "each": {
        "count": 2,
        "size": 176
    },
    "eachFunc": {
        "count": 1,
        "size": 32
    },
    "eachLimit": {
        "count": 1,
        "size": 40
    },
    "eachOf": {
        "count": 1,
        "size": 32
    },
    "eachOfLimit": {
        "count": 1,
        "size": 40
    },
    "eachOfSeries": {
        "count": 1,
        "size": 40
    },
    "eachRight": {
        "count": 1,
        "size": 40
    },
    "eachSeries": {
        "count": 1,
        "size": 40
    },
    "eachfn": {
        "count": 1,
        "size": 32
    },
    "ee": {
        "count": 1,
        "size": 32
    },
    "elem": {
        "count": 1,
        "size": 32
    },
    "elements_transition_symbol": {
        "count": 2,
        "size": 112
    },
    "email": {
        "count": 1,
        "size": 32
    },
    "embrace": {
        "count": 3,
        "size": 248
    },
    "emit": {
        "count": 8,
        "size": 752
    },
    "emit %j: %s": {
        "count": 1,
        "size": 40
    },
    "emit close": {
        "count": 1,
        "size": 40
    },
    "emit readable": {
        "count": 1,
        "size": 40
    },
    "emitAbortNT": {
        "count": 3,
        "size": 256
    },
    "emitCloseNT": {
        "count": 5,
        "size": 472
    },
    "emitEOF": {
        "count": 3,
        "size": 248
    },
    "emitErrorNT": {
        "count": 3,
        "size": 256
    },
    "emitFlush": {
        "count": 2,
        "size": 184
    },
    "emitForkNT": {
        "count": 3,
        "size": 256
    },
    "emitFreeNT": {
        "count": 3,
        "size": 256
    },
    "emitListeningNT": {
        "count": 3,
        "size": 256
    },
    "emitMany": {
        "count": 3,
        "size": 248
    },
    "emitNone": {
        "count": 3,
        "size": 248
    },
    "emitOne": {
        "count": 3,
        "size": 248
    },
    "emitPendingUnhandledRejections": {
        "count": 3,
        "size": 272
    },
    "emitReadable": {
        "count": 3,
        "size": 256
    },
    "emitReadable_": {
        "count": 3,
        "size": 256
    },
    "emitThree": {
        "count": 3,
        "size": 256
    },
    "emitTwo": {
        "count": 3,
        "size": 248
    },
    "emittedReadable": {
        "count": 1,
        "size": 40
    },
    "emitter": {
        "count": 1,
        "size": 32
    },
    "empty": {
        "count": 1,
        "size": 32
    },
    "emptyNormalizedBugs": {
        "count": 1,
        "size": 48
    },
    "en": {
        "count": 1,
        "size": 32
    },
    "en,root": {
        "count": 1,
        "size": 32
    },
    "en_CA.UTF-8": {
        "count": 1,
        "size": 40
    },
    "en_CA:en": {
        "count": 1,
        "size": 32
    },
    "enable": {
        "count": 3,
        "size": 248
    },
    "enableCertCb": {
        "count": 3,
        "size": 256
    },
    "enableRequests": {
        "count": 1,
        "size": 40
    },
    "enableSessionCallbacks": {
        "count": 3,
        "size": 264
    },
    "enableTicketKeyCallback": {
        "count": 3,
        "size": 264
    },
    "enableTracing": {
        "count": 1,
        "size": 40
    },
    "enabled": {
        "count": 23,
        "size": 1760
    },
    "enc": {
        "count": 1,
        "size": 32
    },
    "encIn": {
        "count": 3,
        "size": 248
    },
    "encOut": {
        "count": 3,
        "size": 248
    },
    "encPending": {
        "count": 3,
        "size": 256
    },
    "encode": {
        "count": 5,
        "size": 464
    },
    "encodeURI": {
        "count": 3,
        "size": 256
    },
    "encodeURIComponent": {
        "count": 3,
        "size": 264
    },
    "encoded": {
        "count": 1,
        "size": 32
    },
    "encoding": {
        "count": 1,
        "size": 32
    },
    "end": {
        "count": 1,
        "size": 32
    },
    "endEmitted": {
        "count": 1,
        "size": 40
    },
    "endFn": {
        "count": 1,
        "size": 32
    },
    "endOf": {
        "count": 3,
        "size": 248
    },
    "endPacket": {
        "count": 1,
        "size": 40
    },
    "endParser": {
        "count": 5,
        "size": 472
    },
    "endReadable": {
        "count": 3,
        "size": 256
    },
    "endReadable called on non-empty stream": {
        "count": 1,
        "size": 64
    },
    "endReadableNT": {
        "count": 3,
        "size": 256
    },
    "endWritable": {
        "count": 3,
        "size": 256
    },
    "ended": {
        "count": 1,
        "size": 32
    },
    "endianness": {
        "count": 1,
        "size": 40
    },
    "ending": {
        "count": 1,
        "size": 32
    },
    "endpoint": {
        "count": 1,
        "size": 32
    },
    "endpoints": {
        "count": 1,
        "size": 40
    },
    "endsWith": {
        "count": 5,
        "size": 464
    },
    "engine": {
        "count": 1,
        "size": 32
    },
    "engines": {
        "count": 1,
        "size": 32
    },
    "enqueue": {
        "count": 7,
        "size": 680
    },
    "enroll": {
        "count": 1,
        "size": 32
    },
    "ensureAsync": {
        "count": 3,
        "size": 256
    },
    "ensureDebugIsInitialized": {
        "count": 3,
        "size": 264
    },
    "ensureValidName": {
        "count": 3,
        "size": 256
    },
    "enter": {
        "count": 1,
        "size": 32
    },
    "entries": {
        "count": 7,
        "size": 680
    },
    "entry": {
        "count": 1,
        "size": 32
    },
    "enumerable": {
        "count": 1,
        "size": 40
    },
    "enumerable_": {
        "count": 1,
        "size": 40
    },
    "env": {
        "count": 1,
        "size": 32
    },
    "env-get": {
        "count": 1,
        "size": 32
    },
    "env-set": {
        "count": 1,
        "size": 32
    },
    "env-unset": {
        "count": 1,
        "size": 40
    },
    "envPairs": {
        "count": 1,
        "size": 32
    },
    "environment": {
        "count": 1,
        "size": 40
    },
    "environment.COLORTERM": {
        "count": 1,
        "size": 48
    },
    "environment.DBUS_SESSION_BUS_ADDRESS": {
        "count": 1,
        "size": 64
    },
    "environment.DEBUG": {
        "count": 1,
        "size": 48
    },
    "environment.DEFAULTS_PATH": {
        "count": 1,
        "size": 56
    },
    "environment.DESKTOP_SESSION": {
        "count": 1,
        "size": 56
    },
    "environment.DISPLAY": {
        "count": 1,
        "size": 48
    },
    "environment.GLADE_CATALOG_PATH": {
        "count": 1,
        "size": 56
    },
    "environment.GLADE_MODULE_PATH": {
        "count": 1,
        "size": 56
    },
    "environment.GLADE_PIXMAP_PATH": {
        "count": 1,
        "size": 56
    },
    "environment.GTK2_MODULES": {
        "count": 1,
        "size": 48
    },
    "environment.GTK_MODULES": {
        "count": 1,
        "size": 48
    },
    "environment.HOME": {
        "count": 1,
        "size": 40
    },
    "environment.HOSTNAME": {
        "count": 1,
        "size": 48
    },
    "environment.LANG": {
        "count": 1,
        "size": 40
    },
    "environment.LANGUAGE": {
        "count": 1,
        "size": 48
    },
    "environment.LOGNAME": {
        "count": 1,
        "size": 48
    },
    "environment.MANDATORY_PATH": {
        "count": 1,
        "size": 56
    },
    "environment.MANPATH": {
        "count": 1,
        "size": 48
    },
    "environment.NODE_HEAPDUMP_OPTIONS": {
        "count": 1,
        "size": 64
    },
    "environment.NODE_REPL_HISTORY_FILE": {
        "count": 1,
        "size": 64
    },
    "environment.NVM_BIN": {
        "count": 1,
        "size": 48
    },
    "environment.NVM_CD_FLAGS": {
        "count": 1,
        "size": 48
    },
    "environment.NVM_DIR": {
        "count": 1,
        "size": 48
    },
    "environment.NVM_IOJS_ORG_MIRROR": {
        "count": 1,
        "size": 56
    },
    "environment.NVM_NODEJS_ORG_MIRROR": {
        "count": 1,
        "size": 64
    },
    "environment.NVM_PATH": {
        "count": 1,
        "size": 48
    },
    "environment.OCI_HOME": {
        "count": 1,
        "size": 48
    },
    "environment.OCI_INCLUDE_DIR": {
        "count": 1,
        "size": 56
    },
    "environment.OCI_INC_DIR": {
        "count": 1,
        "size": 48
    },
    "environment.OCI_LIB_DIR": {
        "count": 1,
        "size": 48
    },
    "environment.OLDPWD": {
        "count": 1,
        "size": 48
    },
    "environment.ORACLE_HOME": {
        "count": 1,
        "size": 48
    },
    "environment.PAGER": {
        "count": 1,
        "size": 48
    },
    "environment.PAM_KWALLET5_LOGIN": {
        "count": 1,
        "size": 56
    },
    "environment.PAM_KWALLET_LOGIN": {
        "count": 1,
        "size": 56
    },
    "environment.PATH": {
        "count": 1,
        "size": 40
    },
    "environment.PS1": {
        "count": 1,
        "size": 40
    },
    "environment.PWD": {
        "count": 1,
        "size": 40
    },
    "environment.QT_ACCESSIBILITY": {
        "count": 1,
        "size": 56
    },
    "environment.QT_LINUX_ACCESSIBILITY_ALWAYS_ON": {
        "count": 1,
        "size": 72
    },
    "environment.SESSION_MANAGER": {
        "count": 1,
        "size": 56
    },
    "environment.SHELL": {
        "count": 1,
        "size": 48
    },
    "environment.SHLVL": {
        "count": 1,
        "size": 48
    },
    "environment.SKIP_VAGRANT": {
        "count": 1,
        "size": 48
    },
    "environment.SSH_AGENT_PID": {
        "count": 1,
        "size": 56
    },
    "environment.SSH_AUTH_SOCK": {
        "count": 1,
        "size": 56
    },
    "environment.STRONGAGENT_INTERVAL_MULTIPLIER": {
        "count": 1,
        "size": 72
    },
    "environment.STRONGLOOP_LICENSE": {
        "count": 1,
        "size": 56
    },
    "environment.STRONGLOOP_METRICS": {
        "count": 1,
        "size": 56
    },
    "environment.TAP_BAIL": {
        "count": 1,
        "size": 48
    },
    "environment.TERM": {
        "count": 1,
        "size": 40
    },
    "environment.TMUX": {
        "count": 1,
        "size": 40
    },
    "environment.TMUX_PANE": {
        "count": 1,
        "size": 48
    },
    "environment.USER": {
        "count": 1,
        "size": 40
    },
    "environment.VAR": {
        "count": 1,
        "size": 40
    },
    "environment.WINDOWID": {
        "count": 1,
        "size": 48
    },
    "environment.XAUTHORITY": {
        "count": 1,
        "size": 48
    },
    "environment.XDG_CONFIG_DIRS": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_CURRENT_DESKTOP": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_DATA_DIRS": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_MENU_PREFIX": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_RUNTIME_DIR": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_SEAT": {
        "count": 1,
        "size": 48
    },
    "environment.XDG_SEAT_PATH": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_SESSION_CLASS": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_SESSION_COOKIE": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_SESSION_DESKTOP": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_SESSION_ID": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_SESSION_PATH": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_SESSION_TYPE": {
        "count": 1,
        "size": 56
    },
    "environment.XDG_VTNR": {
        "count": 1,
        "size": 48
    },
    "environment._": {
        "count": 1,
        "size": 40
    },
    "environment.supervisor_profile": {
        "count": 1,
        "size": 56
    },
    "environment_node": {
        "count": 1,
        "size": 40
    },
    "eq": {
        "count": 3,
        "size": 248
    },
    "equal": {
        "count": 3,
        "size": 248
    },
    "equalArrays": {
        "count": 3,
        "size": 256
    },
    "equalByTag": {
        "count": 3,
        "size": 256
    },
    "equalObjects": {
        "count": 3,
        "size": 256
    },
    "equals": {
        "count": 3,
        "size": 248
    },
    "er": {
        "count": 1,
        "size": 32
    },
    "err": {
        "count": 1,
        "size": 32
    },
    "errLog": {
        "count": 1,
        "size": 32
    },
    "errname": {
        "count": 1,
        "size": 32
    },
    "errno": {
        "count": 1,
        "size": 32
    },
    "errnoException": {
        "count": 3,
        "size": 256
    },
    "error": {
        "count": 11,
        "size": 896
    },
    "errorEmitted": {
        "count": 1,
        "size": 40
    },
    "errorHandler": {
        "count": 3,
        "size": 256
    },
    "errorLogger": {
        "count": 1,
        "size": 40
    },
    "errorTag": {
        "count": 1,
        "size": 32
    },
    "error_end_pos_symbol": {
        "count": 2,
        "size": 96
    },
    "error_script_symbol": {
        "count": 2,
        "size": 96
    },
    "error_start_pos_symbol": {
        "count": 2,
        "size": 96
    },
    "errored": {
        "count": 1,
        "size": 32
    },
    "errors": {
        "count": 1,
        "size": 32
    },
    "esc": {
        "count": 1,
        "size": 32
    },
    "escClose": {
        "count": 1,
        "size": 32
    },
    "escComma": {
        "count": 1,
        "size": 32
    },
    "escOpen": {
        "count": 1,
        "size": 32
    },
    "escPeriod": {
        "count": 1,
        "size": 40
    },
    "escSlash": {
        "count": 1,
        "size": 32
    },
    "escape": {
        "count": 5,
        "size": 464
    },
    "escapeBraces": {
        "count": 3,
        "size": 256
    },
    "escapeHeaderValue": {
        "count": 3,
        "size": 264
    },
    "escapeHtmlChar": {
        "count": 3,
        "size": 256
    },
    "escapeRegExp": {
        "count": 3,
        "size": 256
    },
    "escapeRegExpChar": {
        "count": 3,
        "size": 256
    },
    "escapeStringChar": {
        "count": 3,
        "size": 256
    },
    "escaped": {
        "count": 1,
        "size": 32
    },
    "eslint": {
        "count": 1,
        "size": 32
    },
    "eslint --ignore-path .gitignore . && jscs .": {
        "count": 2,
        "size": 144
    },
    "eslint ./": {
        "count": 1,
        "size": 40
    },
    "eslint-config-strongloop": {
        "count": 1,
        "size": 48
    },
    "establishConnection": {
        "count": 3,
        "size": 264
    },
    "ev": {
        "count": 1,
        "size": 32
    },
    "eval": {
        "count": 3,
        "size": 248
    },
    "evalScript": {
        "count": 3,
        "size": 256
    },
    "eval_from_function_name": {
        "count": 1,
        "size": 48
    },
    "eval_from_script": {
        "count": 1,
        "size": 40
    },
    "eval_from_script_position": {
        "count": 1,
        "size": 56
    },
    "evalmachine.<anonymous>": {
        "count": 2,
        "size": 176
    },
    "evaluate": {
        "count": 1,
        "size": 32
    },
    "event": {
        "count": 1,
        "size": 32
    },
    "eventLoopMetrics": {
        "count": 1,
        "size": 40
    },
    "eventName": {
        "count": 1,
        "size": 40
    },
    "eventloop": {
        "count": 1,
        "size": 40
    },
    "events": {
        "count": 4,
        "size": 280
    },
    "events.js": {
        "count": 2,
        "size": 168
    },
    "every": {
        "count": 7,
        "size": 680
    },
    "everyLimit": {
        "count": 1,
        "size": 40
    },
    "ex": {
        "count": 1,
        "size": 32
    },
    "exValue": {
        "count": 1,
        "size": 32
    },
    "exception": {
        "count": 1,
        "size": 40
    },
    "exceptionWithHostPort": {
        "count": 1,
        "size": 48
    },
    "exchange": {
        "count": 1,
        "size": 32
    },
    "excludeModules": {
        "count": 1,
        "size": 40
    },
    "exclusive": {
        "count": 1,
        "size": 40
    },
    "exec": {
        "count": 3,
        "size": 248
    },
    "execArgv": {
        "count": 1,
        "size": 32
    },
    "execFile": {
        "count": 1,
        "size": 32
    },
    "execFileSync": {
        "count": 3,
        "size": 256
    },
    "execPath": {
        "count": 1,
        "size": 32
    },
    "execSync": {
        "count": 3,
        "size": 248
    },
    "execute": {
        "count": 3,
        "size": 248
    },
    "executeQueueSends": {
        "count": 3,
        "size": 264
    },
    "existing": {
        "count": 1,
        "size": 32
    },
    "exists": {
        "count": 3,
        "size": 248
    },
    "existsSync": {
        "count": 1,
        "size": 40
    },
    "exit": {
        "count": 2,
        "size": 176
    },
    "exitCode": {
        "count": 1,
        "size": 32
    },
    "exp": {
        "count": 3,
        "size": 248
    },
    "expand": {
        "count": 3,
        "size": 248
    },
    "expandFormat": {
        "count": 3,
        "size": 256
    },
    "expandScope": {
        "count": 3,
        "size": 256
    },
    "expandString": {
        "count": 1,
        "size": 40
    },
    "expandTop": {
        "count": 3,
        "size": 256
    },
    "expectData": {
        "count": 1,
        "size": 40
    },
    "expectExpression": {
        "count": 1,
        "size": 40
    },
    "expectHeader": {
        "count": 1,
        "size": 40
    },
    "expectedException": {
        "count": 3,
        "size": 264
    },
    "expire": {
        "count": 1,
        "size": 32
    },
    "expm1": {
        "count": 3,
        "size": 248
    },
    "exponent": {
        "count": 1,
        "size": 32
    },
    "export-tests": {
        "count": 1,
        "size": 40
    },
    "exportChallenge": {
        "count": 3,
        "size": 256
    },
    "exportPublicKey": {
        "count": 3,
        "size": 256
    },
    "exports": {
        "count": 1,
        "size": 32
    },
    "exports.FreeList": {
        "count": 1,
        "size": 120
    },
    "exports.StringDecoder": {
        "count": 11,
        "size": 704
    },
    "exports.arch": {
        "count": 1,
        "size": 40
    },
    "exports.exec": {
        "count": 1,
        "size": 40
    },
    "exports.fork": {
        "count": 1,
        "size": 40
    },
    "exports.get": {
        "count": 2,
        "size": 80
    },
    "exports.gzip": {
        "count": 1,
        "size": 40
    },
    "exports.init": {
        "count": 1,
        "size": 40
    },
    "exports.log": {
        "count": 1,
        "size": 40
    },
    "exports.stop": {
        "count": 1,
        "size": 40
    },
    "express": {
        "count": 1,
        "size": 32
    },
    "express-records.js": {
        "count": 1,
        "size": 48
    },
    "expression": {
        "count": 1,
        "size": 40
    },
    "ext": {
        "count": 3,
        "size": 248
    },
    "ext must be a string": {
        "count": 1,
        "size": 48
    },
    "ext_key_usage": {
        "count": 1,
        "size": 40
    },
    "extend": {
        "count": 5,
        "size": 464
    },
    "extend.js": {
        "count": 1,
        "size": 40
    },
    "extendedIsoRegex": {
        "count": 1,
        "size": 40
    },
    "extension": {
        "count": 1,
        "size": 40
    },
    "extension handshake missing": {
        "count": 1,
        "size": 56
    },
    "extensionName": {
        "count": 1,
        "size": 40
    },
    "extensions": {
        "count": 1,
        "size": 40
    },
    "extname": {
        "count": 1,
        "size": 32
    },
    "extraBaseUrls": {
        "count": 1,
        "size": 40
    },
    "extraSet": {
        "count": 1,
        "size": 32
    },
    "extractDescription": {
        "count": 3,
        "size": 264
    },
    "extras": {
        "count": 3,
        "size": 248
    },
    "exts": {
        "count": 1,
        "size": 32
    },
    "f": {
        "count": 1,
        "size": 32
    },
    "f0a1eca5bbad50877475c27fb7dbfaa8eb566c07": {
        "count": 1,
        "size": 64
    },
    "factory": {
        "count": 1,
        "size": 32
    },
    "fail": {
        "count": 3,
        "size": 248
    },
    "false": {
        "count": 1,
        "size": 32
    },
    "false write response, pause": {
        "count": 1,
        "size": 56
    },
    "family": {
        "count": 1,
        "size": 32
    },
    "fastCopy": {
        "count": 3,
        "size": 248
    },
    "fchmod": {
        "count": 3,
        "size": 248
    },
    "fchmodSync": {
        "count": 1,
        "size": 40
    },
    "fchown": {
        "count": 3,
        "size": 248
    },
    "fchownSync": {
        "count": 1,
        "size": 40
    },
    "fd": {
        "count": 1,
        "size": 32
    },
    "fdatasync": {
        "count": 3,
        "size": 256
    },
    "fdatasyncSync": {
        "count": 1,
        "size": 40
    },
    "fds": {
        "count": 1,
        "size": 32
    },
    "features": {
        "count": 1,
        "size": 32
    },
    "fetchBucketProps": {
        "count": 1,
        "size": 40
    },
    "fetchBucketTypeProps": {
        "count": 1,
        "size": 48
    },
    "fetchCounter": {
        "count": 1,
        "size": 40
    },
    "fetchIndex": {
        "count": 1,
        "size": 40
    },
    "fetchMap": {
        "count": 1,
        "size": 32
    },
    "fetchPreflist": {
        "count": 1,
        "size": 40
    },
    "fetchSchema": {
        "count": 1,
        "size": 40
    },
    "fetchSet": {
        "count": 1,
        "size": 32
    },
    "fetchStack": {
        "count": 1,
        "size": 40
    },
    "fetchValue": {
        "count": 1,
        "size": 40
    },
    "fieldName": {
        "count": 1,
        "size": 40
    },
    "fields": {
        "count": 1,
        "size": 32
    },
    "fieldsToFix": {
        "count": 1,
        "size": 40
    },
    "file": {
        "count": 1,
        "size": 32
    },
    "file:": {
        "count": 1,
        "size": 32
    },
    "fileName": {
        "count": 1,
        "size": 32
    },
    "filename": {
        "count": 1,
        "size": 32
    },
    "files": {
        "count": 1,
        "size": 32
    },
    "fill": {
        "count": 11,
        "size": 1112
    },
    "filter": {
        "count": 9,
        "size": 896
    },
    "filterDuplicates": {
        "count": 3,
        "size": 256
    },
    "filterLimit": {
        "count": 1,
        "size": 40
    },
    "filterSeries": {
        "count": 1,
        "size": 40
    },
    "filterUrl": {
        "count": 1,
        "size": 40
    },
    "filters": {
        "count": 1,
        "size": 32
    },
    "final": {
        "count": 5,
        "size": 464
    },
    "finaltol": {
        "count": 1,
        "size": 32
    },
    "find": {
        "count": 5,
        "size": 464
    },
    "findCallbackArg": {
        "count": 1,
        "size": 40
    },
    "findDep": {
        "count": 3,
        "size": 248
    },
    "findIndex": {
        "count": 5,
        "size": 472
    },
    "findKey": {
        "count": 1,
        "size": 32
    },
    "findLast": {
        "count": 1,
        "size": 32
    },
    "findLastIndex": {
        "count": 1,
        "size": 40
    },
    "findLastKey": {
        "count": 1,
        "size": 40
    },
    "findUnmet": {
        "count": 3,
        "size": 256
    },
    "findWhere": {
        "count": 3,
        "size": 256
    },
    "fingerprint": {
        "count": 1,
        "size": 40
    },
    "finish": {
        "count": 5,
        "size": 464
    },
    "finishMaybe": {
        "count": 3,
        "size": 256
    },
    "finishShutdown": {
        "count": 3,
        "size": 256
    },
    "finishWrite": {
        "count": 3,
        "size": 256
    },
    "finished": {
        "count": 1,
        "size": 32
    },
    "fireErrorCallbacks": {
        "count": 2,
        "size": 192
    },
    "fired": {
        "count": 1,
        "size": 32
    },
    "first": {
        "count": 5,
        "size": 464
    },
    "firstArgs": {
        "count": 1,
        "size": 40
    },
    "firstDayOfWeek": {
        "count": 1,
        "size": 40
    },
    "firstDayOfYear": {
        "count": 1,
        "size": 40
    },
    "firstTime": {
        "count": 1,
        "size": 40
    },
    "firstWeekOffset": {
        "count": 3,
        "size": 256
    },
    "fixBinField": {
        "count": 1,
        "size": 40
    },
    "fixBugsField": {
        "count": 1,
        "size": 40
    },
    "fixBundleDependenciesField": {
        "count": 1,
        "size": 56
    },
    "fixDependencies": {
        "count": 1,
        "size": 40
    },
    "fixDescriptionField": {
        "count": 1,
        "size": 48
    },
    "fixFilesField": {
        "count": 1,
        "size": 40
    },
    "fixHomepageField": {
        "count": 1,
        "size": 40
    },
    "fixKeywordsField": {
        "count": 1,
        "size": 40
    },
    "fixManField": {
        "count": 1,
        "size": 40
    },
    "fixModulesField": {
        "count": 1,
        "size": 40
    },
    "fixNameField": {
        "count": 1,
        "size": 40
    },
    "fixPeople": {
        "count": 1,
        "size": 40
    },
    "fixReadmeField": {
        "count": 1,
        "size": 40
    },
    "fixRepositoryField": {
        "count": 1,
        "size": 48
    },
    "fixScriptsField": {
        "count": 1,
        "size": 40
    },
    "fixTypos": {
        "count": 1,
        "size": 32
    },
    "fixVersionField": {
        "count": 1,
        "size": 40
    },
    "fixed": {
        "count": 3,
        "size": 248
    },
    "fixer": {
        "count": 1,
        "size": 32
    },
    "flag": {
        "count": 1,
        "size": 32
    },
    "flags": {
        "count": 1,
        "size": 32
    },
    "flatten": {
        "count": 3,
        "size": 248
    },
    "flattenDeep": {
        "count": 3,
        "size": 256
    },
    "float32Tag": {
        "count": 1,
        "size": 40
    },
    "float64Tag": {
        "count": 1,
        "size": 40
    },
    "floor": {
        "count": 3,
        "size": 248
    },
    "flow": {
        "count": 3,
        "size": 248
    },
    "flowRight": {
        "count": 1,
        "size": 40
    },
    "flowing": {
        "count": 1,
        "size": 32
    },
    "flush": {
        "count": 3,
        "size": 248
    },
    "flush at %s: %j": {
        "count": 1,
        "size": 40
    },
    "flushCallback": {
        "count": 1,
        "size": 40
    },
    "flushHeaders": {
        "count": 1,
        "size": 40
    },
    "flushInterval": {
        "count": 1,
        "size": 40
    },
    "flushIntervalTimer": {
        "count": 1,
        "size": 48
    },
    "flushMetrics": {
        "count": 3,
        "size": 256
    },
    "flushStdio": {
        "count": 3,
        "size": 256
    },
    "flushing": {
        "count": 1,
        "size": 32
    },
    "fmt": {
        "count": 1,
        "size": 32
    },
    "fn": {
        "count": 1,
        "size": 32
    },
    "fnToString": {
        "count": 1,
        "size": 40
    },
    "fns": {
        "count": 1,
        "size": 32
    },
    "foldl": {
        "count": 1,
        "size": 32
    },
    "foldr": {
        "count": 1,
        "size": 32
    },
    "fontcolor": {
        "count": 3,
        "size": 256
    },
    "fontsize": {
        "count": 3,
        "size": 248
    },
    "foo": {
        "count": 11,
        "size": 824
    },
    "for": {
        "count": 3,
        "size": 248
    },
    "forEach": {
        "count": 11,
        "size": 1112
    },
    "forEachLimit": {
        "count": 1,
        "size": 40
    },
    "forEachOf": {
        "count": 1,
        "size": 40
    },
    "forEachOfLimit": {
        "count": 1,
        "size": 40
    },
    "forEachOfSeries": {
        "count": 1,
        "size": 40
    },
    "forEachRight": {
        "count": 1,
        "size": 40
    },
    "forEachSeries": {
        "count": 1,
        "size": 40
    },
    "forIn": {
        "count": 1,
        "size": 32
    },
    "forInRight": {
        "count": 1,
        "size": 40
    },
    "forOwn": {
        "count": 1,
        "size": 32
    },
    "forOwnRight": {
        "count": 1,
        "size": 40
    },
    "for_api": {
        "count": 1,
        "size": 32
    },
    "for_intern": {
        "count": 1,
        "size": 40
    },
    "forever": {
        "count": 3,
        "size": 96
    },
    "fork": {
        "count": 1,
        "size": 32
    },
    "format": {
        "count": 5,
        "size": 464
    },
    "formatApi": {
        "count": 1,
        "size": 40
    },
    "formatArgs": {
        "count": 3,
        "size": 256
    },
    "formatArray": {
        "count": 3,
        "size": 256
    },
    "formatCPU": {
        "count": 1,
        "size": 40
    },
    "formatCollectionIterator": {
        "count": 3,
        "size": 264
    },
    "formatDate": {
        "count": 3,
        "size": 256
    },
    "formatError": {
        "count": 3,
        "size": 256
    },
    "formatFunctions": {
        "count": 1,
        "size": 40
    },
    "formatGC": {
        "count": 1,
        "size": 32
    },
    "formatHeap": {
        "count": 1,
        "size": 40
    },
    "formatMap": {
        "count": 3,
        "size": 256
    },
    "formatMemory": {
        "count": 1,
        "size": 40
    },
    "formatMoment": {
        "count": 3,
        "size": 256
    },
    "formatNumber": {
        "count": 3,
        "size": 256
    },
    "formatOSEnv": {
        "count": 1,
        "size": 40
    },
    "formatObject": {
        "count": 3,
        "size": 256
    },
    "formatPrimitive": {
        "count": 3,
        "size": 256
    },
    "formatPrimitiveNoColor": {
        "count": 3,
        "size": 264
    },
    "formatProfiling": {
        "count": 1,
        "size": 40
    },
    "formatPromise": {
        "count": 3,
        "size": 256
    },
    "formatProperty": {
        "count": 3,
        "size": 256
    },
    "formatRegExp": {
        "count": 1,
        "size": 40
    },
    "formatRuntimeEnv": {
        "count": 1,
        "size": 40
    },
    "formatSet": {
        "count": 3,
        "size": 256
    },
    "formatTokenFunctions": {
        "count": 1,
        "size": 48
    },
    "formatValue": {
        "count": 3,
        "size": 256
    },
    "formatted": {
        "count": 1,
        "size": 40
    },
    "formatted stack trace": {
        "count": 1,
        "size": 48
    },
    "formatter": {
        "count": 1,
        "size": 40
    },
    "formatters": {
        "count": 1,
        "size": 40
    },
    "formattingTokens": {
        "count": 1,
        "size": 40
    },
    "forwardMetrics": {
        "count": 3,
        "size": 256
    },
    "frameAndSend": {
        "count": 1,
        "size": 40
    },
    "free": {
        "count": 1,
        "size": 32
    },
    "freeExports": {
        "count": 1,
        "size": 40
    },
    "freeGlobal": {
        "count": 1,
        "size": 40
    },
    "freeModule": {
        "count": 1,
        "size": 40
    },
    "freeParser": {
        "count": 3,
        "size": 256
    },
    "freeSelf": {
        "count": 1,
        "size": 32
    },
    "freeSockets": {
        "count": 1,
        "size": 40
    },
    "freeTasks": {
        "count": 1,
        "size": 40
    },
    "freeWindow": {
        "count": 1,
        "size": 40
    },
    "freelist": {
        "count": 1,
        "size": 32
    },
    "freemem": {
        "count": 1,
        "size": 32
    },
    "freeze": {
        "count": 3,
        "size": 248
    },
    "freezeArray": {
        "count": 3,
        "size": 256
    },
    "freq": {
        "count": 1,
        "size": 32
    },
    "from": {
        "count": 7,
        "size": 680
    },
    "fromCharCode": {
        "count": 3,
        "size": 256
    },
    "fromCodePoint": {
        "count": 3,
        "size": 256
    },
    "fromLDMLString": {
        "count": 3,
        "size": 256
    },
    "fromList": {
        "count": 3,
        "size": 248
    },
    "fromNow": {
        "count": 3,
        "size": 248
    },
    "fromObject": {
        "count": 3,
        "size": 256
    },
    "fromRight": {
        "count": 1,
        "size": 40
    },
    "fromSocket": {
        "count": 1,
        "size": 40
    },
    "fromStart": {
        "count": 3,
        "size": 256
    },
    "fromString": {
        "count": 3,
        "size": 256
    },
    "from_line": {
        "count": 1,
        "size": 40
    },
    "from_position": {
        "count": 1,
        "size": 40
    },
    "fround": {
        "count": 3,
        "size": 248
    },
    "frozen_symbol": {
        "count": 2,
        "size": 80
    },
    "fs": {
        "count": 2,
        "size": 64
    },
    "fs$ReadStream": {
        "count": 1,
        "size": 40
    },
    "fs$WriteStream": {
        "count": 1,
        "size": 40
    },
    "fs$appendFile": {
        "count": 1,
        "size": 40
    },
    "fs$close": {
        "count": 1,
        "size": 32
    },
    "fs$closeSync": {
        "count": 1,
        "size": 40
    },
    "fs$open": {
        "count": 1,
        "size": 32
    },
    "fs$read": {
        "count": 1,
        "size": 32
    },
    "fs$readFile": {
        "count": 1,
        "size": 40
    },
    "fs$readSync": {
        "count": 1,
        "size": 40
    },
    "fs$readdir": {
        "count": 1,
        "size": 40
    },
    "fs$rename": {
        "count": 1,
        "size": 40
    },
    "fs$writeFile": {
        "count": 1,
        "size": 40
    },
    "fs.Stats": {
        "count": 18,
        "size": 576
    },
    "fs.access": {
        "count": 2,
        "size": 80
    },
    "fs.chmod": {
        "count": 2,
        "size": 64
    },
    "fs.chmodSync": {
        "count": 2,
        "size": 80
    },
    "fs.chown": {
        "count": 2,
        "size": 64
    },
    "fs.chownSync": {
        "count": 2,
        "size": 80
    },
    "fs.close": {
        "count": 2,
        "size": 64
    },
    "fs.closeSync": {
        "count": 2,
        "size": 80
    },
    "fs.exists": {
        "count": 2,
        "size": 80
    },
    "fs.fchmod": {
        "count": 2,
        "size": 80
    },
    "fs.fchown": {
        "count": 2,
        "size": 80
    },
    "fs.fdatasync": {
        "count": 2,
        "size": 80
    },
    "fs.fstat": {
        "count": 2,
        "size": 64
    },
    "fs.fstatSync": {
        "count": 2,
        "size": 80
    },
    "fs.fsync": {
        "count": 2,
        "size": 64
    },
    "fs.fsyncSync": {
        "count": 2,
        "size": 80
    },
    "fs.ftruncate": {
        "count": 2,
        "size": 80
    },
    "fs.futimes": {
        "count": 2,
        "size": 80
    },
    "fs.js": {
        "count": 2,
        "size": 160
    },
    "fs.lchmod": {
        "count": 5,
        "size": 200
    },
    "fs.lchown": {
        "count": 4,
        "size": 160
    },
    "fs.link": {
        "count": 2,
        "size": 64
    },
    "fs.linkSync": {
        "count": 2,
        "size": 80
    },
    "fs.lstat": {
        "count": 2,
        "size": 64
    },
    "fs.lstatSync": {
        "count": 2,
        "size": 80
    },
    "fs.lutimes": {
        "count": 5,
        "size": 200
    },
    "fs.mkdir": {
        "count": 2,
        "size": 64
    },
    "fs.mkdirSync": {
        "count": 2,
        "size": 80
    },
    "fs.open": {
        "count": 2,
        "size": 64
    },
    "fs.openSync": {
        "count": 2,
        "size": 80
    },
    "fs.read": {
        "count": 3,
        "size": 96
    },
    "fs.readFile": {
        "count": 2,
        "size": 80
    },
    "fs.readSync": {
        "count": 3,
        "size": 120
    },
    "fs.readdir": {
        "count": 2,
        "size": 80
    },
    "fs.readlink": {
        "count": 2,
        "size": 80
    },
    "fs.rename": {
        "count": 2,
        "size": 80
    },
    "fs.rmdir": {
        "count": 2,
        "size": 64
    },
    "fs.rmdirSync": {
        "count": 2,
        "size": 80
    },
    "fs.stat": {
        "count": 2,
        "size": 64
    },
    "fs.statSync": {
        "count": 2,
        "size": 80
    },
    "fs.symlink": {
        "count": 2,
        "size": 80
    },
    "fs.truncate": {
        "count": 2,
        "size": 80
    },
    "fs.unlink": {
        "count": 2,
        "size": 80
    },
    "fs.utimes": {
        "count": 2,
        "size": 80
    },
    "fs.watch": {
        "count": 2,
        "size": 64
    },
    "fs.watchFile": {
        "count": 2,
        "size": 80
    },
    "fs.write": {
        "count": 2,
        "size": 64
    },
    "fs.writeFile": {
        "count": 2,
        "size": 80
    },
    "fs.writeSync": {
        "count": 2,
        "size": 80
    },
    "fs_event_wrap": {
        "count": 1,
        "size": 40
    },
    "fstat": {
        "count": 3,
        "size": 248
    },
    "fstatSync": {
        "count": 1,
        "size": 40
    },
    "fsync": {
        "count": 3,
        "size": 248
    },
    "fsyncSync": {
        "count": 1,
        "size": 40
    },
    "ftp": {
        "count": 1,
        "size": 32
    },
    "ftp:": {
        "count": 1,
        "size": 32
    },
    "ftruncate": {
        "count": 3,
        "size": 256
    },
    "ftruncateSync": {
        "count": 1,
        "size": 40
    },
    "fullStackRegex": {
        "count": 1,
        "size": 40
    },
    "fun": {
        "count": 1,
        "size": 32
    },
    "func": {
        "count": 1,
        "size": 32
    },
    "funcTag": {
        "count": 1,
        "size": 32
    },
    "function": {
        "count": 1,
        "size": 32
    },
    "function ": {
        "count": 1,
        "size": 40
    },
    "function () { [native code] }": {
        "count": 1,
        "size": 56
    },
    "function*": {
        "count": 1,
        "size": 40
    },
    "function* ": {
        "count": 1,
        "size": 40
    },
    "functions": {
        "count": 3,
        "size": 256
    },
    "futimes": {
        "count": 3,
        "size": 248
    },
    "futimesSync": {
        "count": 1,
        "size": 40
    },
    "future": {
        "count": 1,
        "size": 32
    },
    "g": {
        "count": 70,
        "size": 5072
    },
    "gas_version": {
        "count": 1,
        "size": 40
    },
    "gauge_key": {
        "count": 1,
        "size": 40
    },
    "gauges": {
        "count": 1,
        "size": 32
    },
    "gc": {
        "count": 1,
        "size": 32
    },
    "gcMetrics": {
        "count": 1,
        "size": 40
    },
    "gc_node": {
        "count": 1,
        "size": 32
    },
    "generateKeys": {
        "count": 9,
        "size": 904
    },
    "generateLogName": {
        "count": 1,
        "size": 40
    },
    "generateToken": {
        "count": 1,
        "size": 40
    },
    "get": {
        "count": 16,
        "size": 1544
    },
    "get [Symbol.toStringTag]": {
        "count": 3,
        "size": 264
    },
    "get __proto__": {
        "count": 3,
        "size": 256
    },
    "get buffer": {
        "count": 30,
        "size": 2560
    },
    "get byteLength": {
        "count": 33,
        "size": 2816
    },
    "get byteOffset": {
        "count": 30,
        "size": 2560
    },
    "get length": {
        "count": 27,
        "size": 2304
    },
    "get size": {
        "count": 6,
        "size": 496
    },
    "getAPI": {
        "count": 1,
        "size": 32
    },
    "getArrayBuffer": {
        "count": 3,
        "size": 256
    },
    "getAuthTag": {
        "count": 3,
        "size": 256
    },
    "getAvailableLocalesOf": {
        "count": 3,
        "size": 264
    },
    "getBuffer": {
        "count": 1,
        "size": 40
    },
    "getCPUs": {
        "count": 3,
        "size": 248
    },
    "getCached": {
        "count": 1,
        "size": 40
    },
    "getCallback": {
        "count": 3,
        "size": 256
    },
    "getCertificate": {
        "count": 3,
        "size": 256
    },
    "getCipher": {
        "count": 1,
        "size": 40
    },
    "getCiphers": {
        "count": 3,
        "size": 256
    },
    "getClientToken": {
        "count": 1,
        "size": 40
    },
    "getColumnNumber": {
        "count": 1,
        "size": 40
    },
    "getConnections": {
        "count": 3,
        "size": 256
    },
    "getConstructorOf": {
        "count": 3,
        "size": 256
    },
    "getCpuData": {
        "count": 3,
        "size": 256
    },
    "getCurrentBuffer": {
        "count": 3,
        "size": 256
    },
    "getCurrentCipher": {
        "count": 5,
        "size": 472
    },
    "getCurves": {
        "count": 3,
        "size": 256
    },
    "getData": {
        "count": 1,
        "size": 32
    },
    "getDate": {
        "count": 3,
        "size": 248
    },
    "getDateOffset": {
        "count": 3,
        "size": 256
    },
    "getDay": {
        "count": 3,
        "size": 248
    },
    "getDaysInMonth": {
        "count": 3,
        "size": 256
    },
    "getDecoder": {
        "count": 3,
        "size": 256
    },
    "getDiffieHellman": {
        "count": 1,
        "size": 40
    },
    "getEnvironment": {
        "count": 1,
        "size": 40
    },
    "getEvalOrigin": {
        "count": 1,
        "size": 40
    },
    "getEventLoopData": {
        "count": 3,
        "size": 256
    },
    "getFileName": {
        "count": 7,
        "size": 688
    },
    "getFloat32": {
        "count": 3,
        "size": 256
    },
    "getFloat64": {
        "count": 3,
        "size": 256
    },
    "getFreeMem": {
        "count": 3,
        "size": 256
    },
    "getFullYear": {
        "count": 3,
        "size": 256
    },
    "getFuncName": {
        "count": 3,
        "size": 256
    },
    "getFunction": {
        "count": 1,
        "size": 40
    },
    "getFunctionName": {
        "count": 1,
        "size": 40
    },
    "getGCHeapData": {
        "count": 3,
        "size": 256
    },
    "getGenerator": {
        "count": 5,
        "size": 472
    },
    "getGet": {
        "count": 1,
        "size": 32
    },
    "getGetOption": {
        "count": 3,
        "size": 256
    },
    "getHTTPData": {
        "count": 3,
        "size": 256
    },
    "getHandleWrapType": {
        "count": 3,
        "size": 264
    },
    "getHashes": {
        "count": 3,
        "size": 256
    },
    "getHeader": {
        "count": 1,
        "size": 40
    },
    "getHeapData": {
        "count": 3,
        "size": 256
    },
    "getHomeDirectory": {
        "count": 3,
        "size": 256
    },
    "getHostByAddr": {
        "count": 3,
        "size": 256
    },
    "getHostname": {
        "count": 3,
        "size": 256
    },
    "getHours": {
        "count": 3,
        "size": 248
    },
    "getISOWeeksInYear": {
        "count": 3,
        "size": 264
    },
    "getIndexOf": {
        "count": 3,
        "size": 256
    },
    "getInt16": {
        "count": 3,
        "size": 248
    },
    "getInt32": {
        "count": 3,
        "size": 248
    },
    "getInt8": {
        "count": 3,
        "size": 248
    },
    "getInterfaceAddresses": {
        "count": 3,
        "size": 264
    },
    "getIsLeapYear": {
        "count": 3,
        "size": 256
    },
    "getIssuer": {
        "count": 3,
        "size": 256
    },
    "getLength": {
        "count": 1,
        "size": 40
    },
    "getLineNumber": {
        "count": 1,
        "size": 40
    },
    "getLoadAvg": {
        "count": 3,
        "size": 256
    },
    "getMatchData": {
        "count": 3,
        "size": 256
    },
    "getMaxListeners": {
        "count": 3,
        "size": 256
    },
    "getMessage": {
        "count": 3,
        "size": 256
    },
    "getMessageData": {
        "count": 3,
        "size": 256
    },
    "getMethodName": {
        "count": 1,
        "size": 40
    },
    "getMilliseconds": {
        "count": 3,
        "size": 256
    },
    "getMinutes": {
        "count": 3,
        "size": 256
    },
    "getMonth": {
        "count": 3,
        "size": 248
    },
    "getName": {
        "count": 1,
        "size": 32
    },
    "getNative": {
        "count": 2,
        "size": 184
    },
    "getNegotiatedProtocol": {
        "count": 5,
        "size": 480
    },
    "getNetworkInterfaces": {
        "count": 1,
        "size": 48
    },
    "getNotifier": {
        "count": 3,
        "size": 256
    },
    "getNumberOption": {
        "count": 3,
        "size": 256
    },
    "getOSRelease": {
        "count": 3,
        "size": 256
    },
    "getOSType": {
        "count": 3,
        "size": 256
    },
    "getObjectHistogram": {
        "count": 1,
        "size": 48
    },
    "getOptimalLanguageTag": {
        "count": 3,
        "size": 264
    },
    "getOwnPropertyDescriptor": {
        "count": 3,
        "size": 264
    },
    "getOwnPropertyNames": {
        "count": 3,
        "size": 264
    },
    "getOwnPropertySymbols": {
        "count": 3,
        "size": 264
    },
    "getParseRegexForToken": {
        "count": 3,
        "size": 264
    },
    "getParsingFlags": {
        "count": 3,
        "size": 256
    },
    "getPeerCertificate": {
        "count": 5,
        "size": 480
    },
    "getPosition": {
        "count": 1,
        "size": 40
    },
    "getPrime": {
        "count": 5,
        "size": 464
    },
    "getPrivateKey": {
        "count": 7,
        "size": 688
    },
    "getProbeData": {
        "count": 3,
        "size": 256
    },
    "getPrototypeOf": {
        "count": 3,
        "size": 256
    },
    "getPublicKey": {
        "count": 9,
        "size": 904
    },
    "getRandomMask": {
        "count": 3,
        "size": 256
    },
    "getRestarting": {
        "count": 3,
        "size": 256
    },
    "getResult": {
        "count": 1,
        "size": 40
    },
    "getRiakCluster": {
        "count": 1,
        "size": 40
    },
    "getRoot": {
        "count": 7,
        "size": 680
    },
    "getSSLCiphers": {
        "count": 3,
        "size": 256
    },
    "getScriptNameOrSourceURL": {
        "count": 1,
        "size": 48
    },
    "getSeconds": {
        "count": 3,
        "size": 256
    },
    "getServername": {
        "count": 5,
        "size": 472
    },
    "getServers": {
        "count": 3,
        "size": 256
    },
    "getSession": {
        "count": 5,
        "size": 472
    },
    "getSet": {
        "count": 3,
        "size": 248
    },
    "getSetDayOfMonth": {
        "count": 1,
        "size": 40
    },
    "getSetDayOfWeek": {
        "count": 3,
        "size": 256
    },
    "getSetDayOfYear": {
        "count": 3,
        "size": 256
    },
    "getSetHour": {
        "count": 1,
        "size": 40
    },
    "getSetISODayOfWeek": {
        "count": 3,
        "size": 264
    },
    "getSetISOWeek": {
        "count": 3,
        "size": 256
    },
    "getSetISOWeekYear": {
        "count": 3,
        "size": 264
    },
    "getSetLocaleDayOfWeek": {
        "count": 3,
        "size": 264
    },
    "getSetMillisecond": {
        "count": 1,
        "size": 48
    },
    "getSetMinute": {
        "count": 1,
        "size": 40
    },
    "getSetMonth": {
        "count": 3,
        "size": 256
    },
    "getSetOffset": {
        "count": 3,
        "size": 256
    },
    "getSetQuarter": {
        "count": 3,
        "size": 256
    },
    "getSetSecond": {
        "count": 1,
        "size": 40
    },
    "getSetWeek": {
        "count": 3,
        "size": 256
    },
    "getSetWeekYear": {
        "count": 3,
        "size": 256
    },
    "getSetWeekYearHelper": {
        "count": 3,
        "size": 264
    },
    "getSetYear": {
        "count": 1,
        "size": 40
    },
    "getSetZone": {
        "count": 3,
        "size": 256
    },
    "getSocketList": {
        "count": 3,
        "size": 256
    },
    "getSource": {
        "count": 1,
        "size": 40
    },
    "getTLSTicket": {
        "count": 7,
        "size": 688
    },
    "getThis": {
        "count": 1,
        "size": 32
    },
    "getTicketKeys": {
        "count": 5,
        "size": 472
    },
    "getTime": {
        "count": 3,
        "size": 248
    },
    "getTimezoneOffset": {
        "count": 3,
        "size": 264
    },
    "getToken": {
        "count": 1,
        "size": 32
    },
    "getTotalMem": {
        "count": 3,
        "size": 256
    },
    "getTypeName": {
        "count": 1,
        "size": 40
    },
    "getUTCDate": {
        "count": 3,
        "size": 256
    },
    "getUTCDay": {
        "count": 3,
        "size": 256
    },
    "getUTCFullYear": {
        "count": 3,
        "size": 256
    },
    "getUTCHours": {
        "count": 3,
        "size": 256
    },
    "getUTCMilliseconds": {
        "count": 3,
        "size": 264
    },
    "getUTCMinutes": {
        "count": 3,
        "size": 256
    },
    "getUTCMonth": {
        "count": 3,
        "size": 256
    },
    "getUTCSeconds": {
        "count": 3,
        "size": 256
    },
    "getUint16": {
        "count": 3,
        "size": 256
    },
    "getUint32": {
        "count": 3,
        "size": 256
    },
    "getUint8": {
        "count": 3,
        "size": 248
    },
    "getUptime": {
        "count": 3,
        "size": 256
    },
    "getUrl": {
        "count": 3,
        "size": 248
    },
    "getValue": {
        "count": 1,
        "size": 32
    },
    "getView": {
        "count": 3,
        "size": 248
    },
    "getWeeksInYear": {
        "count": 3,
        "size": 256
    },
    "getWindowSize": {
        "count": 3,
        "size": 256
    },
    "getWorkerInfo": {
        "count": 3,
        "size": 256
    },
    "getYear": {
        "count": 3,
        "size": 248
    },
    "getZoneAbbr": {
        "count": 3,
        "size": 256
    },
    "getZoneName": {
        "count": 3,
        "size": 256
    },
    "get_": {
        "count": 1,
        "size": 32
    },
    "get_set__get": {
        "count": 3,
        "size": 256
    },
    "get_set__set": {
        "count": 3,
        "size": 256
    },
    "getaddrinfo": {
        "count": 3,
        "size": 256
    },
    "getegid": {
        "count": 3,
        "size": 248
    },
    "geteuid": {
        "count": 3,
        "size": 248
    },
    "getgid": {
        "count": 3,
        "size": 248
    },
    "getgroups": {
        "count": 3,
        "size": 256
    },
    "getnameinfo": {
        "count": 3,
        "size": 256
    },
    "getpeername": {
        "count": 3,
        "size": 256
    },
    "getsockname": {
        "count": 5,
        "size": 472
    },
    "getter": {
        "count": 1,
        "size": 32
    },
    "getuid": {
        "count": 3,
        "size": 248
    },
    "gfs": {
        "count": 1,
        "size": 32
    },
    "gfs4": {
        "count": 1,
        "size": 32
    },
    "gg": {
        "count": 1,
        "size": 32
    },
    "gggg": {
        "count": 1,
        "size": 32
    },
    "ggggg": {
        "count": 1,
        "size": 32
    },
    "gi": {
        "count": 1,
        "size": 32
    },
    "gid": {
        "count": 1,
        "size": 32
    },
    "gist.github.com": {
        "count": 1,
        "size": 40
    },
    "git": {
        "count": 6,
        "size": 192
    },
    "git+https://github.com/strongloop/strong-cluster-control.git": {
        "count": 1,
        "size": 88
    },
    "git+https://github.com/strongloop/strong-control-channel.git": {
        "count": 1,
        "size": 88
    },
    "git+https://github.com/strongloop/strong-debugger.git": {
        "count": 1,
        "size": 80
    },
    "git://github.com/RuntimeTools/appmetrics.git": {
        "count": 1,
        "size": 72
    },
    "git://github.com/runtimetools/appmetrics.git#19cb3a6d693a59da48a84935d997275e4f2d0211": {
        "count": 1,
        "size": 112
    },
    "git://github.com/strongloop/strong-log-transformer.git": {
        "count": 1,
        "size": 80
    },
    "git://github.com/strongloop/strong-supervisor.git": {
        "count": 1,
        "size": 80
    },
    "gitHead": {
        "count": 1,
        "size": 32
    },
    "githead": {
        "count": 3,
        "size": 248
    },
    "githead_": {
        "count": 3,
        "size": 248
    },
    "github-url-from-git": {
        "count": 1,
        "size": 48
    },
    "github-url-from-username-repo": {
        "count": 1,
        "size": 56
    },
    "github.com": {
        "count": 1,
        "size": 40
    },
    "githubUrlFromGit": {
        "count": 3,
        "size": 256
    },
    "githubUserRepo": {
        "count": 1,
        "size": 40
    },
    "glob": {
        "count": 3,
        "size": 248
    },
    "glob.js": {
        "count": 1,
        "size": 32
    },
    "globSync": {
        "count": 3,
        "size": 248
    },
    "globUnescape": {
        "count": 3,
        "size": 256
    },
    "global": {
        "count": 1,
        "size": 32
    },
    "globalAgent": {
        "count": 1,
        "size": 40
    },
    "globalConsole": {
        "count": 1,
        "size": 40
    },
    "globalLocale": {
        "count": 1,
        "size": 40
    },
    "globalPaths": {
        "count": 1,
        "size": 40
    },
    "globalTimeouts": {
        "count": 1,
        "size": 40
    },
    "globalVariables": {
        "count": 1,
        "size": 40
    },
    "gm": {
        "count": 1,
        "size": 32
    },
    "go": {
        "count": 1,
        "size": 32
    },
    "going away": {
        "count": 1,
        "size": 40
    },
    "gopher": {
        "count": 1,
        "size": 32
    },
    "gopher:": {
        "count": 1,
        "size": 32
    },
    "got": {
        "count": 1,
        "size": 32
    },
    "got data": {
        "count": 1,
        "size": 32
    },
    "graceful-fs": {
        "count": 1,
        "size": 40
    },
    "graceful-fs.js": {
        "count": 2,
        "size": 80
    },
    "gracefulify": {
        "count": 1,
        "size": 40
    },
    "graphite": {
        "count": 1,
        "size": 32
    },
    "graphite:": {
        "count": 1,
        "size": 40
    },
    "graphiteHost": {
        "count": 1,
        "size": 40
    },
    "graphitePort": {
        "count": 1,
        "size": 40
    },
    "green": {
        "count": 1,
        "size": 32
    },
    "grey": {
        "count": 1,
        "size": 32
    },
    "groupBy": {
        "count": 1,
        "size": 32
    },
    "gt": {
        "count": 5,
        "size": 464
    },
    "gte": {
        "count": 7,
        "size": 680
    },
    "gtr": {
        "count": 3,
        "size": 248
    },
    "guard": {
        "count": 1,
        "size": 32
    },
    "guessHandleType": {
        "count": 3,
        "size": 256
    },
    "gunzip": {
        "count": 1,
        "size": 32
    },
    "gunzipSync": {
        "count": 1,
        "size": 40
    },
    "gypfile": {
        "count": 3,
        "size": 248
    },
    "gypfile_": {
        "count": 3,
        "size": 248
    },
    "gzip": {
        "count": 1,
        "size": 32
    },
    "gzipSync": {
        "count": 1,
        "size": 32
    },
    "h": {
        "count": 1,
        "size": 32
    },
    "h:mm A": {
        "count": 1,
        "size": 32
    },
    "h:mm:ss A": {
        "count": 1,
        "size": 40
    },
    "hFormat": {
        "count": 3,
        "size": 248
    },
    "hadException": {
        "count": 1,
        "size": 40
    },
    "hadListeners": {
        "count": 1,
        "size": 40
    },
    "hampage": {
        "count": 1,
        "size": 32
    },
    "handle": {
        "count": 1,
        "size": 32
    },
    "handle != self._handle": {
        "count": 1,
        "size": 48
    },
    "handleConversion": {
        "count": 1,
        "size": 40
    },
    "handleEnd": {
        "count": 7,
        "size": 544
    },
    "handleHixieUpgrade": {
        "count": 3,
        "size": 264
    },
    "handleHybiUpgrade": {
        "count": 3,
        "size": 264
    },
    "handleMessage": {
        "count": 3,
        "size": 256
    },
    "handleUpgrade": {
        "count": 1,
        "size": 40
    },
    "handled": {
        "count": 1,
        "size": 32
    },
    "handler": {
        "count": 1,
        "size": 32
    },
    "handles": {
        "count": 1,
        "size": 32
    },
    "handoff": {
        "count": 1,
        "size": 32
    },
    "harmony_regexps": {
        "count": 1,
        "size": 40
    },
    "harmony_tostring": {
        "count": 1,
        "size": 40
    },
    "harmony_unicode_regexps": {
        "count": 1,
        "size": 48
    },
    "has": {
        "count": 11,
        "size": 1112
    },
    "has server": {
        "count": 1,
        "size": 40
    },
    "hasAlignedHourOffset": {
        "count": 3,
        "size": 264
    },
    "hasBeenNotifiedProperty": {
        "count": 1,
        "size": 48
    },
    "hasConfigurable": {
        "count": 1,
        "size": 40
    },
    "hasConfigurable_": {
        "count": 1,
        "size": 40
    },
    "hasDebugArg": {
        "count": 1,
        "size": 40
    },
    "hasEnumerable": {
        "count": 1,
        "size": 40
    },
    "hasEnumerable_": {
        "count": 1,
        "size": 40
    },
    "hasGetter": {
        "count": 1,
        "size": 40
    },
    "hasGetter_": {
        "count": 1,
        "size": 40
    },
    "hasKey": {
        "count": 3,
        "size": 248
    },
    "hasMagic": {
        "count": 1,
        "size": 32
    },
    "hasOwn": {
        "count": 1,
        "size": 32
    },
    "hasOwnProp": {
        "count": 3,
        "size": 256
    },
    "hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])": {
        "count": 2,
        "size": 152
    },
    "hasSetImmediate": {
        "count": 1,
        "size": 40
    },
    "hasSetter": {
        "count": 1,
        "size": 40
    },
    "hasSetter_": {
        "count": 1,
        "size": 40
    },
    "hasValue": {
        "count": 1,
        "size": 32
    },
    "hasValue_": {
        "count": 1,
        "size": 40
    },
    "hasWritable": {
        "count": 1,
        "size": 40
    },
    "hasWritable_": {
        "count": 1,
        "size": 40
    },
    "hash": {
        "count": 1,
        "size": 32
    },
    "hash_code_symbol": {
        "count": 2,
        "size": 80
    },
    "have a prototype.": {
        "count": 1,
        "size": 48
    },
    "hcAPI": {
        "count": 1,
        "size": 32
    },
    "head": {
        "count": 1,
        "size": 32
    },
    "headersSent": {
        "count": 1,
        "size": 40
    },
    "headersUrl": {
        "count": 1,
        "size": 40
    },
    "heap": {
        "count": 1,
        "size": 32
    },
    "heap-snapshot": {
        "count": 1,
        "size": 40
    },
    "heap.size.limit": {
        "count": 1,
        "size": 40
    },
    "heapMetrics": {
        "count": 1,
        "size": 40
    },
    "heapTotal": {
        "count": 1,
        "size": 40
    },
    "heapUsed": {
        "count": 1,
        "size": 32
    },
    "heap_node": {
        "count": 1,
        "size": 40
    },
    "heapdump": {
        "count": 1,
        "size": 32
    },
    "heapsnapshot": {
        "count": 1,
        "size": 40
    },
    "hec": {
        "count": 1,
        "size": 32
    },
    "help": {
        "count": 1,
        "size": 32
    },
    "helpers": {
        "count": 1,
        "size": 32
    },
    "hex": {
        "count": 1,
        "size": 32
    },
    "hexSlice": {
        "count": 3,
        "size": 248
    },
    "hexTable": {
        "count": 1,
        "size": 32
    },
    "hexWrite": {
        "count": 3,
        "size": 248
    },
    "hh": {
        "count": 1,
        "size": 32
    },
    "highWaterMark": {
        "count": 1,
        "size": 40
    },
    "hints": {
        "count": 1,
        "size": 32
    },
    "histogram": {
        "count": 1,
        "size": 40
    },
    "histogram-": {
        "count": 1,
        "size": 40
    },
    "hmm": {
        "count": 1,
        "size": 32
    },
    "hmmss": {
        "count": 1,
        "size": 32
    },
    "holders": {
        "count": 1,
        "size": 32
    },
    "holdersRight": {
        "count": 1,
        "size": 40
    },
    "hole": {
        "count": 1,
        "size": 32
    },
    "home/sam/w/sn/strong-supervisor/test/module-app/.statsd.json": {
        "count": 1,
        "size": 144
    },
    "homeDir": {
        "count": 1,
        "size": 32
    },
    "home_object_symbol": {
        "count": 2,
        "size": 96
    },
    "homedir": {
        "count": 1,
        "size": 32
    },
    "homepage": {
        "count": 3,
        "size": 96
    },
    "homepage field must be a string url. Deleted.": {
        "count": 1,
        "size": 72
    },
    "homepage field must start with a protocol.": {
        "count": 1,
        "size": 72
    },
    "hompage": {
        "count": 1,
        "size": 32
    },
    "hookAfter": {
        "count": 1,
        "size": 40
    },
    "hookCallback": {
        "count": 1,
        "size": 40
    },
    "host": {
        "count": 1,
        "size": 32
    },
    "hostEnd": {
        "count": 1,
        "size": 32
    },
    "hostEndingChars": {
        "count": 1,
        "size": 40
    },
    "host_arch": {
        "count": 1,
        "size": 40
    },
    "hostlessProtocol": {
        "count": 1,
        "size": 40
    },
    "hostmaster": {
        "count": 1,
        "size": 40
    },
    "hostname": {
        "count": 1,
        "size": 32
    },
    "hostname must be a string or falsey": {
        "count": 1,
        "size": 64
    },
    "hostnameMaxLen": {
        "count": 1,
        "size": 40
    },
    "hostnamePartPattern": {
        "count": 1,
        "size": 48
    },
    "hostnamePartStart": {
        "count": 1,
        "size": 48
    },
    "hostparts": {
        "count": 1,
        "size": 40
    },
    "hour": {
        "count": 1,
        "size": 32
    },
    "hours": {
        "count": 1,
        "size": 32
    },
    "howMuchToRead": {
        "count": 3,
        "size": 256
    },
    "href": {
        "count": 1,
        "size": 32
    },
    "hrtime": {
        "count": 3,
        "size": 248
    },
    "htmlEscapes": {
        "count": 1,
        "size": 40
    },
    "htmlUnescapes": {
        "count": 1,
        "size": 40
    },
    "http": {
        "count": 2,
        "size": 64
    },
    "http.Client is deprecated.": {
        "count": 1,
        "size": 56
    },
    "http.createClient is deprecated. Use http.request instead.": {
        "count": 1,
        "size": 88
    },
    "http.js": {
        "count": 2,
        "size": 160
    },
    "http:": {
        "count": 1,
        "size": 32
    },
    "httpMetrics": {
        "count": 1,
        "size": 40
    },
    "httpSocketSetup": {
        "count": 3,
        "size": 256
    },
    "http_parser": {
        "count": 1,
        "size": 40
    },
    "https": {
        "count": 2,
        "size": 64
    },
    "https.js": {
        "count": 2,
        "size": 160
    },
    "https:": {
        "count": 1,
        "size": 32
    },
    "https://github.com/RuntimeTools/appmetrics#readme": {
        "count": 1,
        "size": 80
    },
    "https://github.com/RuntimeTools/appmetrics/issues": {
        "count": 1,
        "size": 80
    },
    "https://github.com/moment/moment/issues/1407 for more info.": {
        "count": 1,
        "size": 88
    },
    "https://github.com/strongloop/strong-cluster-control#readme": {
        "count": 1,
        "size": 88
    },
    "https://github.com/strongloop/strong-cluster-control/issues": {
        "count": 1,
        "size": 88
    },
    "https://github.com/strongloop/strong-control-channel#readme": {
        "count": 1,
        "size": 88
    },
    "https://github.com/strongloop/strong-control-channel/issues": {
        "count": 1,
        "size": 88
    },
    "https://github.com/strongloop/strong-debugger#readme": {
        "count": 1,
        "size": 80
    },
    "https://github.com/strongloop/strong-debugger/issues": {
        "count": 1,
        "size": 80
    },
    "https://github.com/strongloop/strong-log-transformer": {
        "count": 1,
        "size": 80
    },
    "https://github.com/strongloop/strong-log-transformer/issues": {
        "count": 1,
        "size": 88
    },
    "https://github.com/strongloop/strong-supervisor": {
        "count": 1,
        "size": 72
    },
    "https://github.com/strongloop/strong-supervisor/issues": {
        "count": 1,
        "size": 80
    },
    "https://nodejs.org/download/release/": {
        "count": 1,
        "size": 64
    },
    "https://nodejs.org/download/release/v4.2.1/node-v4.2.1-headers.tar.gz": {
        "count": 1,
        "size": 96
    },
    "https://nodejs.org/download/release/v4.2.1/node-v4.2.1.tar.gz": {
        "count": 1,
        "size": 88
    },
    "https://registry.npmjs.org/strong-cluster-control/-/strong-cluster-control-2.2.3.tgz": {
        "count": 1,
        "size": 112
    },
    "https://registry.npmjs.org/strong-control-channel/-/strong-control-channel-2.2.2.tgz": {
        "count": 1,
        "size": 112
    },
    "https://registry.npmjs.org/strong-debugger/-/strong-debugger-1.0.0.tgz": {
        "count": 1,
        "size": 96
    },
    "https://registry.npmjs.org/strong-log-transformer/-/strong-log-transformer-1.0.5.tgz": {
        "count": 1,
        "size": 112
    },
    "humanize": {
        "count": 3,
        "size": 248
    },
    "hwm": {
        "count": 1,
        "size": 32
    },
    "hyphenReplace": {
        "count": 3,
        "size": 256
    },
    "hypot": {
        "count": 3,
        "size": 248
    },
    "i": {
        "count": 1,
        "size": 32
    },
    "icu": {
        "count": 1,
        "size": 32
    },
    "icu_data_file": {
        "count": 1,
        "size": 40
    },
    "icu_data_in": {
        "count": 1,
        "size": 40
    },
    "icu_endianness": {
        "count": 1,
        "size": 40
    },
    "icu_gyp_path": {
        "count": 1,
        "size": 40
    },
    "icu_locales": {
        "count": 1,
        "size": 40
    },
    "icu_path": {
        "count": 1,
        "size": 32
    },
    "icu_small": {
        "count": 1,
        "size": 40
    },
    "icu_ver_major": {
        "count": 1,
        "size": 40
    },
    "icudt56l.dat": {
        "count": 1,
        "size": 40
    },
    "id": {
        "count": 1,
        "size": 32
    },
    "idCounter": {
        "count": 1,
        "size": 40
    },
    "identity": {
        "count": 6,
        "size": 608
    },
    "idle": {
        "count": 1,
        "size": 32
    },
    "ids": {
        "count": 1,
        "size": 32
    },
    "idx": {
        "count": 1,
        "size": 32
    },
    "ifError": {
        "count": 1,
        "size": 32
    },
    "ifExists": {
        "count": 3,
        "size": 248
    },
    "ignore": {
        "count": 1,
        "size": 32
    },
    "ignoreCase": {
        "count": 1,
        "size": 40
    },
    "ignoreMap": {
        "count": 3,
        "size": 256
    },
    "illegal access": {
        "count": 1,
        "size": 40
    },
    "illegal argument": {
        "count": 1,
        "size": 40
    },
    "immediate": {
        "count": 1,
        "size": 40
    },
    "immediateQueue": {
        "count": 1,
        "size": 40
    },
    "immediately": {
        "count": 1,
        "size": 40
    },
    "imports": {
        "count": 1,
        "size": 32
    },
    "imul": {
        "count": 3,
        "size": 248
    },
    "in %s": {
        "count": 1,
        "size": 32
    },
    "inRange": {
        "count": 3,
        "size": 248
    },
    "inc": {
        "count": 3,
        "size": 248
    },
    "include": {
        "count": 1,
        "size": 32
    },
    "includeModules": {
        "count": 1,
        "size": 40
    },
    "include_dirs": {
        "count": 1,
        "size": 40
    },
    "includes": {
        "count": 5,
        "size": 464
    },
    "incoming": {
        "count": 1,
        "size": 32
    },
    "inconsistent or invalid data": {
        "count": 1,
        "size": 56
    },
    "incrementCounts": {
        "count": 3,
        "size": 256
    },
    "index": {
        "count": 2,
        "size": 64
    },
    "index.js": {
        "count": 26,
        "size": 840
    },
    "indexBy": {
        "count": 1,
        "size": 32
    },
    "indexOf": {
        "count": 11,
        "size": 1112
    },
    "indexOfBuffer": {
        "count": 3,
        "size": 256
    },
    "indexOfNaN": {
        "count": 3,
        "size": 256
    },
    "indexOfNumber": {
        "count": 3,
        "size": 256
    },
    "indexOfString": {
        "count": 3,
        "size": 256
    },
    "indexes": {
        "count": 1,
        "size": 32
    },
    "indexjs": {
        "count": 3,
        "size": 248
    },
    "inf": {
        "count": 1,
        "size": 32
    },
    "inflate": {
        "count": 1,
        "size": 32
    },
    "inflateRaw": {
        "count": 1,
        "size": 40
    },
    "inflateRawSync": {
        "count": 1,
        "size": 40
    },
    "inflateSync": {
        "count": 1,
        "size": 40
    },
    "inflight": {
        "count": 3,
        "size": 248
    },
    "inflight.js": {
        "count": 1,
        "size": 40
    },
    "info": {
        "count": 1,
        "size": 32
    },
    "infoAccess": {
        "count": 1,
        "size": 40
    },
    "inherit": {
        "count": 1,
        "size": 32
    },
    "inherits": {
        "count": 1,
        "size": 32
    },
    "init": {
        "count": 17,
        "size": 1760
    },
    "init: master?": {
        "count": 1,
        "size": 40
    },
    "initAsClient": {
        "count": 3,
        "size": 256
    },
    "initAsServerClient": {
        "count": 3,
        "size": 264
    },
    "initCloneArray": {
        "count": 3,
        "size": 256
    },
    "initCloneByTag": {
        "count": 3,
        "size": 256
    },
    "initCloneObject": {
        "count": 3,
        "size": 256
    },
    "initRead": {
        "count": 3,
        "size": 248
    },
    "initSocketHandle": {
        "count": 3,
        "size": 256
    },
    "initgroups": {
        "count": 3,
        "size": 256
    },
    "initial": {
        "count": 3,
        "size": 248
    },
    "initialBias": {
        "count": 1,
        "size": 40
    },
    "initialN": {
        "count": 1,
        "size": 32
    },
    "initialise": {
        "count": 3,
        "size": 256
    },
    "initializeBreakIterator": {
        "count": 3,
        "size": 264
    },
    "initializeCollator": {
        "count": 3,
        "size": 264
    },
    "initializeDateTimeFormat": {
        "count": 3,
        "size": 264
    },
    "initializeLocaleList": {
        "count": 3,
        "size": 264
    },
    "initializeNumberFormat": {
        "count": 3,
        "size": 264
    },
    "initialized": {
        "count": 1,
        "size": 40
    },
    "initializer": {
        "count": 1,
        "size": 40
    },
    "initiv": {
        "count": 3,
        "size": 248
    },
    "inject": {
        "count": 1,
        "size": 32
    },
    "injectIdentifiers": {
        "count": 3,
        "size": 264
    },
    "ino": {
        "count": 1,
        "size": 32
    },
    "input": {
        "count": 1,
        "size": 32
    },
    "insert": {
        "count": 1,
        "size": 32
    },
    "inspect": {
        "count": 5,
        "size": 464
    },
    "inspectPromise": {
        "count": 3,
        "size": 256
    },
    "install": {
        "count": 1,
        "size": 32
    },
    "instance": {
        "count": 1,
        "size": 32
    },
    "instances": {
        "count": 1,
        "size": 40
    },
    "instead.": {
        "count": 1,
        "size": 32
    },
    "instrument": {
        "count": 3,
        "size": 256
    },
    "instrumentMethods": {
        "count": 3,
        "size": 264
    },
    "int16Tag": {
        "count": 1,
        "size": 32
    },
    "int32Tag": {
        "count": 1,
        "size": 32
    },
    "int8Tag": {
        "count": 1,
        "size": 32
    },
    "intercept": {
        "count": 1,
        "size": 40
    },
    "intercepted": {
        "count": 3,
        "size": 256
    },
    "intercom": {
        "count": 1,
        "size": 32
    },
    "internal": {
        "count": 3,
        "size": 248
    },
    "internal-statsd:": {
        "count": 1,
        "size": 40
    },
    "internal/": {
        "count": 1,
        "size": 40
    },
    "internal/child_process": {
        "count": 1,
        "size": 48
    },
    "internal/child_process.js": {
        "count": 1,
        "size": 128
    },
    "internal/freelist": {
        "count": 1,
        "size": 48
    },
    "internal/freelist.js": {
        "count": 1,
        "size": 128
    },
    "internal/module": {
        "count": 1,
        "size": 40
    },
    "internal/module.js": {
        "count": 1,
        "size": 128
    },
    "internal/repl": {
        "count": 1,
        "size": 40
    },
    "internal/socket_list": {
        "count": 1,
        "size": 48
    },
    "internal/socket_list.js": {
        "count": 1,
        "size": 128
    },
    "internal/streams/lazy_transform": {
        "count": 1,
        "size": 56
    },
    "internal/streams/lazy_transform.js": {
        "count": 1,
        "size": 128
    },
    "internal/util": {
        "count": 1,
        "size": 40
    },
    "internal/util.js": {
        "count": 1,
        "size": 128
    },
    "internal:": {
        "count": 1,
        "size": 40
    },
    "internalMessage": {
        "count": 1,
        "size": 40
    },
    "internalModule": {
        "count": 1,
        "size": 40
    },
    "internalModuleReadFile": {
        "count": 3,
        "size": 264
    },
    "internalModuleStat": {
        "count": 3,
        "size": 264
    },
    "internalUtil": {
        "count": 1,
        "size": 40
    },
    "internal_on": {
        "count": 3,
        "size": 256
    },
    "interpolate": {
        "count": 1,
        "size": 40
    },
    "intersection": {
        "count": 1,
        "size": 40
    },
    "interval": {
        "count": 1,
        "size": 32
    },
    "intl_impl_object_symbol": {
        "count": 2,
        "size": 96
    },
    "intl_initialized_marker_symbol": {
        "count": 2,
        "size": 112
    },
    "invalid": {
        "count": 1,
        "size": 32
    },
    "invalid argument: family must be 4 or 6": {
        "count": 1,
        "size": 64
    },
    "invalid argument: hints must use valid flags": {
        "count": 1,
        "size": 72
    },
    "invalid arguments: ": {
        "count": 1,
        "size": 48
    },
    "invalid arguments: callback must be passed": {
        "count": 1,
        "size": 72
    },
    "invalid data": {
        "count": 1,
        "size": 40
    },
    "invalid-input": {
        "count": 1,
        "size": 40
    },
    "invalidAt": {
        "count": 3,
        "size": 256
    },
    "invalidDate": {
        "count": 3,
        "size": 256
    },
    "invalidFilename": {
        "count": 1,
        "size": 40
    },
    "invalidFormat": {
        "count": 1,
        "size": 40
    },
    "invalidMonth": {
        "count": 1,
        "size": 40
    },
    "invalidWeekday": {
        "count": 1,
        "size": 40
    },
    "inverse": {
        "count": 1,
        "size": 32
    },
    "invert": {
        "count": 3,
        "size": 248
    },
    "invisible": {
        "count": 1,
        "size": 40
    },
    "invoke": {
        "count": 1,
        "size": 32
    },
    "invokePath": {
        "count": 3,
        "size": 256
    },
    "ip": {
        "count": 1,
        "size": 32
    },
    "ipc": {
        "count": 1,
        "size": 32
    },
    "ipcFd": {
        "count": 1,
        "size": 32
    },
    "ipcctl": {
        "count": 1,
        "size": 32
    },
    "ipv6": {
        "count": 1,
        "size": 32
    },
    "ipv6Hostname": {
        "count": 1,
        "size": 40
    },
    "irq": {
        "count": 1,
        "size": 32
    },
    "is": {
        "count": 3,
        "size": 248
    },
    "isAbsolute": {
        "count": 1,
        "size": 40
    },
    "isAfter": {
        "count": 3,
        "size": 248
    },
    "isAlive": {
        "count": 3,
        "size": 248
    },
    "isAlphaNumeric": {
        "count": 3,
        "size": 256
    },
    "isAppInnerRequire": {
        "count": 3,
        "size": 264
    },
    "isArguments": {
        "count": 5,
        "size": 472
    },
    "isArray": {
        "count": 5,
        "size": 464
    },
    "isArrayLike": {
        "count": 3,
        "size": 256
    },
    "isAry": {
        "count": 1,
        "size": 32
    },
    "isBefore": {
        "count": 3,
        "size": 248
    },
    "isBetween": {
        "count": 3,
        "size": 256
    },
    "isBigEndian": {
        "count": 1,
        "size": 40
    },
    "isBind": {
        "count": 1,
        "size": 32
    },
    "isBindKey": {
        "count": 1,
        "size": 40
    },
    "isBlockDevice": {
        "count": 1,
        "size": 40
    },
    "isBoolean": {
        "count": 5,
        "size": 472
    },
    "isBuffer": {
        "count": 3,
        "size": 248
    },
    "isCharacterDevice": {
        "count": 1,
        "size": 48
    },
    "isClosing": {
        "count": 3,
        "size": 256
    },
    "isCommon": {
        "count": 1,
        "size": 32
    },
    "isConfigurable": {
        "count": 1,
        "size": 40
    },
    "isConnected": {
        "count": 3,
        "size": 256
    },
    "isConstructor": {
        "count": 1,
        "size": 40
    },
    "isContext": {
        "count": 3,
        "size": 256
    },
    "isCorrectlyEncodedName": {
        "count": 3,
        "size": 264
    },
    "isCurry": {
        "count": 1,
        "size": 32
    },
    "isCurryBound": {
        "count": 1,
        "size": 40
    },
    "isCurryRight": {
        "count": 1,
        "size": 40
    },
    "isDST": {
        "count": 1,
        "size": 32
    },
    "isDSTShifted": {
        "count": 1,
        "size": 40
    },
    "isDate": {
        "count": 7,
        "size": 680
    },
    "isDaylightSavingTime": {
        "count": 3,
        "size": 264
    },
    "isDaylightSavingTimeShifted": {
        "count": 3,
        "size": 272
    },
    "isDead": {
        "count": 3,
        "size": 248
    },
    "isDirectory": {
        "count": 1,
        "size": 40
    },
    "isDuration": {
        "count": 3,
        "size": 256
    },
    "isElement": {
        "count": 3,
        "size": 256
    },
    "isEmpty": {
        "count": 5,
        "size": 464
    },
    "isEncoding": {
        "count": 1,
        "size": 40
    },
    "isEnumerable": {
        "count": 1,
        "size": 40
    },
    "isEqual": {
        "count": 3,
        "size": 248
    },
    "isError": {
        "count": 5,
        "size": 464
    },
    "isEval": {
        "count": 1,
        "size": 32
    },
    "isException": {
        "count": 1,
        "size": 40
    },
    "isExtensible": {
        "count": 3,
        "size": 256
    },
    "isFIFO": {
        "count": 1,
        "size": 32
    },
    "isFile": {
        "count": 1,
        "size": 32
    },
    "isFilter": {
        "count": 1,
        "size": 32
    },
    "isFinite": {
        "count": 7,
        "size": 680
    },
    "isFn": {
        "count": 1,
        "size": 32
    },
    "isFrozen": {
        "count": 3,
        "size": 248
    },
    "isFunc": {
        "count": 1,
        "size": 32
    },
    "isFunction": {
        "count": 7,
        "size": 688
    },
    "isIP": {
        "count": 3,
        "size": 248
    },
    "isIPv4": {
        "count": 1,
        "size": 32
    },
    "isIPv6": {
        "count": 1,
        "size": 32
    },
    "isIgnored": {
        "count": 3,
        "size": 256
    },
    "isIndex": {
        "count": 3,
        "size": 248
    },
    "isInitFinished": {
        "count": 5,
        "size": 472
    },
    "isInteger": {
        "count": 3,
        "size": 256
    },
    "isInternal": {
        "count": 1,
        "size": 40
    },
    "isIp": {
        "count": 1,
        "size": 32
    },
    "isIterateeCall": {
        "count": 3,
        "size": 256
    },
    "isKey": {
        "count": 3,
        "size": 248
    },
    "isLaziable": {
        "count": 3,
        "size": 256
    },
    "isLeapYear": {
        "count": 3,
        "size": 256
    },
    "isLegalPort": {
        "count": 3,
        "size": 256
    },
    "isLength": {
        "count": 3,
        "size": 248
    },
    "isLocal": {
        "count": 3,
        "size": 248
    },
    "isMain": {
        "count": 1,
        "size": 32
    },
    "isMapIterator": {
        "count": 3,
        "size": 256
    },
    "isMapKeys": {
        "count": 1,
        "size": 40
    },
    "isMaster": {
        "count": 1,
        "size": 32
    },
    "isMatch": {
        "count": 4,
        "size": 392
    },
    "isMoment": {
        "count": 3,
        "size": 248
    },
    "isNaN": {
        "count": 7,
        "size": 680
    },
    "isNative": {
        "count": 3,
        "size": 248
    },
    "isNotDeepDiveStack": {
        "count": 3,
        "size": 264
    },
    "isNull": {
        "count": 5,
        "size": 464
    },
    "isNullOrUndefined": {
        "count": 3,
        "size": 264
    },
    "isNumber": {
        "count": 9,
        "size": 896
    },
    "isObj": {
        "count": 1,
        "size": 32
    },
    "isObject": {
        "count": 7,
        "size": 680
    },
    "isObjectLike": {
        "count": 3,
        "size": 256
    },
    "isPM": {
        "count": 1,
        "size": 32
    },
    "isPadded": {
        "count": 3,
        "size": 248
    },
    "isPaused": {
        "count": 1,
        "size": 32
    },
    "isPerWorker": {
        "count": 1,
        "size": 40
    },
    "isPipeName": {
        "count": 5,
        "size": 472
    },
    "isPlainObject": {
        "count": 3,
        "size": 256
    },
    "isPrimitive": {
        "count": 3,
        "size": 256
    },
    "isPromise": {
        "count": 3,
        "size": 256
    },
    "isProp": {
        "count": 1,
        "size": 32
    },
    "isProto": {
        "count": 1,
        "size": 32
    },
    "isRegExp": {
        "count": 5,
        "size": 464
    },
    "isResponseMethod": {
        "count": 3,
        "size": 256
    },
    "isRunning": {
        "count": 1,
        "size": 40
    },
    "isSafeInteger": {
        "count": 3,
        "size": 256
    },
    "isSame": {
        "count": 3,
        "size": 248
    },
    "isSameOrAfter": {
        "count": 3,
        "size": 256
    },
    "isSameOrBefore": {
        "count": 3,
        "size": 256
    },
    "isSealed": {
        "count": 3,
        "size": 248
    },
    "isSendMethod": {
        "count": 3,
        "size": 256
    },
    "isSessionReused": {
        "count": 5,
        "size": 472
    },
    "isSetIterator": {
        "count": 3,
        "size": 256
    },
    "isSignal": {
        "count": 3,
        "size": 248
    },
    "isSocket": {
        "count": 1,
        "size": 32
    },
    "isSpace": {
        "count": 3,
        "size": 248
    },
    "isStale": {
        "count": 3,
        "size": 248
    },
    "isStrictComparable": {
        "count": 3,
        "size": 264
    },
    "isString": {
        "count": 5,
        "size": 464
    },
    "isSymbol": {
        "count": 3,
        "size": 248
    },
    "isSymbolicLink": {
        "count": 1,
        "size": 40
    },
    "isTCP": {
        "count": 1,
        "size": 32
    },
    "isTTY": {
        "count": 3,
        "size": 248
    },
    "isToplevel": {
        "count": 1,
        "size": 40
    },
    "isTypedArray": {
        "count": 3,
        "size": 256
    },
    "isUTC": {
        "count": 1,
        "size": 32
    },
    "isUndefined": {
        "count": 7,
        "size": 688
    },
    "isUtc": {
        "count": 3,
        "size": 248
    },
    "isUtcOffset": {
        "count": 3,
        "size": 256
    },
    "isValid": {
        "count": 1,
        "size": 32
    },
    "isValidErrorCode": {
        "count": 1,
        "size": 40
    },
    "isValidLanguageTag": {
        "count": 3,
        "size": 264
    },
    "isValidScopedPackageName": {
        "count": 3,
        "size": 264
    },
    "isValidUTF8": {
        "count": 4,
        "size": 296
    },
    "isView": {
        "count": 3,
        "size": 248
    },
    "isWellFormedCurrencyCode": {
        "count": 3,
        "size": 264
    },
    "isWindows": {
        "count": 1,
        "size": 40
    },
    "isWorker": {
        "count": 1,
        "size": 32
    },
    "isWritable": {
        "count": 1,
        "size": 40
    },
    "isX": {
        "count": 3,
        "size": 248
    },
    "is_debugger_script": {
        "count": 1,
        "size": 48
    },
    "is_valid_packet": {
        "count": 3,
        "size": 256
    },
    "isatty": {
        "count": 1,
        "size": 32
    },
    "iso": {
        "count": 1,
        "size": 32
    },
    "isoDates": {
        "count": 1,
        "size": 32
    },
    "isoRegex": {
        "count": 1,
        "size": 32
    },
    "isoTimes": {
        "count": 1,
        "size": 32
    },
    "isoWeek": {
        "count": 1,
        "size": 32
    },
    "isoWeekYear": {
        "count": 1,
        "size": 40
    },
    "isoWeekday": {
        "count": 1,
        "size": 40
    },
    "isoWeeks": {
        "count": 1,
        "size": 32
    },
    "isoWeeksInYear": {
        "count": 1,
        "size": 40
    },
    "iso_string__abs": {
        "count": 1,
        "size": 40
    },
    "iso_string__toISOString": {
        "count": 3,
        "size": 264
    },
    "isoweek": {
        "count": 1,
        "size": 32
    },
    "isoweekday": {
        "count": 1,
        "size": 40
    },
    "isoweekdays": {
        "count": 1,
        "size": 40
    },
    "isoweeks": {
        "count": 1,
        "size": 32
    },
    "isoweekyear": {
        "count": 1,
        "size": 40
    },
    "isoweekyears": {
        "count": 1,
        "size": 40
    },
    "issuer": {
        "count": 1,
        "size": 32
    },
    "issuerCertificate": {
        "count": 1,
        "size": 48
    },
    "italic": {
        "count": 1,
        "size": 32
    },
    "italics": {
        "count": 3,
        "size": 248
    },
    "item": {
        "count": 1,
        "size": 32
    },
    "items": {
        "count": 1,
        "size": 32
    },
    "iterable": {
        "count": 1,
        "size": 32
    },
    "iteratee": {
        "count": 1,
        "size": 32
    },
    "iteratees": {
        "count": 1,
        "size": 40
    },
    "iterator": {
        "count": 1,
        "size": 32
    },
    "j": {
        "count": 1,
        "size": 32
    },
    "jar.version": {
        "count": 1,
        "size": 40
    },
    "javascript": {
        "count": 1,
        "size": 40
    },
    "javascript:": {
        "count": 1,
        "size": 40
    },
    "jju": {
        "count": 1,
        "size": 32
    },
    "join": {
        "count": 5,
        "size": 464
    },
    "js": {
        "count": 1,
        "size": 32
    },
    "js_stream": {
        "count": 1,
        "size": 40
    },
    "jscs": {
        "count": 1,
        "size": 32
    },
    "jscs . && jshint .": {
        "count": 1,
        "size": 48
    },
    "jshint": {
        "count": 1,
        "size": 32
    },
    "json": {
        "count": 5,
        "size": 464
    },
    "json-parse-helpfulerror": {
        "count": 1,
        "size": 48
    },
    "jsonBuffer": {
        "count": 1,
        "size": 40
    },
    "jsonFormatter": {
        "count": 3,
        "size": 256
    },
    "jsonPath": {
        "count": 1,
        "size": 32
    },
    "k": {
        "count": 1,
        "size": 32
    },
    "kForkFlag": {
        "count": 1,
        "size": 40
    },
    "kFormat": {
        "count": 3,
        "size": 248
    },
    "kIndex": {
        "count": 1,
        "size": 32
    },
    "kLength": {
        "count": 1,
        "size": 32
    },
    "kMath": {
        "count": 1,
        "size": 32
    },
    "kMaxLength": {
        "count": 1,
        "size": 40
    },
    "kMinPoolSpace": {
        "count": 1,
        "size": 40
    },
    "kNoZeroFill": {
        "count": 1,
        "size": 40
    },
    "kOnBody": {
        "count": 2,
        "size": 64
    },
    "kOnExecute": {
        "count": 2,
        "size": 80
    },
    "kOnHeaders": {
        "count": 2,
        "size": 80
    },
    "kOnHeadersComplete": {
        "count": 2,
        "size": 96
    },
    "kOnMessageComplete": {
        "count": 2,
        "size": 96
    },
    "kOnTimeout": {
        "count": 2,
        "size": 80
    },
    "kRangeErrorMessage": {
        "count": 1,
        "size": 48
    },
    "kReadFileBufferLength": {
        "count": 1,
        "size": 48
    },
    "kSignalFlag": {
        "count": 1,
        "size": 40
    },
    "kStringMaxLength": {
        "count": 1,
        "size": 40
    },
    "kTicketKeyAESIndex": {
        "count": 2,
        "size": 96
    },
    "kTicketKeyHMACIndex": {
        "count": 2,
        "size": 96
    },
    "kTicketKeyIVIndex": {
        "count": 2,
        "size": 96
    },
    "kTicketKeyNameIndex": {
        "count": 2,
        "size": 96
    },
    "kTicketKeyReturnIndex": {
        "count": 2,
        "size": 96
    },
    "kebabCase": {
        "count": 1,
        "size": 40
    },
    "keep": {
        "count": 1,
        "size": 32
    },
    "keepAlive": {
        "count": 1,
        "size": 40
    },
    "keepAliveMsecs": {
        "count": 1,
        "size": 40
    },
    "keepEmptyLines": {
        "count": 1,
        "size": 40
    },
    "keepLocalTime": {
        "count": 1,
        "size": 40
    },
    "keepTime": {
        "count": 1,
        "size": 32
    },
    "key": {
        "count": 1,
        "size": 32
    },
    "key2": {
        "count": 1,
        "size": 32
    },
    "keyCounter": {
        "count": 1,
        "size": 40
    },
    "keyFlush": {
        "count": 1,
        "size": 32
    },
    "keyFlushInterval": {
        "count": 1,
        "size": 40
    },
    "keyFor": {
        "count": 3,
        "size": 248
    },
    "keyValueArr": {
        "count": 1,
        "size": 40
    },
    "keys": {
        "count": 7,
        "size": 680
    },
    "keysFunc": {
        "count": 1,
        "size": 32
    },
    "keysIn": {
        "count": 3,
        "size": 248
    },
    "keywords": {
        "count": 1,
        "size": 32
    },
    "keywords should be an array of strings": {
        "count": 2,
        "size": 128
    },
    "kill": {
        "count": 3,
        "size": 248
    },
    "killSignal": {
        "count": 1,
        "size": 40
    },
    "killed": {
        "count": 1,
        "size": 32
    },
    "kk": {
        "count": 1,
        "size": 32
    },
    "knownHard": {
        "count": 1,
        "size": 40
    },
    "l": {
        "count": 2,
        "size": 64
    },
    "label": {
        "count": 1,
        "size": 32
    },
    "labels": {
        "count": 1,
        "size": 32
    },
    "lang": {
        "count": 1,
        "size": 32
    },
    "langData": {
        "count": 1,
        "size": 32
    },
    "last": {
        "count": 3,
        "size": 248
    },
    "lastArg": {
        "count": 1,
        "size": 32
    },
    "lastBufferedRequest": {
        "count": 1,
        "size": 48
    },
    "lastCalled": {
        "count": 1,
        "size": 40
    },
    "lastDay": {
        "count": 1,
        "size": 32
    },
    "lastIndex": {
        "count": 1,
        "size": 40
    },
    "lastIndexOf": {
        "count": 9,
        "size": 904
    },
    "lastMatch": {
        "count": 1,
        "size": 40
    },
    "lastObjectHistogram": {
        "count": 1,
        "size": 48
    },
    "lastParen": {
        "count": 1,
        "size": 40
    },
    "lastSignal": {
        "count": 1,
        "size": 40
    },
    "lastWeek": {
        "count": 1,
        "size": 32
    },
    "last_msg_seen": {
        "count": 1,
        "size": 40
    },
    "latency": {
        "count": 1,
        "size": 32
    },
    "latencyCheck": {
        "count": 1,
        "size": 40
    },
    "latencyCheckInterval": {
        "count": 1,
        "size": 48
    },
    "latencyCheckLoop": {
        "count": 1,
        "size": 40
    },
    "latencyData": {
        "count": 1,
        "size": 40
    },
    "latencyReport": {
        "count": 1,
        "size": 40
    },
    "latencyReportInterval": {
        "count": 1,
        "size": 48
    },
    "latencyReportLoop": {
        "count": 1,
        "size": 48
    },
    "latencyRunning": {
        "count": 1,
        "size": 40
    },
    "lazyClone": {
        "count": 3,
        "size": 256
    },
    "lazyConstants": {
        "count": 1,
        "size": 40
    },
    "lazyReverse": {
        "count": 3,
        "size": 256
    },
    "lazyValue": {
        "count": 3,
        "size": 256
    },
    "lchmod": {
        "count": 1,
        "size": 32
    },
    "lchmodSync": {
        "count": 1,
        "size": 40
    },
    "lchown": {
        "count": 1,
        "size": 32
    },
    "lchownSync": {
        "count": 1,
        "size": 40
    },
    "leak detected. %d %s listeners added. ": {
        "count": 1,
        "size": 64
    },
    "leftContext": {
        "count": 1,
        "size": 40
    },
    "legStreams": {
        "count": 1,
        "size": 40
    },
    "legacy": {
        "count": 3,
        "size": 248
    },
    "legacyNamespace": {
        "count": 1,
        "size": 40
    },
    "len": {
        "count": 1,
        "size": 32
    },
    "length": {
        "count": 1,
        "size": 32
    },
    "length less than watermark": {
        "count": 1,
        "size": 56
    },
    "level": {
        "count": 1,
        "size": 32
    },
    "leveldown": {
        "count": 1,
        "size": 40
    },
    "lib": {
        "count": 2,
        "size": 64
    },
    "lib/async.js": {
        "count": 2,
        "size": 80
    },
    "lib/main.js": {
        "count": 1,
        "size": 40
    },
    "lib/normalize.js": {
        "count": 1,
        "size": 40
    },
    "lib/options": {
        "count": 1,
        "size": 40
    },
    "libraries": {
        "count": 1,
        "size": 40
    },
    "license": {
        "count": 1,
        "size": 32
    },
    "licenses": {
        "count": 2,
        "size": 64
    },
    "limitDepth": {
        "count": 3,
        "size": 256
    },
    "line": {
        "count": 1,
        "size": 32
    },
    "lineCount": {
        "count": 1,
        "size": 40
    },
    "lineEnd": {
        "count": 1,
        "size": 32
    },
    "lineFromPosition": {
        "count": 1,
        "size": 40
    },
    "lineMerger": {
        "count": 3,
        "size": 256
    },
    "line_ends": {
        "count": 1,
        "size": 40
    },
    "line_offset": {
        "count": 1,
        "size": 40
    },
    "lines": {
        "count": 1,
        "size": 32
    },
    "link": {
        "count": 5,
        "size": 464
    },
    "linkSync": {
        "count": 1,
        "size": 32
    },
    "linkTarget": {
        "count": 1,
        "size": 40
    },
    "linux": {
        "count": 1,
        "size": 32
    },
    "list": {
        "count": 1,
        "size": 32
    },
    "listBuckets": {
        "count": 1,
        "size": 40
    },
    "listCapabilities": {
        "count": 3,
        "size": 256
    },
    "listKeys": {
        "count": 1,
        "size": 32
    },
    "listMonthsImpl": {
        "count": 3,
        "size": 256
    },
    "listOnTimeout": {
        "count": 3,
        "size": 256
    },
    "listOnTimeoutNT": {
        "count": 3,
        "size": 256
    },
    "listWeekdaysImpl": {
        "count": 3,
        "size": 256
    },
    "listen": {
        "count": 11,
        "size": 1112
    },
    "listen invalid fd=": {
        "count": 1,
        "size": 48
    },
    "listen on %j": {
        "count": 1,
        "size": 40
    },
    "listen2": {
        "count": 1,
        "size": 32
    },
    "listenAfterLookup": {
        "count": 2,
        "size": 192
    },
    "listenFD": {
        "count": 1,
        "size": 32
    },
    "listener": {
        "count": 1,
        "size": 32
    },
    "listener must be a function": {
        "count": 1,
        "size": 56
    },
    "listenerCount": {
        "count": 3,
        "size": 256
    },
    "listeners": {
        "count": 3,
        "size": 256
    },
    "listening": {
        "count": 3,
        "size": 256
    },
    "listeningOnPort": {
        "count": 1,
        "size": 40
    },
    "lists": {
        "count": 1,
        "size": 32
    },
    "lists__get": {
        "count": 3,
        "size": 256
    },
    "lists__listMonths": {
        "count": 3,
        "size": 264
    },
    "lists__listMonthsShort": {
        "count": 3,
        "size": 264
    },
    "lists__listWeekdays": {
        "count": 3,
        "size": 264
    },
    "lists__listWeekdaysMin": {
        "count": 3,
        "size": 264
    },
    "lists__listWeekdaysShort": {
        "count": 3,
        "size": 264
    },
    "little": {
        "count": 1,
        "size": 32
    },
    "liveWorkerIds": {
        "count": 3,
        "size": 256
    },
    "load": {
        "count": 3,
        "size": 248
    },
    "load ": {
        "count": 1,
        "size": 32
    },
    "load native module ": {
        "count": 1,
        "size": 48
    },
    "loadBackend": {
        "count": 3,
        "size": 256
    },
    "loadLocale": {
        "count": 3,
        "size": 256
    },
    "loadPKCS12": {
        "count": 3,
        "size": 256
    },
    "loadSNI": {
        "count": 3,
        "size": 248
    },
    "loadSession": {
        "count": 7,
        "size": 688
    },
    "loadavg": {
        "count": 1,
        "size": 32
    },
    "loaded": {
        "count": 1,
        "size": 32
    },
    "loading backend: %s": {
        "count": 1,
        "size": 48
    },
    "local": {
        "count": 1,
        "size": 32
    },
    "localAddress": {
        "count": 1,
        "size": 40
    },
    "localAdjust": {
        "count": 1,
        "size": 40
    },
    "localConnect": {
        "count": 1,
        "size": 40
    },
    "localFormattingTokens": {
        "count": 1,
        "size": 48
    },
    "localPort": {
        "count": 1,
        "size": 40
    },
    "local__createLocal": {
        "count": 3,
        "size": 264
    },
    "locale": {
        "count": 3,
        "size": 248
    },
    "localeCompare": {
        "count": 4,
        "size": 400
    },
    "localeData": {
        "count": 3,
        "size": 256
    },
    "localeFirstDayOfWeek": {
        "count": 3,
        "size": 264
    },
    "localeFirstDayOfYear": {
        "count": 3,
        "size": 264
    },
    "localeIsPM": {
        "count": 3,
        "size": 256
    },
    "localeMeridiem": {
        "count": 3,
        "size": 256
    },
    "localeMonths": {
        "count": 3,
        "size": 256
    },
    "localeMonthsParse": {
        "count": 3,
        "size": 264
    },
    "localeMonthsShort": {
        "count": 3,
        "size": 264
    },
    "localeWeek": {
        "count": 3,
        "size": 256
    },
    "localeWeekdays": {
        "count": 3,
        "size": 256
    },
    "localeWeekdaysMin": {
        "count": 3,
        "size": 264
    },
    "localeWeekdaysParse": {
        "count": 3,
        "size": 264
    },
    "localeWeekdaysShort": {
        "count": 3,
        "size": 264
    },
    "locale_calendar__calendar": {
        "count": 3,
        "size": 272
    },
    "locale_locales__getLocale": {
        "count": 3,
        "size": 272
    },
    "locale_locales__getSetGlobalLocale": {
        "count": 3,
        "size": 280
    },
    "locale_locales__listLocales": {
        "count": 3,
        "size": 272
    },
    "locale_set__set": {
        "count": 3,
        "size": 256
    },
    "locales": {
        "count": 1,
        "size": 32
    },
    "localhost": {
        "count": 1,
        "size": 40
    },
    "locationFromLine": {
        "count": 1,
        "size": 40
    },
    "locationFromPosition": {
        "count": 1,
        "size": 48
    },
    "lodash": {
        "count": 3,
        "size": 248
    },
    "lodashFunc": {
        "count": 1,
        "size": 40
    },
    "log": {
        "count": 7,
        "size": 680
    },
    "log %s: log <%s>": {
        "count": 1,
        "size": 40
    },
    "log required": {
        "count": 1,
        "size": 40
    },
    "log10": {
        "count": 3,
        "size": 248
    },
    "log1p": {
        "count": 3,
        "size": 248
    },
    "log2": {
        "count": 3,
        "size": 248
    },
    "log:": {
        "count": 1,
        "size": 32
    },
    "logDecoration": {
        "count": 1,
        "size": 40
    },
    "logEvent": {
        "count": 1,
        "size": 32
    },
    "logFile": {
        "count": 1,
        "size": 32
    },
    "logFn": {
        "count": 1,
        "size": 32
    },
    "logStream": {
        "count": 1,
        "size": 40
    },
    "logger": {
        "count": 1,
        "size": 32
    },
    "logging": {
        "count": 1,
        "size": 32
    },
    "long": {
        "count": 3,
        "size": 248
    },
    "longDateFormat": {
        "count": 3,
        "size": 256
    },
    "looking for ": {
        "count": 1,
        "size": 40
    },
    "lookup": {
        "count": 5,
        "size": 464
    },
    "lookup4": {
        "count": 3,
        "size": 248
    },
    "lookup6": {
        "count": 3,
        "size": 248
    },
    "lookupAndConnect": {
        "count": 3,
        "size": 256
    },
    "lookupMatcher": {
        "count": 3,
        "size": 256
    },
    "lookupService": {
        "count": 1,
        "size": 40
    },
    "lookupSignal": {
        "count": 3,
        "size": 256
    },
    "lookupSupportedLocalesOf": {
        "count": 3,
        "size": 264
    },
    "loopback": {
        "count": 1,
        "size": 32
    },
    "loopback-datasource-juggler": {
        "count": 1,
        "size": 56
    },
    "loopbackDJProbe": {
        "count": 4,
        "size": 360
    },
    "lower": {
        "count": 1,
        "size": 32
    },
    "lowerCase": {
        "count": 1,
        "size": 40
    },
    "lowerProto": {
        "count": 1,
        "size": 40
    },
    "lower_": {
        "count": 1,
        "size": 32
    },
    "lowercase": {
        "count": 1,
        "size": 40
    },
    "loweredCase": {
        "count": 1,
        "size": 40
    },
    "lrtime": {
        "count": 1,
        "size": 32
    },
    "lstat": {
        "count": 3,
        "size": 248
    },
    "lstatSync": {
        "count": 1,
        "size": 40
    },
    "lt": {
        "count": 5,
        "size": 464
    },
    "lte": {
        "count": 7,
        "size": 680
    },
    "ltr": {
        "count": 3,
        "size": 248
    },
    "lts": {
        "count": 1,
        "size": 32
    },
    "lutimes": {
        "count": 1,
        "size": 32
    },
    "lutimesSync": {
        "count": 1,
        "size": 40
    },
    "m": {
        "count": 1,
        "size": 32
    },
    "mStatus": {
        "count": 1,
        "size": 32
    },
    "mac": {
        "count": 1,
        "size": 32
    },
    "magenta": {
        "count": 1,
        "size": 32
    },
    "main": {
        "count": 1,
        "size": 32
    },
    "mainModule": {
        "count": 1,
        "size": 40
    },
    "mainPaths": {
        "count": 1,
        "size": 40
    },
    "major": {
        "count": 3,
        "size": 248
    },
    "make": {
        "count": 3,
        "size": 248
    },
    "makeAbs": {
        "count": 3,
        "size": 248
    },
    "makeAs": {
        "count": 3,
        "size": 248
    },
    "makeAsync": {
        "count": 3,
        "size": 256
    },
    "makeCallback": {
        "count": 5,
        "size": 472
    },
    "makeContext": {
        "count": 3,
        "size": 256
    },
    "makeFormatFunction": {
        "count": 3,
        "size": 264
    },
    "makeGetSet": {
        "count": 3,
        "size": 256
    },
    "makeGetter": {
        "count": 3,
        "size": 256
    },
    "makePackageId": {
        "count": 3,
        "size": 256
    },
    "makeRe": {
        "count": 3,
        "size": 248
    },
    "makeTypoWarning": {
        "count": 3,
        "size": 256
    },
    "makeWarning": {
        "count": 1,
        "size": 40
    },
    "makeres": {
        "count": 3,
        "size": 248
    },
    "man": {
        "count": 1,
        "size": 32
    },
    "mans": {
        "count": 3,
        "size": 248
    },
    "mans_": {
        "count": 3,
        "size": 248
    },
    "map": {
        "count": 11,
        "size": 1112
    },
    "mapDelete": {
        "count": 3,
        "size": 256
    },
    "mapDomain": {
        "count": 3,
        "size": 256
    },
    "mapGet": {
        "count": 3,
        "size": 248
    },
    "mapHas": {
        "count": 3,
        "size": 248
    },
    "mapKeys": {
        "count": 1,
        "size": 32
    },
    "mapLimit": {
        "count": 1,
        "size": 32
    },
    "mapReduce": {
        "count": 1,
        "size": 40
    },
    "mapSeries": {
        "count": 1,
        "size": 40
    },
    "mapSet": {
        "count": 3,
        "size": 248
    },
    "mapTag": {
        "count": 1,
        "size": 32
    },
    "mapValues": {
        "count": 1,
        "size": 40
    },
    "mapper": {
        "count": 1,
        "size": 32
    },
    "mark": {
        "count": 3,
        "size": 248
    },
    "mark-sweep-compact": {
        "count": 1,
        "size": 48
    },
    "mask": {
        "count": 4,
        "size": 280
    },
    "master": {
        "count": 3,
        "size": 96
    },
    "master unset %s": {
        "count": 1,
        "size": 40
    },
    "masterInit": {
        "count": 3,
        "size": 256
    },
    "match": {
        "count": 5,
        "size": 464
    },
    "match1": {
        "count": 1,
        "size": 32
    },
    "match1to2": {
        "count": 1,
        "size": 40
    },
    "match1to3": {
        "count": 1,
        "size": 40
    },
    "match1to4": {
        "count": 1,
        "size": 40
    },
    "match1to6": {
        "count": 1,
        "size": 40
    },
    "match2": {
        "count": 1,
        "size": 32
    },
    "match3": {
        "count": 1,
        "size": 32
    },
    "match3to4": {
        "count": 1,
        "size": 40
    },
    "match4": {
        "count": 1,
        "size": 32
    },
    "match5to6": {
        "count": 1,
        "size": 40
    },
    "match6": {
        "count": 1,
        "size": 32
    },
    "matchMeridiem": {
        "count": 3,
        "size": 256
    },
    "matchOffset": {
        "count": 1,
        "size": 40
    },
    "matchOne": {
        "count": 1,
        "size": 32
    },
    "matchShortOffset": {
        "count": 1,
        "size": 40
    },
    "matchSigned": {
        "count": 1,
        "size": 40
    },
    "matchTimestamp": {
        "count": 1,
        "size": 40
    },
    "matchUnsigned": {
        "count": 1,
        "size": 40
    },
    "matchWord": {
        "count": 1,
        "size": 40
    },
    "matchedFamily": {
        "count": 1,
        "size": 40
    },
    "matches": {
        "count": 3,
        "size": 248
    },
    "matchesProperty": {
        "count": 3,
        "size": 256
    },
    "mathAbs": {
        "count": 1,
        "size": 32
    },
    "max": {
        "count": 5,
        "size": 464
    },
    "max.heap.size": {
        "count": 1,
        "size": 40
    },
    "max.old.space.size": {
        "count": 1,
        "size": 48
    },
    "max.semi.space.size": {
        "count": 1,
        "size": 48
    },
    "maxBuffer": {
        "count": 1,
        "size": 40
    },
    "maxCachedSessions": {
        "count": 1,
        "size": 48
    },
    "maxConnections": {
        "count": 1,
        "size": 40
    },
    "maxFreeSockets": {
        "count": 1,
        "size": 40
    },
    "maxInt": {
        "count": 1,
        "size": 32
    },
    "maxSatisfying": {
        "count": 3,
        "size": 256
    },
    "maxSockets": {
        "count": 1,
        "size": 40
    },
    "maybeCallback": {
        "count": 5,
        "size": 472
    },
    "maybeClose": {
        "count": 3,
        "size": 256
    },
    "maybeDestroy": {
        "count": 3,
        "size": 256
    },
    "maybeInitFinished": {
        "count": 1,
        "size": 48
    },
    "maybeMatch": {
        "count": 3,
        "size": 256
    },
    "maybeReadMore": {
        "count": 3,
        "size": 256
    },
    "maybeReadMore read 0": {
        "count": 1,
        "size": 48
    },
    "maybeReadMore_": {
        "count": 3,
        "size": 256
    },
    "mean": {
        "count": 1,
        "size": 32
    },
    "mean_": {
        "count": 1,
        "size": 32
    },
    "median": {
        "count": 1,
        "size": 32
    },
    "megamorphic_symbol": {
        "count": 2,
        "size": 96
    },
    "members": {
        "count": 1,
        "size": 32
    },
    "memcached": {
        "count": 1,
        "size": 40
    },
    "memoize": {
        "count": 3,
        "size": 248
    },
    "memory": {
        "count": 1,
        "size": 32
    },
    "memoryUsage": {
        "count": 3,
        "size": 256
    },
    "merge": {
        "count": 4,
        "size": 280
    },
    "mergeConfigs": {
        "count": 3,
        "size": 256
    },
    "mergeData": {
        "count": 3,
        "size": 256
    },
    "mergeDefaults": {
        "count": 3,
        "size": 256
    },
    "mergeLines": {
        "count": 1,
        "size": 40
    },
    "mergeMultiline": {
        "count": 1,
        "size": 40
    },
    "meridiem": {
        "count": 3,
        "size": 248
    },
    "meridiemFixWrap": {
        "count": 3,
        "size": 256
    },
    "message": {
        "count": 1,
        "size": 32
    },
    "message cannot be undefined": {
        "count": 1,
        "size": 56
    },
    "message too big": {
        "count": 1,
        "size": 40
    },
    "messageMetrics": {
        "count": 1,
        "size": 40
    },
    "messages": {
        "count": 1,
        "size": 32
    },
    "metaMap": {
        "count": 1,
        "size": 32
    },
    "method": {
        "count": 28,
        "size": 2120
    },
    "methodName": {
        "count": 1,
        "size": 40
    },
    "methodNames": {
        "count": 1,
        "size": 40
    },
    "methodOf": {
        "count": 1,
        "size": 32
    },
    "methodProxy": {
        "count": 17,
        "size": 1264
    },
    "methods": {
        "count": 2,
        "size": 64
    },
    "meths": {
        "count": 1,
        "size": 32
    },
    "metric": {
        "count": 3,
        "size": 248
    },
    "metrics": {
        "count": 1,
        "size": 32
    },
    "metrics endpoints: %j": {
        "count": 1,
        "size": 48
    },
    "metricsEnd": {
        "count": 1,
        "size": 40
    },
    "metricsProbeEnd": {
        "count": 1,
        "size": 40
    },
    "metricsProbeStart": {
        "count": 1,
        "size": 48
    },
    "metricsStart": {
        "count": 1,
        "size": 40
    },
    "metrics_hash": {
        "count": 1,
        "size": 40
    },
    "mg": {
        "count": 1,
        "size": 32
    },
    "microtasksScheduled": {
        "count": 1,
        "size": 48
    },
    "mid": {
        "count": 1,
        "size": 32
    },
    "millisecond": {
        "count": 1,
        "size": 40
    },
    "milliseconds": {
        "count": 1,
        "size": 40
    },
    "min": {
        "count": 5,
        "size": 464
    },
    "minClockStack": {
        "count": 1,
        "size": 40
    },
    "minClockTrace": {
        "count": 1,
        "size": 40
    },
    "minCpuStack": {
        "count": 1,
        "size": 40
    },
    "minCpuTrace": {
        "count": 1,
        "size": 40
    },
    "minimatch": {
        "count": 3,
        "size": 256
    },
    "minimatch.js": {
        "count": 1,
        "size": 40
    },
    "minimist": {
        "count": 1,
        "size": 32
    },
    "minor": {
        "count": 3,
        "size": 248
    },
    "minttl": {
        "count": 1,
        "size": 32
    },
    "minute": {
        "count": 1,
        "size": 32
    },
    "minutes": {
        "count": 1,
        "size": 32
    },
    "misconfigured, cannot be internal and have a backend": {
        "count": 1,
        "size": 80
    },
    "missing path": {
        "count": 1,
        "size": 40
    },
    "missingDescription": {
        "count": 1,
        "size": 48
    },
    "missingProtocolHomepage": {
        "count": 1,
        "size": 48
    },
    "missingReadme": {
        "count": 1,
        "size": 40
    },
    "missingRepository": {
        "count": 1,
        "size": 48
    },
    "mixin": {
        "count": 3,
        "size": 248
    },
    "mkdir": {
        "count": 3,
        "size": 248
    },
    "mkdirSync": {
        "count": 1,
        "size": 40
    },
    "mm": {
        "count": 1,
        "size": 32
    },
    "mocha": {
        "count": 1,
        "size": 32
    },
    "modArgs": {
        "count": 1,
        "size": 32
    },
    "mode": {
        "count": 1,
        "size": 32
    },
    "modeNum": {
        "count": 5,
        "size": 464
    },
    "model": {
        "count": 1,
        "size": 32
    },
    "modern-syslog": {
        "count": 1,
        "size": 40
    },
    "modifyPeople": {
        "count": 3,
        "size": 256
    },
    "module": {
        "count": 1,
        "size": 32
    },
    "module-app": {
        "count": 2,
        "size": 80
    },
    "module-app.samtu.0": {
        "count": 1,
        "size": 48
    },
    "module.js": {
        "count": 2,
        "size": 168
    },
    "moduleExports": {
        "count": 1,
        "size": 40
    },
    "moduleLoadList": {
        "count": 1,
        "size": 40
    },
    "modulePath": {
        "count": 1,
        "size": 40
    },
    "modulePaths": {
        "count": 1,
        "size": 40
    },
    "module_dir": {
        "count": 1,
        "size": 40
    },
    "module_root": {
        "count": 1,
        "size": 40
    },
    "modules": {
        "count": 1,
        "size": 32
    },
    "modules field is deprecated": {
        "count": 1,
        "size": 56
    },
    "modulus": {
        "count": 1,
        "size": 32
    },
    "mom": {
        "count": 1,
        "size": 32
    },
    "moment": {
        "count": 1,
        "size": 32
    },
    "moment construction falls back to js Date. This is ": {
        "count": 1,
        "size": 80
    },
    "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.": {
        "count": 1,
        "size": 168
    },
    "moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548": {
        "count": 1,
        "size": 120
    },
    "moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548": {
        "count": 1,
        "size": 120
    },
    "moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779": {
        "count": 1,
        "size": 136
    },
    "moment.lang is deprecated. Use moment.locale instead.": {
        "count": 1,
        "size": 80
    },
    "moment.langData is deprecated. Use moment.localeData instead.": {
        "count": 1,
        "size": 88
    },
    "momentProperties": {
        "count": 1,
        "size": 40
    },
    "momentPrototype": {
        "count": 1,
        "size": 40
    },
    "momentPrototype__proto": {
        "count": 1,
        "size": 48
    },
    "moment__createInZone": {
        "count": 3,
        "size": 264
    },
    "moment__createUnix": {
        "count": 3,
        "size": 264
    },
    "moment_calendar__calendar": {
        "count": 3,
        "size": 272
    },
    "moment_format__toISOString": {
        "count": 3,
        "size": 272
    },
    "moment_valid__isValid": {
        "count": 3,
        "size": 264
    },
    "momentsDifference": {
        "count": 3,
        "size": 264
    },
    "mongo": {
        "count": 1,
        "size": 32
    },
    "mongodb": {
        "count": 1,
        "size": 32
    },
    "monitor": {
        "count": 1,
        "size": 32
    },
    "monitorQuery": {
        "count": 3,
        "size": 256
    },
    "month": {
        "count": 1,
        "size": 32
    },
    "monthDiff": {
        "count": 3,
        "size": 256
    },
    "months": {
        "count": 1,
        "size": 32
    },
    "months accessor is deprecated. Use month instead": {
        "count": 1,
        "size": 72
    },
    "monthsParse": {
        "count": 1,
        "size": 40
    },
    "monthsRegex": {
        "count": 3,
        "size": 256
    },
    "monthsShort": {
        "count": 1,
        "size": 40
    },
    "monthsShortRegex": {
        "count": 3,
        "size": 256
    },
    "monthsToDays": {
        "count": 3,
        "size": 256
    },
    "moveCursor": {
        "count": 1,
        "size": 40
    },
    "mqlight": {
        "count": 1,
        "size": 32
    },
    "mqtt": {
        "count": 1,
        "size": 32
    },
    "ms": {
        "count": 1,
        "size": 32
    },
    "msecs": {
        "count": 1,
        "size": 32
    },
    "msg": {
        "count": 1,
        "size": 32
    },
    "mtim_msec": {
        "count": 1,
        "size": 40
    },
    "mtime": {
        "count": 1,
        "size": 32
    },
    "multiline": {
        "count": 1,
        "size": 40
    },
    "munge": {
        "count": 3,
        "size": 248
    },
    "my-app": {
        "count": 1,
        "size": 32
    },
    "mysql": {
        "count": 1,
        "size": 32
    },
    "n": {
        "count": 1,
        "size": 32
    },
    "n must be a positive number": {
        "count": 1,
        "size": 56
    },
    "n/a": {
        "count": 1,
        "size": 32
    },
    "nOrig": {
        "count": 1,
        "size": 32
    },
    "nReadingNextTick": {
        "count": 3,
        "size": 256
    },
    "name": {
        "count": 1,
        "size": 32
    },
    "name too short: ": {
        "count": 1,
        "size": 40
    },
    "nameOrSourceURL": {
        "count": 1,
        "size": 40
    },
    "names": {
        "count": 1,
        "size": 32
    },
    "namespace": {
        "count": 1,
        "size": 40
    },
    "namespaces": {
        "count": 1,
        "size": 40
    },
    "nan": {
        "count": 1,
        "size": 32
    },
    "native array-iterator.js": {
        "count": 2,
        "size": 176
    },
    "native array.js": {
        "count": 2,
        "size": 168
    },
    "native arraybuffer.js": {
        "count": 2,
        "size": 176
    },
    "native collection-iterator.js": {
        "count": 2,
        "size": 184
    },
    "native collection.js": {
        "count": 2,
        "size": 176
    },
    "native date.js": {
        "count": 2,
        "size": 168
    },
    "native fdlibm.js": {
        "count": 2,
        "size": 168
    },
    "native generator.js": {
        "count": 2,
        "size": 176
    },
    "native harmony-array.js": {
        "count": 2,
        "size": 176
    },
    "native harmony-object.js": {
        "count": 2,
        "size": 176
    },
    "native harmony-typedarray.js": {
        "count": 2,
        "size": 184
    },
    "native i18n.js": {
        "count": 2,
        "size": 168
    },
    "native iterator-prototype.js": {
        "count": 2,
        "size": 184
    },
    "native json.js": {
        "count": 2,
        "size": 168
    },
    "native math.js": {
        "count": 2,
        "size": 168
    },
    "native messages.js": {
        "count": 2,
        "size": 176
    },
    "native object-observe.js": {
        "count": 2,
        "size": 176
    },
    "native prologue.js": {
        "count": 2,
        "size": 176
    },
    "native promise.js": {
        "count": 2,
        "size": 176
    },
    "native regexp.js": {
        "count": 2,
        "size": 168
    },
    "native runtime.js": {
        "count": 2,
        "size": 176
    },
    "native string-iterator.js": {
        "count": 2,
        "size": 184
    },
    "native string.js": {
        "count": 2,
        "size": 168
    },
    "native symbol.js": {
        "count": 2,
        "size": 168
    },
    "native templates.js": {
        "count": 2,
        "size": 176
    },
    "native typedarray.js": {
        "count": 2,
        "size": 176
    },
    "native uri.js": {
        "count": 2,
        "size": 168
    },
    "native v8natives.js": {
        "count": 2,
        "size": 176
    },
    "native weak-collection.js": {
        "count": 2,
        "size": 184
    },
    "native.library.date": {
        "count": 1,
        "size": 48
    },
    "nativeCeil": {
        "count": 1,
        "size": 40
    },
    "nativeCreate": {
        "count": 1,
        "size": 40
    },
    "nativeEmit": {
        "count": 1,
        "size": 40
    },
    "nativeFloor": {
        "count": 1,
        "size": 40
    },
    "nativeIsArray": {
        "count": 1,
        "size": 40
    },
    "nativeIsFinite": {
        "count": 1,
        "size": 40
    },
    "nativeKeys": {
        "count": 1,
        "size": 40
    },
    "nativeMax": {
        "count": 1,
        "size": 40
    },
    "nativeMin": {
        "count": 1,
        "size": 40
    },
    "nativeModule": {
        "count": 1,
        "size": 40
    },
    "nativeNow": {
        "count": 1,
        "size": 40
    },
    "nativeParseInt": {
        "count": 1,
        "size": 40
    },
    "nativeRandom": {
        "count": 1,
        "size": 40
    },
    "native_bind": {
        "count": 15,
        "size": 1080
    },
    "native_module": {
        "count": 1,
        "size": 40
    },
    "natives": {
        "count": 1,
        "size": 32
    },
    "need": {
        "count": 1,
        "size": 32
    },
    "need readable": {
        "count": 1,
        "size": 40
    },
    "need wrapper function": {
        "count": 1,
        "size": 48
    },
    "needDomainExit": {
        "count": 1,
        "size": 40
    },
    "needDrain": {
        "count": 1,
        "size": 40
    },
    "needFinish": {
        "count": 3,
        "size": 256
    },
    "needMoreData": {
        "count": 3,
        "size": 256
    },
    "needReadable": {
        "count": 1,
        "size": 40
    },
    "needTransform": {
        "count": 1,
        "size": 40
    },
    "negate": {
        "count": 3,
        "size": 248
    },
    "neq": {
        "count": 3,
        "size": 248
    },
    "net": {
        "count": 2,
        "size": 64
    },
    "net.Native": {
        "count": 1,
        "size": 40
    },
    "net.Server": {
        "count": 1,
        "size": 40
    },
    "net.Socket": {
        "count": 1,
        "size": 40
    },
    "net.js": {
        "count": 2,
        "size": 160
    },
    "netmask": {
        "count": 1,
        "size": 32
    },
    "networkInterfaces": {
        "count": 1,
        "size": 48
    },
    "new.target": {
        "count": 1,
        "size": 40
    },
    "newFunc": {
        "count": 1,
        "size": 32
    },
    "newHandle": {
        "count": 3,
        "size": 256
    },
    "newListener": {
        "count": 1,
        "size": 40
    },
    "newSessionDone": {
        "count": 5,
        "size": 472
    },
    "newconn": {
        "count": 1,
        "size": 32
    },
    "newlen": {
        "count": 1,
        "size": 32
    },
    "newline-json": {
        "count": 1,
        "size": 40
    },
    "newpart": {
        "count": 1,
        "size": 32
    },
    "next": {
        "count": 13,
        "size": 1328
    },
    "nextDay": {
        "count": 1,
        "size": 32
    },
    "nextEventId": {
        "count": 1,
        "size": 40
    },
    "nextPartRe": {
        "count": 1,
        "size": 40
    },
    "nextRequestId": {
        "count": 1,
        "size": 40
    },
    "nextTick": {
        "count": 3,
        "size": 248
    },
    "nextTickQueue": {
        "count": 1,
        "size": 40
    },
    "nextWeek": {
        "count": 1,
        "size": 32
    },
    "nice": {
        "count": 1,
        "size": 32
    },
    "nlink": {
        "count": 1,
        "size": 32
    },
    "no": {
        "count": 1,
        "size": 32
    },
    "no parentctl": {
        "count": 1,
        "size": 40
    },
    "no writecb in Transform class": {
        "count": 1,
        "size": 56
    },
    "noConflict": {
        "count": 3,
        "size": 256
    },
    "noDecode": {
        "count": 1,
        "size": 32
    },
    "noDeprecation": {
        "count": 1,
        "size": 40
    },
    "noParameterMethods": {
        "count": 1,
        "size": 48
    },
    "no_interceptor_result_sentinel": {
        "count": 1,
        "size": 56
    },
    "node": {
        "count": 2,
        "size": 64
    },
    "node cluster API wrapper and extensions": {
        "count": 1,
        "size": 64
    },
    "node download_licenses.js && node download_binaries.js && node-gyp rebuild": {
        "count": 1,
        "size": 104
    },
    "node server.js": {
        "count": 1,
        "size": 40
    },
    "node tests/test_runner.js": {
        "count": 1,
        "size": 56
    },
    "node-gyp": {
        "count": 1,
        "size": 32
    },
    "node-gyp rebuild": {
        "count": 1,
        "size": 40
    },
    "node-hc": {
        "count": 1,
        "size": 32
    },
    "node-heapdump: unrecognized option:": {
        "count": 1,
        "size": 64
    },
    "node.js": {
        "count": 2,
        "size": 160
    },
    "node.js not compiled with openssl crypto support.": {
        "count": 1,
        "size": 80
    },
    "nodePath": {
        "count": 1,
        "size": 32
    },
    "nodeType": {
        "count": 1,
        "size": 32
    },
    "nodeVersion": {
        "count": 1,
        "size": 40
    },
    "node_byteorder": {
        "count": 1,
        "size": 40
    },
    "node_install_npm": {
        "count": 1,
        "size": 40
    },
    "node_modules": {
        "count": 1,
        "size": 40
    },
    "node_prefix": {
        "count": 1,
        "size": 40
    },
    "node_release_urlbase": {
        "count": 1,
        "size": 48
    },
    "node_shared_http_parser": {
        "count": 1,
        "size": 48
    },
    "node_shared_libuv": {
        "count": 1,
        "size": 48
    },
    "node_shared_openssl": {
        "count": 1,
        "size": 48
    },
    "node_shared_zlib": {
        "count": 1,
        "size": 40
    },
    "node_tag": {
        "count": 1,
        "size": 32
    },
    "node_use_dtrace": {
        "count": 1,
        "size": 40
    },
    "node_use_etw": {
        "count": 1,
        "size": 40
    },
    "node_use_lttng": {
        "count": 1,
        "size": 40
    },
    "node_use_openssl": {
        "count": 1,
        "size": 40
    },
    "node_use_perfctr": {
        "count": 1,
        "size": 40
    },
    "nofork": {
        "count": 1,
        "size": 32
    },
    "nonArrayBundleDependencies": {
        "count": 1,
        "size": 56
    },
    "nonArrayFiles": {
        "count": 1,
        "size": 40
    },
    "nonArrayKeywords": {
        "count": 1,
        "size": 40
    },
    "nonDependencyBundleDependency": {
        "count": 1,
        "size": 56
    },
    "nonEmailBugsEmailField": {
        "count": 1,
        "size": 48
    },
    "nonEmailUrlBugsString": {
        "count": 1,
        "size": 48
    },
    "nonHostChars": {
        "count": 1,
        "size": 40
    },
    "nonInternalExists": {
        "count": 1,
        "size": 48
    },
    "nonObjectDependencies": {
        "count": 1,
        "size": 48
    },
    "nonObjectScripts": {
        "count": 1,
        "size": 40
    },
    "nonStringBundleDependency": {
        "count": 1,
        "size": 56
    },
    "nonStringDependency": {
        "count": 1,
        "size": 48
    },
    "nonStringDescription": {
        "count": 1,
        "size": 48
    },
    "nonStringKeyword": {
        "count": 1,
        "size": 40
    },
    "nonStringScript": {
        "count": 1,
        "size": 40
    },
    "nonUrlBugsUrlField": {
        "count": 1,
        "size": 48
    },
    "nonUrlHomepage": {
        "count": 1,
        "size": 40
    },
    "none": {
        "count": 1,
        "size": 32
    },
    "nonexistent_symbol": {
        "count": 2,
        "size": 96
    },
    "nonextensible_symbol": {
        "count": 2,
        "size": 96
    },
    "noop": {
        "count": 10,
        "size": 1040
    },
    "nop": {
        "count": 5,
        "size": 464
    },
    "normal": {
        "count": 1,
        "size": 32
    },
    "normal_ic_symbol": {
        "count": 2,
        "size": 80
    },
    "normalize": {
        "count": 8,
        "size": 832
    },
    "normalize-package-data": {
        "count": 1,
        "size": 48
    },
    "normalizeArray": {
        "count": 3,
        "size": 256
    },
    "normalizeConnectArgs": {
        "count": 5,
        "size": 480
    },
    "normalizeData": {
        "count": 1,
        "size": 40
    },
    "normalizeExecArgs": {
        "count": 3,
        "size": 264
    },
    "normalizeLocale": {
        "count": 3,
        "size": 256
    },
    "normalizeObjectUnits": {
        "count": 3,
        "size": 264
    },
    "normalizeParams": {
        "count": 1,
        "size": 40
    },
    "normalizeSpawnArguments": {
        "count": 3,
        "size": 264
    },
    "normalizeUNCRoot": {
        "count": 3,
        "size": 256
    },
    "normalizeUnits": {
        "count": 3,
        "size": 256
    },
    "nosignal": {
        "count": 2,
        "size": 64
    },
    "not any data, keep waiting": {
        "count": 1,
        "size": 56
    },
    "not find": {
        "count": 4,
        "size": 248
    },
    "not-basic": {
        "count": 1,
        "size": 40
    },
    "notDeepEqual": {
        "count": 3,
        "size": 256
    },
    "notDeepStrictEqual": {
        "count": 3,
        "size": 264
    },
    "notEqual": {
        "count": 3,
        "size": 248
    },
    "notHost": {
        "count": 1,
        "size": 32
    },
    "notId": {
        "count": 3,
        "size": 248
    },
    "notStrictEqual": {
        "count": 3,
        "size": 256
    },
    "notification": {
        "count": 1,
        "size": 40
    },
    "notify": {
        "count": 17,
        "size": 1688
    },
    "notify %j: %s": {
        "count": 1,
        "size": 40
    },
    "notify %s": {
        "count": 1,
        "size": 40
    },
    "notify: ipcctl? %j %s": {
        "count": 1,
        "size": 48
    },
    "notifyStarted": {
        "count": 1,
        "size": 40
    },
    "notifyStatus": {
        "count": 3,
        "size": 256
    },
    "now": {
        "count": 5,
        "size": 464
    },
    "npm-ls": {
        "count": 1,
        "size": 32
    },
    "npmls": {
        "count": 1,
        "size": 32
    },
    "nread": {
        "count": 1,
        "size": 32
    },
    "nsname": {
        "count": 1,
        "size": 32
    },
    "null": {
        "count": 1,
        "size": 32
    },
    "null or undefined.": {
        "count": 1,
        "size": 48
    },
    "nullCallback": {
        "count": 3,
        "size": 256
    },
    "nullCheck": {
        "count": 5,
        "size": 472
    },
    "nullInput": {
        "count": 1,
        "size": 40
    },
    "nullProtoObject": {
        "count": 3,
        "size": 256
    },
    "numInThreshold": {
        "count": 1,
        "size": 40
    },
    "number": {
        "count": 48,
        "size": 784
    },
    "number.of.processors": {
        "count": 1,
        "size": 48
    },
    "numberTag": {
        "count": 1,
        "size": 40
    },
    "numberformat": {
        "count": 1,
        "size": 40
    },
    "numeric": {
        "count": 3,
        "size": 248
    },
    "o": {
        "count": 1,
        "size": 32
    },
    "oSF: ended, destroy": {
        "count": 1,
        "size": 48
    },
    "oSF: not ended, call shutdown()": {
        "count": 1,
        "size": 56
    },
    "obj": {
        "count": 1,
        "size": 32
    },
    "objEquiv": {
        "count": 3,
        "size": 248
    },
    "objToString": {
        "count": 1,
        "size": 40
    },
    "object": {
        "count": 5,
        "size": 296
    },
    "object-tracking": {
        "count": 1,
        "size": 40
    },
    "object.": {
        "count": 1,
        "size": 32
    },
    "objectCounts": {
        "count": 1,
        "size": 40
    },
    "objectFunc": {
        "count": 1,
        "size": 40
    },
    "objectMode": {
        "count": 1,
        "size": 40
    },
    "objectProto": {
        "count": 1,
        "size": 40
    },
    "objectTag": {
        "count": 1,
        "size": 40
    },
    "objectToString": {
        "count": 3,
        "size": 256
    },
    "objectTrackingCallbackInterval": {
        "count": 1,
        "size": 56
    },
    "objectTrackingEnabled": {
        "count": 1,
        "size": 48
    },
    "objectTypes": {
        "count": 1,
        "size": 40
    },
    "objectifier": {
        "count": 3,
        "size": 256
    },
    "objectify": {
        "count": 7,
        "size": 544
    },
    "objectifyDeps": {
        "count": 3,
        "size": 256
    },
    "objects": {
        "count": 1,
        "size": 32
    },
    "observe": {
        "count": 5,
        "size": 464
    },
    "observed_symbol": {
        "count": 2,
        "size": 80
    },
    "of": {
        "count": 5,
        "size": 464
    },
    "off": {
        "count": 1,
        "size": 32
    },
    "offer": {
        "count": 1,
        "size": 32
    },
    "offset": {
        "count": 3,
        "size": 248
    },
    "offsetFromString": {
        "count": 3,
        "size": 256
    },
    "ok": {
        "count": 3,
        "size": 248
    },
    "oldDash": {
        "count": 1,
        "size": 32
    },
    "oldLocale": {
        "count": 1,
        "size": 40
    },
    "old_timestamp": {
        "count": 1,
        "size": 40
    },
    "omit": {
        "count": 1,
        "size": 32
    },
    "on": {
        "count": 9,
        "size": 824
    },
    "on worker %s fork": {
        "count": 1,
        "size": 48
    },
    "on,profiling_node_subsystem": {
        "count": 1,
        "size": 56
    },
    "onCryptoStreamEnd": {
        "count": 3,
        "size": 264
    },
    "onCryptoStreamFinish": {
        "count": 3,
        "size": 264
    },
    "onEndNT": {
        "count": 3,
        "size": 248
    },
    "onEofChunk": {
        "count": 3,
        "size": 256
    },
    "onErrorNT": {
        "count": 3,
        "size": 256
    },
    "onExit": {
        "count": 3,
        "size": 248
    },
    "onFork": {
        "count": 3,
        "size": 248
    },
    "onMessage": {
        "count": 3,
        "size": 256
    },
    "onNotification": {
        "count": 3,
        "size": 256
    },
    "onRequest": {
        "count": 5,
        "size": 472
    },
    "onServerResponseClose": {
        "count": 3,
        "size": 264
    },
    "onSocket": {
        "count": 1,
        "size": 32
    },
    "onSocketEnd": {
        "count": 3,
        "size": 256
    },
    "onSocketFinish": {
        "count": 3,
        "size": 256
    },
    "onSocketNT": {
        "count": 3,
        "size": 256
    },
    "onSocketPause": {
        "count": 3,
        "size": 256
    },
    "onSocketResume": {
        "count": 3,
        "size": 256
    },
    "onStart": {
        "count": 3,
        "size": 248
    },
    "once": {
        "count": 13,
        "size": 1328
    },
    "once.js": {
        "count": 2,
        "size": 64
    },
    "oncertcb": {
        "count": 3,
        "size": 248
    },
    "onchange": {
        "count": 1,
        "size": 32
    },
    "onclienthello": {
        "count": 5,
        "size": 472
    },
    "onclose": {
        "count": 35,
        "size": 2696
    },
    "oncomplete": {
        "count": 1,
        "size": 40
    },
    "onconnection": {
        "count": 4,
        "size": 296
    },
    "ondata": {
        "count": 35,
        "size": 2696
    },
    "ondone": {
        "count": 1,
        "size": 32
    },
    "ondrain": {
        "count": 24,
        "size": 1832
    },
    "onend": {
        "count": 35,
        "size": 2696
    },
    "onerror": {
        "count": 33,
        "size": 2480
    },
    "onexit": {
        "count": 1,
        "size": 32
    },
    "onfinish": {
        "count": 12,
        "size": 896
    },
    "onhandshakedone": {
        "count": 5,
        "size": 472
    },
    "onhandshakestart": {
        "count": 5,
        "size": 472
    },
    "online": {
        "count": 4,
        "size": 392
    },
    "onlookup": {
        "count": 3,
        "size": 248
    },
    "onlookupall": {
        "count": 3,
        "size": 256
    },
    "onlookupservice": {
        "count": 3,
        "size": 256
    },
    "onlyFileStackRegex": {
        "count": 1,
        "size": 48
    },
    "onlyFuncStackRegex": {
        "count": 1,
        "size": 48
    },
    "only_once": {
        "count": 5,
        "size": 472
    },
    "onmessage": {
        "count": 3,
        "size": 256
    },
    "onnewsession": {
        "count": 5,
        "size": 472
    },
    "onnewsessiondone": {
        "count": 1,
        "size": 40
    },
    "onocspresponse": {
        "count": 5,
        "size": 472
    },
    "onopen": {
        "count": 1,
        "size": 32
    },
    "onread": {
        "count": 4,
        "size": 280
    },
    "onreadstart": {
        "count": 1,
        "size": 40
    },
    "onreadstop": {
        "count": 1,
        "size": 40
    },
    "onresolve": {
        "count": 3,
        "size": 256
    },
    "onselect": {
        "count": 1,
        "size": 32
    },
    "onshutdown": {
        "count": 1,
        "size": 40
    },
    "onsignal": {
        "count": 1,
        "size": 32
    },
    "onstop": {
        "count": 1,
        "size": 32
    },
    "onticketkeycallback": {
        "count": 1,
        "size": 48
    },
    "ontimeout": {
        "count": 1,
        "size": 40
    },
    "onunpipe": {
        "count": 12,
        "size": 896
    },
    "onwrite": {
        "count": 3,
        "size": 248
    },
    "onwriteDrain": {
        "count": 3,
        "size": 256
    },
    "onwriteError": {
        "count": 3,
        "size": 256
    },
    "onwriteStateUpdate": {
        "count": 3,
        "size": 264
    },
    "opcodes": {
        "count": 1,
        "size": 32
    },
    "opcodes.1": {
        "count": 3,
        "size": 120
    },
    "opcodes.10": {
        "count": 3,
        "size": 120
    },
    "opcodes.2": {
        "count": 3,
        "size": 120
    },
    "opcodes.8": {
        "count": 3,
        "size": 120
    },
    "opcodes.9": {
        "count": 3,
        "size": 120
    },
    "open": {
        "count": 11,
        "size": 1112
    },
    "openStdin": {
        "count": 1,
        "size": 40
    },
    "openSync": {
        "count": 1,
        "size": 32
    },
    "openssl": {
        "count": 1,
        "size": 32
    },
    "openssl_fips": {
        "count": 1,
        "size": 40
    },
    "openssl_no_asm": {
        "count": 1,
        "size": 40
    },
    "operationName": {
        "count": 1,
        "size": 40
    },
    "opt": {
        "count": 1,
        "size": 32
    },
    "optimist": {
        "count": 1,
        "size": 32
    },
    "option": {
        "count": 1,
        "size": 32
    },
    "optionalDependencies": {
        "count": 1,
        "size": 48
    },
    "options": {
        "count": 1,
        "size": 32
    },
    "options argument must be an object": {
        "count": 1,
        "size": 64
    },
    "optionsAndCallbackMethods": {
        "count": 1,
        "size": 56
    },
    "opts": {
        "count": 1,
        "size": 32
    },
    "oracle": {
        "count": 1,
        "size": 32
    },
    "oracledb": {
        "count": 1,
        "size": 32
    },
    "order": {
        "count": 1,
        "size": 32
    },
    "ordinal": {
        "count": 3,
        "size": 248
    },
    "ordinalParse": {
        "count": 1,
        "size": 40
    },
    "orig": {
        "count": 1,
        "size": 32
    },
    "origCwd": {
        "count": 1,
        "size": 32
    },
    "origPST": {
        "count": 1,
        "size": 32
    },
    "origSTL": {
        "count": 1,
        "size": 32
    },
    "origin": {
        "count": 1,
        "size": 32
    },
    "original": {
        "count": 1,
        "size": 32
    },
    "originalClose": {
        "count": 1,
        "size": 40
    },
    "originalCloseSync": {
        "count": 1,
        "size": 48
    },
    "originalOpen": {
        "count": 1,
        "size": 40
    },
    "originalReaddir": {
        "count": 1,
        "size": 40
    },
    "os": {
        "count": 2,
        "size": 64
    },
    "os.arch": {
        "count": 1,
        "size": 32
    },
    "os.getNetworkInterfaces is deprecated. ": {
        "count": 1,
        "size": 64
    },
    "os.js": {
        "count": 2,
        "size": 160
    },
    "os.name": {
        "count": 1,
        "size": 32
    },
    "os.version": {
        "count": 1,
        "size": 40
    },
    "osF: not yet connected": {
        "count": 1,
        "size": 48
    },
    "osVersion": {
        "count": 1,
        "size": 40
    },
    "othIndex": {
        "count": 1,
        "size": 32
    },
    "othLength": {
        "count": 1,
        "size": 40
    },
    "otherThingsToFix": {
        "count": 1,
        "size": 40
    },
    "out": {
        "count": 1,
        "size": 32
    },
    "outLog": {
        "count": 1,
        "size": 32
    },
    "output": {
        "count": 1,
        "size": 32
    },
    "outside": {
        "count": 3,
        "size": 248
    },
    "overflow": {
        "count": 1,
        "size": 32
    },
    "ownProp": {
        "count": 3,
        "size": 248
    },
    "owner": {
        "count": 2,
        "size": 64
    },
    "p": {
        "count": 1,
        "size": 32
    },
    "pSlice": {
        "count": 1,
        "size": 32
    },
    "package.json": {
        "count": 1,
        "size": 40
    },
    "packageMainCache": {
        "count": 1,
        "size": 40
    },
    "packet": {
        "count": 3,
        "size": 248
    },
    "packets_received": {
        "count": 1,
        "size": 40
    },
    "pad": {
        "count": 5,
        "size": 464
    },
    "padLeft": {
        "count": 1,
        "size": 32
    },
    "padRight": {
        "count": 1,
        "size": 32
    },
    "padded": {
        "count": 1,
        "size": 32
    },
    "pairs": {
        "count": 3,
        "size": 248
    },
    "parallel": {
        "count": 1,
        "size": 32
    },
    "parallelLimit": {
        "count": 1,
        "size": 40
    },
    "params": {
        "count": 3,
        "size": 248
    },
    "parent": {
        "count": 1,
        "size": 32
    },
    "parent %d attaching to child %d": {
        "count": 1,
        "size": 56
    },
    "parentCtl": {
        "count": 1,
        "size": 40
    },
    "parentIdPath": {
        "count": 1,
        "size": 40
    },
    "parentLocale": {
        "count": 1,
        "size": 40
    },
    "parentLocaleUndefined": {
        "count": 1,
        "size": 48
    },
    "parse": {
        "count": 18,
        "size": 1904
    },
    "parseCertString": {
        "count": 3,
        "size": 256
    },
    "parseCommaParts": {
        "count": 3,
        "size": 256
    },
    "parseComparator": {
        "count": 3,
        "size": 256
    },
    "parseDate": {
        "count": 3,
        "size": 256
    },
    "parseError": {
        "count": 3,
        "size": 256
    },
    "parseExtension": {
        "count": 3,
        "size": 256
    },
    "parseFloat": {
        "count": 3,
        "size": 256
    },
    "parseGitHubURL": {
        "count": 1,
        "size": 40
    },
    "parseHost": {
        "count": 1,
        "size": 40
    },
    "parseIndex": {
        "count": 3,
        "size": 256
    },
    "parseInt": {
        "count": 5,
        "size": 464
    },
    "parseIso": {
        "count": 3,
        "size": 248
    },
    "parseJson": {
        "count": 3,
        "size": 256
    },
    "parseMs": {
        "count": 3,
        "size": 248
    },
    "parseNegate": {
        "count": 3,
        "size": 256
    },
    "parseNumber": {
        "count": 3,
        "size": 256
    },
    "parsePerson": {
        "count": 3,
        "size": 256
    },
    "parseQueryString": {
        "count": 1,
        "size": 40
    },
    "parseRange": {
        "count": 1,
        "size": 40
    },
    "parseTwoDigitYear": {
        "count": 1,
        "size": 48
    },
    "parseWeekday": {
        "count": 3,
        "size": 256
    },
    "parseZone": {
        "count": 1,
        "size": 40
    },
    "parsedDateParts": {
        "count": 1,
        "size": 40
    },
    "parsedObj": {
        "count": 1,
        "size": 40
    },
    "parsedParts": {
        "count": 1,
        "size": 40
    },
    "parserOnBody": {
        "count": 3,
        "size": 256
    },
    "parserOnHeaders": {
        "count": 3,
        "size": 256
    },
    "parserOnHeadersComplete": {
        "count": 3,
        "size": 264
    },
    "parserOnIncomingClient": {
        "count": 3,
        "size": 264
    },
    "parserOnMessageComplete": {
        "count": 3,
        "size": 264
    },
    "parsers": {
        "count": 1,
        "size": 32
    },
    "parsingFlags": {
        "count": 3,
        "size": 256
    },
    "part": {
        "count": 1,
        "size": 32
    },
    "partial": {
        "count": 3,
        "size": 248
    },
    "partialFunc": {
        "count": 1,
        "size": 40
    },
    "partialRight": {
        "count": 1,
        "size": 40
    },
    "partials": {
        "count": 1,
        "size": 32
    },
    "partialsRight": {
        "count": 1,
        "size": 40
    },
    "partition": {
        "count": 1,
        "size": 40
    },
    "parts": {
        "count": 1,
        "size": 32
    },
    "passThrough": {
        "count": 2,
        "size": 184
    },
    "passThroughWrite": {
        "count": 3,
        "size": 256
    },
    "past": {
        "count": 1,
        "size": 32
    },
    "pastFuture": {
        "count": 3,
        "size": 256
    },
    "patch": {
        "count": 7,
        "size": 680
    },
    "patch failed: %s on %j": {
        "count": 1,
        "size": 48
    },
    "patchLchmod": {
        "count": 3,
        "size": 256
    },
    "patchLutimes": {
        "count": 3,
        "size": 256
    },
    "path": {
        "count": 2,
        "size": 64
    },
    "path must be a string": {
        "count": 1,
        "size": 48
    },
    "path-is-absolute": {
        "count": 1,
        "size": 40
    },
    "path.js": {
        "count": 2,
        "size": 160
    },
    "pathModule": {
        "count": 1,
        "size": 40
    },
    "pathname": {
        "count": 1,
        "size": 32
    },
    "paths": {
        "count": 1,
        "size": 32
    },
    "pause": {
        "count": 3,
        "size": 248
    },
    "pauseOnConnect": {
        "count": 1,
        "size": 40
    },
    "pauseOnCreate": {
        "count": 1,
        "size": 40
    },
    "paused": {
        "count": 1,
        "size": 32
    },
    "pauser": {
        "count": 3,
        "size": 248
    },
    "pbkdf2": {
        "count": 3,
        "size": 248
    },
    "pbkdf2Sync": {
        "count": 1,
        "size": 40
    },
    "pct": {
        "count": 1,
        "size": 32
    },
    "pctThreshold": {
        "count": 1,
        "size": 40
    },
    "peek": {
        "count": 3,
        "size": 248
    },
    "pendingUnhandledRejections": {
        "count": 1,
        "size": 56
    },
    "pendingcb": {
        "count": 1,
        "size": 40
    },
    "people": {
        "count": 1,
        "size": 32
    },
    "percentThreshold": {
        "count": 1,
        "size": 40
    },
    "performChange": {
        "count": 3,
        "size": 256
    },
    "permessage-deflate": {
        "count": 1,
        "size": 48
    },
    "pg": {
        "count": 1,
        "size": 32
    },
    "physical": {
        "count": 1,
        "size": 32
    },
    "physicalFree": {
        "count": 1,
        "size": 40
    },
    "physicalTotal": {
        "count": 1,
        "size": 40
    },
    "physicalUsed": {
        "count": 1,
        "size": 40
    },
    "physical_free": {
        "count": 1,
        "size": 40
    },
    "physical_total": {
        "count": 1,
        "size": 40
    },
    "physical_used": {
        "count": 1,
        "size": 40
    },
    "pick": {
        "count": 1,
        "size": 32
    },
    "pickBy": {
        "count": 3,
        "size": 248
    },
    "pickByArray": {
        "count": 3,
        "size": 256
    },
    "pickByCallback": {
        "count": 3,
        "size": 256
    },
    "pid": {
        "count": 1,
        "size": 32
    },
    "pidfile": {
        "count": 1,
        "size": 32
    },
    "ping": {
        "count": 3,
        "size": 248
    },
    "pipe": {
        "count": 3,
        "size": 248
    },
    "pipe count=%d opts=%j": {
        "count": 1,
        "size": 48
    },
    "pipe resume": {
        "count": 1,
        "size": 40
    },
    "pipeCloseNT": {
        "count": 3,
        "size": 256
    },
    "pipeName": {
        "count": 3,
        "size": 248
    },
    "pipeOnDrain": {
        "count": 3,
        "size": 256
    },
    "pipeOpts": {
        "count": 1,
        "size": 32
    },
    "pipe_wrap": {
        "count": 1,
        "size": 40
    },
    "pipes": {
        "count": 1,
        "size": 32
    },
    "pipesCount": {
        "count": 1,
        "size": 40
    },
    "pkg": {
        "count": 1,
        "size": 32
    },
    "pkgApp": {
        "count": 1,
        "size": 32
    },
    "pkgStart": {
        "count": 1,
        "size": 32
    },
    "placeholder": {
        "count": 1,
        "size": 40
    },
    "plant": {
        "count": 1,
        "size": 32
    },
    "platform": {
        "count": 1,
        "size": 32
    },
    "pluck": {
        "count": 3,
        "size": 248
    },
    "plugins": {
        "count": 1,
        "size": 32
    },
    "plural": {
        "count": 3,
        "size": 248
    },
    "pm": {
        "count": 3,
        "size": 96
    },
    "policy violation": {
        "count": 1,
        "size": 40
    },
    "polyfills": {
        "count": 1,
        "size": 40
    },
    "pong": {
        "count": 1,
        "size": 32
    },
    "pool": {
        "count": 1,
        "size": 32
    },
    "poolOffset": {
        "count": 1,
        "size": 40
    },
    "poolSize": {
        "count": 1,
        "size": 32
    },
    "pop": {
        "count": 3,
        "size": 248
    },
    "port": {
        "count": 1,
        "size": 32
    },
    "port should be >= 0 and < 65536: ": {
        "count": 1,
        "size": 64
    },
    "portPattern": {
        "count": 1,
        "size": 40
    },
    "pos": {
        "count": 1,
        "size": 32
    },
    "position": {
        "count": 1,
        "size": 32
    },
    "positiveMomentsDifference": {
        "count": 3,
        "size": 272
    },
    "posix": {
        "count": 3,
        "size": 248
    },
    "posix-getopt": {
        "count": 1,
        "size": 40
    },
    "posix.format": {
        "count": 1,
        "size": 40
    },
    "posix.join": {
        "count": 1,
        "size": 40
    },
    "posix.parse": {
        "count": 1,
        "size": 40
    },
    "posixSplitPath": {
        "count": 3,
        "size": 256
    },
    "possibleVar": {
        "count": 1,
        "size": 40
    },
    "postSend": {
        "count": 1,
        "size": 32
    },
    "postformat": {
        "count": 1,
        "size": 40
    },
    "postgres": {
        "count": 1,
        "size": 32
    },
    "pow": {
        "count": 3,
        "size": 248
    },
    "ppid": {
        "count": 1,
        "size": 32
    },
    "preParsePostFormat": {
        "count": 3,
        "size": 264
    },
    "predicate": {
        "count": 1,
        "size": 40
    },
    "preferGlobal": {
        "count": 1,
        "size": 40
    },
    "preferMarkdownReadme": {
        "count": 3,
        "size": 264
    },
    "prefereGlobal": {
        "count": 1,
        "size": 40
    },
    "preference": {
        "count": 1,
        "size": 40
    },
    "prefinish": {
        "count": 3,
        "size": 256
    },
    "prefinished": {
        "count": 1,
        "size": 40
    },
    "prefix": {
        "count": 1,
        "size": 32
    },
    "prefixStats": {
        "count": 1,
        "size": 40
    },
    "preloadModules": {
        "count": 1,
        "size": 40
    },
    "premonomorphic_symbol": {
        "count": 2,
        "size": 96
    },
    "prepareConfig": {
        "count": 3,
        "size": 256
    },
    "prepareStackTrace": {
        "count": 1,
        "size": 48
    },
    "preparse": {
        "count": 1,
        "size": 32
    },
    "preprocessSymlinkDestination": {
        "count": 5,
        "size": 488
    },
    "pretest": {
        "count": 1,
        "size": 32
    },
    "pretty": {
        "count": 1,
        "size": 32
    },
    "prettyprint": {
        "count": 1,
        "size": 40
    },
    "prev": {
        "count": 1,
        "size": 32
    },
    "prevColor": {
        "count": 1,
        "size": 40
    },
    "prevTime": {
        "count": 1,
        "size": 32
    },
    "preventExtensions": {
        "count": 3,
        "size": 264
    },
    "previous": {
        "count": 1,
        "size": 32
    },
    "previous_async": {
        "count": 1,
        "size": 40
    },
    "prime256v1": {
        "count": 1,
        "size": 40
    },
    "primitive": {
        "count": 1,
        "size": 40
    },
    "print": {
        "count": 1,
        "size": 32
    },
    "printDeprecationMessage": {
        "count": 1,
        "size": 48
    },
    "printable": {
        "count": 3,
        "size": 256
    },
    "printfReplacer": {
        "count": 3,
        "size": 256
    },
    "priority": {
        "count": 1,
        "size": 32
    },
    "priorityQueue": {
        "count": 1,
        "size": 40
    },
    "private": {
        "count": 1,
        "size": 32
    },
    "privateDecrypt": {
        "count": 3,
        "size": 256
    },
    "privateEncrypt": {
        "count": 3,
        "size": 256
    },
    "private_api": {
        "count": 1,
        "size": 40
    },
    "private_intern": {
        "count": 1,
        "size": 40
    },
    "prng": {
        "count": 1,
        "size": 32
    },
    "probeList": {
        "count": 1,
        "size": 40
    },
    "probeMetrics": {
        "count": 1,
        "size": 40
    },
    "probeModule": {
        "count": 1,
        "size": 40
    },
    "probeName": {
        "count": 1,
        "size": 40
    },
    "probes": {
        "count": 2,
        "size": 64
    },
    "proc": {
        "count": 1,
        "size": 32
    },
    "process": {
        "count": 8,
        "size": 552
    },
    "process.cwd": {
        "count": 2,
        "size": 80
    },
    "process.exit": {
        "count": 1,
        "size": 40
    },
    "process.kill": {
        "count": 1,
        "size": 40
    },
    "process:": {
        "count": 1,
        "size": 32
    },
    "processAssert": {
        "count": 1,
        "size": 40
    },
    "processChannel": {
        "count": 1,
        "size": 40
    },
    "processConfig": {
        "count": 1,
        "size": 40
    },
    "processFatal": {
        "count": 1,
        "size": 40
    },
    "processImmediate": {
        "count": 3,
        "size": 256
    },
    "processKillAndExit": {
        "count": 1,
        "size": 48
    },
    "processNextTick": {
        "count": 1,
        "size": 40
    },
    "processPacket": {
        "count": 1,
        "size": 40
    },
    "processPromises": {
        "count": 1,
        "size": 40
    },
    "processRawDebug": {
        "count": 1,
        "size": 40
    },
    "processSignalHandlers": {
        "count": 1,
        "size": 48
    },
    "processStdio": {
        "count": 1,
        "size": 40
    },
    "process_metrics": {
        "count": 1,
        "size": 40
    },
    "process_wrap": {
        "count": 1,
        "size": 40
    },
    "processed": {
        "count": 1,
        "size": 40
    },
    "processes": {
        "count": 1,
        "size": 40
    },
    "processing_time": {
        "count": 1,
        "size": 40
    },
    "production": {
        "count": 1,
        "size": 40
    },
    "profile": {
        "count": 3,
        "size": 248
    },
    "profiling": {
        "count": 1,
        "size": 40
    },
    "profiling_node": {
        "count": 1,
        "size": 40
    },
    "promise": {
        "count": 1,
        "size": 32
    },
    "promiseInternals": {
        "count": 1,
        "size": 40
    },
    "promiseRejectEvent": {
        "count": 1,
        "size": 48
    },
    "promise_debug_marker_symbol": {
        "count": 2,
        "size": 112
    },
    "promise_has_handler_symbol": {
        "count": 2,
        "size": 112
    },
    "prop": {
        "count": 1,
        "size": 32
    },
    "property": {
        "count": 3,
        "size": 248
    },
    "propertyOf": {
        "count": 3,
        "size": 256
    },
    "props": {
        "count": 1,
        "size": 32
    },
    "propsLength": {
        "count": 1,
        "size": 40
    },
    "proto": {
        "count": 1,
        "size": 32
    },
    "protocol": {
        "count": 1,
        "size": 32
    },
    "protocol error": {
        "count": 1,
        "size": 40
    },
    "protocol notification #%d %s": {
        "count": 1,
        "size": 56
    },
    "protocol request #%d %s": {
        "count": 1,
        "size": 48
    },
    "protocol response #%d %s": {
        "count": 1,
        "size": 48
    },
    "protocol response seqno %d unknown!": {
        "count": 1,
        "size": 64
    },
    "protocolPattern": {
        "count": 1,
        "size": 40
    },
    "protocolVersion": {
        "count": 1,
        "size": 40
    },
    "prototype": {
        "count": 1,
        "size": 40
    },
    "prototypeMax": {
        "count": 1,
        "size": 40
    },
    "prototypeMin": {
        "count": 1,
        "size": 40
    },
    "prototype__proto": {
        "count": 1,
        "size": 40
    },
    "proxiedMethods": {
        "count": 1,
        "size": 40
    },
    "proxyReader": {
        "count": 7,
        "size": 544
    },
    "proxyStream": {
        "count": 7,
        "size": 544
    },
    "proxyWriter": {
        "count": 7,
        "size": 544
    },
    "pseudoRandomBytes": {
        "count": 1,
        "size": 48
    },
    "pst": {
        "count": 1,
        "size": 32
    },
    "pub": {
        "count": 1,
        "size": 32
    },
    "pub-emitter": {
        "count": 1,
        "size": 40
    },
    "publicDecrypt": {
        "count": 3,
        "size": 256
    },
    "publicEncrypt": {
        "count": 3,
        "size": 256
    },
    "publicationConfig": {
        "count": 1,
        "size": 48
    },
    "publish": {
        "count": 4,
        "size": 392
    },
    "publishConfig": {
        "count": 2,
        "size": 80
    },
    "pull": {
        "count": 3,
        "size": 248
    },
    "pullAt": {
        "count": 1,
        "size": 32
    },
    "pump": {
        "count": 1,
        "size": 32
    },
    "punycode": {
        "count": 2,
        "size": 64
    },
    "punycode.js": {
        "count": 2,
        "size": 168
    },
    "push": {
        "count": 3,
        "size": 248
    },
    "puts": {
        "count": 1,
        "size": 32
    },
    "pwd": {
        "count": 1,
        "size": 32
    },
    "python": {
        "count": 1,
        "size": 32
    },
    "q": {
        "count": 1,
        "size": 32
    },
    "qm": {
        "count": 1,
        "size": 32
    },
    "qmark": {
        "count": 1,
        "size": 32
    },
    "quarter": {
        "count": 1,
        "size": 32
    },
    "quarters": {
        "count": 1,
        "size": 32
    },
    "query": {
        "count": 12,
        "size": 896
    },
    "query-capabilities": {
        "count": 1,
        "size": 48
    },
    "queryA": {
        "count": 3,
        "size": 248
    },
    "queryAaaa": {
        "count": 3,
        "size": 256
    },
    "queryCapabilities": {
        "count": 5,
        "size": 480
    },
    "queryCname": {
        "count": 3,
        "size": 256
    },
    "queryIndex": {
        "count": 1,
        "size": 40
    },
    "queryMethods": {
        "count": 1,
        "size": 40
    },
    "queryMx": {
        "count": 3,
        "size": 248
    },
    "queryNaptr": {
        "count": 3,
        "size": 256
    },
    "queryNs": {
        "count": 3,
        "size": 248
    },
    "queryServer": {
        "count": 4,
        "size": 296
    },
    "querySoa": {
        "count": 3,
        "size": 248
    },
    "querySrv": {
        "count": 3,
        "size": 248
    },
    "queryTxt": {
        "count": 3,
        "size": 248
    },
    "querystring": {
        "count": 2,
        "size": 80
    },
    "querystring.js": {
        "count": 1,
        "size": 128
    },
    "queue": {
        "count": 1,
        "size": 32
    },
    "r": {
        "count": 1,
        "size": 32
    },
    "r+": {
        "count": 1,
        "size": 32
    },
    "race": {
        "count": 3,
        "size": 248
    },
    "raiseEvent": {
        "count": 1,
        "size": 40
    },
    "raiseLocalEvent": {
        "count": 1,
        "size": 40
    },
    "ranOut": {
        "count": 1,
        "size": 32
    },
    "random": {
        "count": 5,
        "size": 464
    },
    "randomBytes": {
        "count": 3,
        "size": 256
    },
    "range": {
        "count": 5,
        "size": 464
    },
    "raw": {
        "count": 3,
        "size": 248
    },
    "rawAsap": {
        "count": 3,
        "size": 248
    },
    "rawDebug": {
        "count": 1,
        "size": 32
    },
    "raws": {
        "count": 1,
        "size": 32
    },
    "rc": {
        "count": 1,
        "size": 32
    },
    "rcompare": {
        "count": 3,
        "size": 248
    },
    "rcompareIdentifiers": {
        "count": 3,
        "size": 264
    },
    "rdev": {
        "count": 1,
        "size": 32
    },
    "rds": {
        "count": 1,
        "size": 32
    },
    "re": {
        "count": 3,
        "size": 248
    },
    "reComboMark": {
        "count": 1,
        "size": 40
    },
    "reEmptyStringLeading": {
        "count": 1,
        "size": 48
    },
    "reEmptyStringMiddle": {
        "count": 1,
        "size": 48
    },
    "reEmptyStringTrailing": {
        "count": 1,
        "size": 48
    },
    "reEsTemplate": {
        "count": 1,
        "size": 40
    },
    "reEscape": {
        "count": 1,
        "size": 32
    },
    "reEscapeChar": {
        "count": 1,
        "size": 40
    },
    "reEscapedHtml": {
        "count": 1,
        "size": 40
    },
    "reEvaluate": {
        "count": 1,
        "size": 40
    },
    "reFlags": {
        "count": 1,
        "size": 32
    },
    "reHasEscapedHtml": {
        "count": 1,
        "size": 40
    },
    "reHasHexPrefix": {
        "count": 1,
        "size": 40
    },
    "reHasRegExpChars": {
        "count": 1,
        "size": 40
    },
    "reHasUnescapedHtml": {
        "count": 1,
        "size": 48
    },
    "reInterpolate": {
        "count": 1,
        "size": 40
    },
    "reIsDeepProp": {
        "count": 1,
        "size": 40
    },
    "reIsHostCtor": {
        "count": 1,
        "size": 40
    },
    "reIsNative": {
        "count": 1,
        "size": 40
    },
    "reIsPlainProp": {
        "count": 1,
        "size": 40
    },
    "reIsUint": {
        "count": 1,
        "size": 32
    },
    "reLatin1": {
        "count": 1,
        "size": 32
    },
    "reLiner": {
        "count": 3,
        "size": 248
    },
    "reNoMatch": {
        "count": 1,
        "size": 40
    },
    "reOpen": {
        "count": 1,
        "size": 32
    },
    "rePropName": {
        "count": 1,
        "size": 40
    },
    "reRegExpChars": {
        "count": 1,
        "size": 40
    },
    "reSpecials": {
        "count": 1,
        "size": 40
    },
    "reUnescapedHtml": {
        "count": 1,
        "size": 40
    },
    "reUnescapedString": {
        "count": 1,
        "size": 48
    },
    "reWords": {
        "count": 1,
        "size": 32
    },
    "read": {
        "count": 8,
        "size": 824
    },
    "read-installed": {
        "count": 1,
        "size": 40
    },
    "read-installed.js": {
        "count": 1,
        "size": 48
    },
    "read-json.js": {
        "count": 1,
        "size": 40
    },
    "read-package-json": {
        "count": 1,
        "size": 48
    },
    "read1": {
        "count": 2,
        "size": 176
    },
    "read: emitReadable": {
        "count": 1,
        "size": 48
    },
    "readBuffer": {
        "count": 3,
        "size": 256
    },
    "readDoubleBE": {
        "count": 5,
        "size": 472
    },
    "readDoubleLE": {
        "count": 5,
        "size": 472
    },
    "readEvents": {
        "count": 1,
        "size": 40
    },
    "readFile": {
        "count": 3,
        "size": 248
    },
    "readFileAfterClose": {
        "count": 5,
        "size": 480
    },
    "readFileAfterOpen": {
        "count": 5,
        "size": 480
    },
    "readFileAfterRead": {
        "count": 5,
        "size": 480
    },
    "readFileAfterStat": {
        "count": 5,
        "size": 480
    },
    "readFileSync": {
        "count": 1,
        "size": 40
    },
    "readFloatBE": {
        "count": 5,
        "size": 472
    },
    "readFloatLE": {
        "count": 5,
        "size": 472
    },
    "readInstalled": {
        "count": 3,
        "size": 256
    },
    "readInstalled_": {
        "count": 3,
        "size": 256
    },
    "readInt16BE": {
        "count": 1,
        "size": 40
    },
    "readInt16LE": {
        "count": 1,
        "size": 40
    },
    "readInt32BE": {
        "count": 1,
        "size": 40
    },
    "readInt32LE": {
        "count": 1,
        "size": 40
    },
    "readInt8": {
        "count": 1,
        "size": 32
    },
    "readIntBE": {
        "count": 1,
        "size": 40
    },
    "readIntLE": {
        "count": 1,
        "size": 40
    },
    "readJson": {
        "count": 3,
        "size": 248
    },
    "readJson_": {
        "count": 3,
        "size": 256
    },
    "readMethods": {
        "count": 1,
        "size": 40
    },
    "readPackage": {
        "count": 3,
        "size": 256
    },
    "readScopes": {
        "count": 3,
        "size": 256
    },
    "readStart": {
        "count": 15,
        "size": 1552
    },
    "readStop": {
        "count": 15,
        "size": 1544
    },
    "readSync": {
        "count": 1,
        "size": 32
    },
    "readUInt16BE": {
        "count": 3,
        "size": 256
    },
    "readUInt16LE": {
        "count": 1,
        "size": 40
    },
    "readUInt32BE": {
        "count": 3,
        "size": 256
    },
    "readUInt32LE": {
        "count": 1,
        "size": 40
    },
    "readUInt8": {
        "count": 1,
        "size": 40
    },
    "readUIntBE": {
        "count": 1,
        "size": 40
    },
    "readUIntLE": {
        "count": 1,
        "size": 40
    },
    "readable": {
        "count": 1,
        "size": 32
    },
    "readableAddChunk": {
        "count": 3,
        "size": 256
    },
    "readableListening": {
        "count": 1,
        "size": 48
    },
    "readableObjectMode": {
        "count": 1,
        "size": 48
    },
    "readdir": {
        "count": 9,
        "size": 896
    },
    "readdir-scoped-modules": {
        "count": 1,
        "size": 48
    },
    "readdir.js": {
        "count": 1,
        "size": 40
    },
    "readdirCb": {
        "count": 3,
        "size": 256
    },
    "readdirSync": {
        "count": 1,
        "size": 40
    },
    "reader": {
        "count": 1,
        "size": 32
    },
    "reading": {
        "count": 2,
        "size": 64
    },
    "reading or ended": {
        "count": 1,
        "size": 40
    },
    "readingMore": {
        "count": 1,
        "size": 40
    },
    "readline": {
        "count": 2,
        "size": 64
    },
    "readlink": {
        "count": 3,
        "size": 248
    },
    "readlinkSync": {
        "count": 1,
        "size": 40
    },
    "readme": {
        "count": 3,
        "size": 248
    },
    "readmeFilename": {
        "count": 1,
        "size": 40
    },
    "readme_": {
        "count": 3,
        "size": 248
    },
    "readyState": {
        "count": 1,
        "size": 40
    },
    "real": {
        "count": 1,
        "size": 32
    },
    "realNames": {
        "count": 1,
        "size": 40
    },
    "reallyExit": {
        "count": 3,
        "size": 256
    },
    "realpath": {
        "count": 5,
        "size": 464
    },
    "realpathSync": {
        "count": 5,
        "size": 472
    },
    "rearg": {
        "count": 1,
        "size": 32
    },
    "reason": {
        "count": 1,
        "size": 32
    },
    "receive": {
        "count": 3,
        "size": 248
    },
    "received": {
        "count": 1,
        "size": 32
    },
    "received: %j": {
        "count": 1,
        "size": 40
    },
    "receivedShutdown": {
        "count": 1,
        "size": 40
    },
    "receiver": {
        "count": 1,
        "size": 32
    },
    "reconfigure": {
        "count": 1,
        "size": 40
    },
    "recurseTimes": {
        "count": 1,
        "size": 40
    },
    "recv msg: %s": {
        "count": 1,
        "size": 40
    },
    "recvHandle": {
        "count": 1,
        "size": 40
    },
    "recvStart": {
        "count": 3,
        "size": 256
    },
    "recvStop": {
        "count": 3,
        "size": 248
    },
    "red": {
        "count": 1,
        "size": 32
    },
    "redis": {
        "count": 1,
        "size": 32
    },
    "reduce": {
        "count": 5,
        "size": 464
    },
    "reduceRight": {
        "count": 5,
        "size": 472
    },
    "reduceToSingleString": {
        "count": 3,
        "size": 264
    },
    "reemit": {
        "count": 18,
        "size": 1400
    },
    "ref": {
        "count": 16,
        "size": 1616
    },
    "refresh": {
        "count": 1,
        "size": 32
    },
    "refs": {
        "count": 1,
        "size": 32
    },
    "regExpEscape": {
        "count": 3,
        "size": 256
    },
    "regex": {
        "count": 1,
        "size": 32
    },
    "regexEscape": {
        "count": 3,
        "size": 256
    },
    "regexNonASCII": {
        "count": 1,
        "size": 40
    },
    "regexPunycode": {
        "count": 1,
        "size": 40
    },
    "regexSeparators": {
        "count": 1,
        "size": 40
    },
    "regexes": {
        "count": 1,
        "size": 32
    },
    "regexp": {
        "count": 1,
        "size": 32
    },
    "regexpEscapes": {
        "count": 1,
        "size": 40
    },
    "regexpTag": {
        "count": 1,
        "size": 40
    },
    "registerExtension": {
        "count": 1,
        "size": 48
    },
    "reinitialize": {
        "count": 3,
        "size": 256
    },
    "reject": {
        "count": 5,
        "size": 464
    },
    "rejectLimit": {
        "count": 1,
        "size": 40
    },
    "rejectSeries": {
        "count": 1,
        "size": 40
    },
    "rejectionHandled": {
        "count": 3,
        "size": 256
    },
    "relative": {
        "count": 1,
        "size": 32
    },
    "relativeTime": {
        "count": 1,
        "size": 40
    },
    "relativeTimeThreshold": {
        "count": 1,
        "size": 48
    },
    "relative__relativeTime": {
        "count": 3,
        "size": 264
    },
    "release": {
        "count": 1,
        "size": 32
    },
    "release. Please refer to ": {
        "count": 1,
        "size": 56
    },
    "rem": {
        "count": 1,
        "size": 32
    },
    "remaining": {
        "count": 1,
        "size": 40
    },
    "remoteAddress": {
        "count": 1,
        "size": 40
    },
    "remoteFamily": {
        "count": 1,
        "size": 40
    },
    "remotePort": {
        "count": 1,
        "size": 40
    },
    "remove": {
        "count": 7,
        "size": 680
    },
    "removeAllListeners": {
        "count": 3,
        "size": 264
    },
    "removeChannel": {
        "count": 9,
        "size": 688
    },
    "removeFormattingTokens": {
        "count": 3,
        "size": 264
    },
    "removeHandlesForWorker": {
        "count": 3,
        "size": 264
    },
    "removeHeader": {
        "count": 1,
        "size": 40
    },
    "removeListener": {
        "count": 3,
        "size": 256
    },
    "removeSocket": {
        "count": 1,
        "size": 40
    },
    "removeWorker": {
        "count": 3,
        "size": 256
    },
    "rempio2result": {
        "count": 1,
        "size": 40
    },
    "rename": {
        "count": 4,
        "size": 392
    },
    "renameSync": {
        "count": 1,
        "size": 40
    },
    "rename_": {
        "count": 1,
        "size": 32
    },
    "renegotiate": {
        "count": 5,
        "size": 472
    },
    "reorder": {
        "count": 3,
        "size": 248
    },
    "repeat": {
        "count": 5,
        "size": 464
    },
    "repeater": {
        "count": 1,
        "size": 32
    },
    "repeaterProtocol": {
        "count": 1,
        "size": 40
    },
    "repl": {
        "count": 2,
        "size": 64
    },
    "replModule": {
        "count": 1,
        "size": 40
    },
    "replace": {
        "count": 4,
        "size": 392
    },
    "replaceCaret": {
        "count": 3,
        "size": 256
    },
    "replaceCarets": {
        "count": 3,
        "size": 256
    },
    "replaceHandle": {
        "count": 3,
        "size": 256
    },
    "replaceHolders": {
        "count": 3,
        "size": 256
    },
    "replaceStars": {
        "count": 3,
        "size": 256
    },
    "replaceTilde": {
        "count": 3,
        "size": 256
    },
    "replaceTildes": {
        "count": 3,
        "size": 256
    },
    "replaceXRange": {
        "count": 3,
        "size": 256
    },
    "replaceXRanges": {
        "count": 3,
        "size": 256
    },
    "replacement": {
        "count": 1,
        "size": 40
    },
    "replacements": {
        "count": 1,
        "size": 40
    },
    "replacer": {
        "count": 1,
        "size": 32
    },
    "reply": {
        "count": 1,
        "size": 32
    },
    "repo": {
        "count": 1,
        "size": 32
    },
    "report": {
        "count": 3,
        "size": 248
    },
    "repositories": {
        "count": 1,
        "size": 40
    },
    "repository": {
        "count": 3,
        "size": 120
    },
    "repostitory": {
        "count": 1,
        "size": 40
    },
    "req": {
        "count": 1,
        "size": 32
    },
    "reqs": {
        "count": 1,
        "size": 32
    },
    "request": {
        "count": 7,
        "size": 680
    },
    "request %s": {
        "count": 1,
        "size": 40
    },
    "request %s => response %s": {
        "count": 1,
        "size": 56
    },
    "requestAllTargets": {
        "count": 3,
        "size": 264
    },
    "requestEnd": {
        "count": 1,
        "size": 40
    },
    "requestFlush": {
        "count": 3,
        "size": 256
    },
    "requestOCSP": {
        "count": 7,
        "size": 688
    },
    "requestOfTarget": {
        "count": 3,
        "size": 256
    },
    "requestOfTarget %j": {
        "count": 1,
        "size": 48
    },
    "requestPath": {
        "count": 1,
        "size": 40
    },
    "requestProbeEnd": {
        "count": 1,
        "size": 40
    },
    "requestProbeStart": {
        "count": 1,
        "size": 48
    },
    "requestStart": {
        "count": 1,
        "size": 40
    },
    "requests": {
        "count": 1,
        "size": 32
    },
    "require": {
        "count": 21,
        "size": 1544
    },
    "requireRepl": {
        "count": 1,
        "size": 40
    },
    "requireable": {
        "count": 3,
        "size": 256
    },
    "res": {
        "count": 1,
        "size": 32
    },
    "resIndex": {
        "count": 1,
        "size": 32
    },
    "reserved": {
        "count": 1,
        "size": 32
    },
    "reserved for extensions": {
        "count": 1,
        "size": 48
    },
    "reset": {
        "count": 3,
        "size": 248
    },
    "resize": {
        "count": 3,
        "size": 248
    },
    "resize to %d from %d (apparent size %d)": {
        "count": 1,
        "size": 64
    },
    "resized": {
        "count": 2,
        "size": 176
    },
    "resolve": {
        "count": 3,
        "size": 248
    },
    "resolve4": {
        "count": 1,
        "size": 32
    },
    "resolve6": {
        "count": 1,
        "size": 32
    },
    "resolveArgs": {
        "count": 3,
        "size": 256
    },
    "resolveCname": {
        "count": 1,
        "size": 40
    },
    "resolveDir": {
        "count": 3,
        "size": 256
    },
    "resolveInheritance": {
        "count": 3,
        "size": 264
    },
    "resolveLocale": {
        "count": 3,
        "size": 256
    },
    "resolveMap": {
        "count": 1,
        "size": 40
    },
    "resolveMx": {
        "count": 1,
        "size": 40
    },
    "resolveNaptr": {
        "count": 1,
        "size": 40
    },
    "resolveNs": {
        "count": 1,
        "size": 40
    },
    "resolveObject": {
        "count": 1,
        "size": 40
    },
    "resolvePackageFromPath": {
        "count": 3,
        "size": 264
    },
    "resolvePackageStart": {
        "count": 3,
        "size": 264
    },
    "resolvePath": {
        "count": 3,
        "size": 256
    },
    "resolveSoa": {
        "count": 1,
        "size": 40
    },
    "resolveSrv": {
        "count": 1,
        "size": 40
    },
    "resolveTxt": {
        "count": 1,
        "size": 40
    },
    "resolvedAbsolute": {
        "count": 1,
        "size": 40
    },
    "resolvedArgv": {
        "count": 1,
        "size": 40
    },
    "resolvedLink": {
        "count": 1,
        "size": 40
    },
    "resolvedModule": {
        "count": 1,
        "size": 40
    },
    "resolvedOptions": {
        "count": 9,
        "size": 904
    },
    "resolvedPath": {
        "count": 1,
        "size": 40
    },
    "resolver": {
        "count": 3,
        "size": 248
    },
    "resolving CWD: %j, path: %j": {
        "count": 1,
        "size": 56
    },
    "response": {
        "count": 1,
        "size": 32
    },
    "responseOnEnd": {
        "count": 3,
        "size": 256
    },
    "rest": {
        "count": 3,
        "size": 248
    },
    "restParam": {
        "count": 3,
        "size": 256
    },
    "restart": {
        "count": 3,
        "size": 248
    },
    "result": {
        "count": 3,
        "size": 248
    },
    "resume": {
        "count": 7,
        "size": 680
    },
    "resume read 0": {
        "count": 1,
        "size": 40
    },
    "resumeScheduled": {
        "count": 1,
        "size": 40
    },
    "resume_": {
        "count": 3,
        "size": 248
    },
    "ret": {
        "count": 1,
        "size": 32
    },
    "retHighest": {
        "count": 1,
        "size": 40
    },
    "retUnwrapped": {
        "count": 1,
        "size": 40
    },
    "rethrow": {
        "count": 5,
        "size": 464
    },
    "retry": {
        "count": 3,
        "size": 248
    },
    "retval": {
        "count": 1,
        "size": 32
    },
    "reuseAddr": {
        "count": 1,
        "size": 40
    },
    "reverse": {
        "count": 5,
        "size": 464
    },
    "riSeen": {
        "count": 1,
        "size": 32
    },
    "rightContext": {
        "count": 1,
        "size": 40
    },
    "rinfo": {
        "count": 3,
        "size": 248
    },
    "rmdir": {
        "count": 3,
        "size": 248
    },
    "rmdirSync": {
        "count": 1,
        "size": 40
    },
    "rng": {
        "count": 1,
        "size": 32
    },
    "rngstate": {
        "count": 1,
        "size": 32
    },
    "root": {
        "count": 1,
        "size": 32
    },
    "round": {
        "count": 3,
        "size": 248
    },
    "rows": {
        "count": 1,
        "size": 32
    },
    "rr": {
        "count": 1,
        "size": 32
    },
    "rs": {
        "count": 1,
        "size": 32
    },
    "rs+": {
        "count": 1,
        "size": 32
    },
    "rsaPrivate": {
        "count": 3,
        "size": 256
    },
    "rsaPublic": {
        "count": 3,
        "size": 256
    },
    "rsort": {
        "count": 3,
        "size": 248
    },
    "rsp": {
        "count": 1,
        "size": 32
    },
    "rss": {
        "count": 1,
        "size": 32
    },
    "run": {
        "count": 1,
        "size": 32
    },
    "run-time control channel for node applications": {
        "count": 1,
        "size": 72
    },
    "runInContext": {
        "count": 5,
        "size": 472
    },
    "runInDebugContext": {
        "count": 3,
        "size": 264
    },
    "runInNewContext": {
        "count": 1,
        "size": 40
    },
    "runInThisContext": {
        "count": 5,
        "size": 472
    },
    "runMain": {
        "count": 1,
        "size": 32
    },
    "runMicrotasks": {
        "count": 3,
        "size": 256
    },
    "runMicrotasksCallback": {
        "count": 3,
        "size": 264
    },
    "runctl": {
        "count": 1,
        "size": 32
    },
    "runctl connect: %s": {
        "count": 1,
        "size": 48
    },
    "runctl connect: <process channel>": {
        "count": 1,
        "size": 64
    },
    "runner": {
        "count": 2,
        "size": 64
    },
    "runtime.name": {
        "count": 1,
        "size": 40
    },
    "runtime.version": {
        "count": 1,
        "size": 40
    },
    "runtimetools/appmetrics#adapter": {
        "count": 1,
        "size": 56
    },
    "rval": {
        "count": 1,
        "size": 32
    },
    "rx": {
        "count": 1,
        "size": 32
    },
    "ryan@strongloop.com": {
        "count": 1,
        "size": 48
    },
    "s": {
        "count": 1,
        "size": 32
    },
    "safeJSON": {
        "count": 1,
        "size": 32
    },
    "sam": {
        "count": 2,
        "size": 64
    },
    "sam@strongloop.com": {
        "count": 2,
        "size": 96
    },
    "sameDay": {
        "count": 1,
        "size": 32
    },
    "sameElse": {
        "count": 1,
        "size": 32
    },
    "sample": {
        "count": 3,
        "size": 248
    },
    "samtu": {
        "count": 2,
        "size": 64
    },
    "satisfies": {
        "count": 3,
        "size": 256
    },
    "save": {
        "count": 3,
        "size": 248
    },
    "scavenge": {
        "count": 1,
        "size": 32
    },
    "scheduleMicrotasks": {
        "count": 3,
        "size": 264
    },
    "schedulingPolicy": {
        "count": 1,
        "size": 40
    },
    "scope": {
        "count": 1,
        "size": 32
    },
    "scopeid": {
        "count": 1,
        "size": 32
    },
    "script": {
        "count": 1,
        "size": 32
    },
    "script values must be string commands": {
        "count": 1,
        "size": 64
    },
    "scriptRoot": {
        "count": 1,
        "size": 40
    },
    "scriptpath": {
        "count": 3,
        "size": 256
    },
    "scriptpath_": {
        "count": 3,
        "size": 256
    },
    "scripts": {
        "count": 2,
        "size": 64
    },
    "scripts must be an object": {
        "count": 1,
        "size": 56
    },
    "seal": {
        "count": 3,
        "size": 248
    },
    "sealed_symbol": {
        "count": 2,
        "size": 80
    },
    "search": {
        "count": 3,
        "size": 248
    },
    "seat0": {
        "count": 1,
        "size": 32
    },
    "second": {
        "count": 1,
        "size": 32
    },
    "secondaryIndexQuery": {
        "count": 1,
        "size": 48
    },
    "seconds": {
        "count": 1,
        "size": 32
    },
    "securePairNT": {
        "count": 3,
        "size": 256
    },
    "seen": {
        "count": 1,
        "size": 32
    },
    "seenLinks": {
        "count": 1,
        "size": 40
    },
    "segment": {
        "count": 1,
        "size": 32
    },
    "select": {
        "count": 1,
        "size": 32
    },
    "selectColor": {
        "count": 3,
        "size": 256
    },
    "selectLimit": {
        "count": 1,
        "size": 40
    },
    "selectSeries": {
        "count": 1,
        "size": 40
    },
    "self": {
        "count": 1,
        "size": 32
    },
    "self-send %s": {
        "count": 1,
        "size": 40
    },
    "semver": {
        "count": 1,
        "size": 32
    },
    "semver.js": {
        "count": 1,
        "size": 40
    },
    "send": {
        "count": 12,
        "size": 1256
    },
    "send msg: %s": {
        "count": 1,
        "size": 40
    },
    "send6": {
        "count": 3,
        "size": 248
    },
    "sendControlCommand": {
        "count": 1,
        "size": 48
    },
    "sendHelper": {
        "count": 3,
        "size": 256
    },
    "sendMetrics": {
        "count": 3,
        "size": 256
    },
    "sendStream": {
        "count": 3,
        "size": 256
    },
    "sendTypeToMethod": {
        "count": 1,
        "size": 40
    },
    "sender": {
        "count": 1,
        "size": 32
    },
    "sendto": {
        "count": 1,
        "size": 32
    },
    "sent": {
        "count": 1,
        "size": 32
    },
    "sentShutdown": {
        "count": 1,
        "size": 40
    },
    "sep": {
        "count": 1,
        "size": 32
    },
    "separator": {
        "count": 1,
        "size": 40
    },
    "seq": {
        "count": 1,
        "size": 32
    },
    "seqno": {
        "count": 1,
        "size": 32
    },
    "serial": {
        "count": 1,
        "size": 32
    },
    "serialNumber": {
        "count": 1,
        "size": 40
    },
    "serialize": {
        "count": 1,
        "size": 40
    },
    "serializer": {
        "count": 1,
        "size": 40
    },
    "series": {
        "count": 1,
        "size": 32
    },
    "server": {
        "count": 1,
        "size": 32
    },
    "server not attached to a process": {
        "count": 1,
        "size": 56
    },
    "server.js": {
        "count": 1,
        "size": 40
    },
    "serverName": {
        "count": 1,
        "size": 40
    },
    "serverjs": {
        "count": 3,
        "size": 248
    },
    "serverjs_": {
        "count": 3,
        "size": 256
    },
    "servermod": {
        "count": 1,
        "size": 40
    },
    "servername": {
        "count": 1,
        "size": 40
    },
    "service": {
        "count": 1,
        "size": 32
    },
    "sessionId": {
        "count": 1,
        "size": 40
    },
    "set": {
        "count": 16,
        "size": 1544
    },
    "set __proto__": {
        "count": 3,
        "size": 256
    },
    "set size to %d from %d": {
        "count": 1,
        "size": 48
    },
    "set-size": {
        "count": 1,
        "size": 32
    },
    "setAAD": {
        "count": 3,
        "size": 248
    },
    "setAuthTag": {
        "count": 3,
        "size": 256
    },
    "setAutoPadding": {
        "count": 3,
        "size": 256
    },
    "setBlocking": {
        "count": 7,
        "size": 688
    },
    "setBreakPoint": {
        "count": 1,
        "size": 40
    },
    "setBroadcast": {
        "count": 3,
        "size": 256
    },
    "setCert": {
        "count": 3,
        "size": 248
    },
    "setCiphers": {
        "count": 3,
        "size": 256
    },
    "setConfig": {
        "count": 1,
        "size": 40
    },
    "setConfigurable": {
        "count": 1,
        "size": 40
    },
    "setContext": {
        "count": 1,
        "size": 40
    },
    "setDHParam": {
        "count": 3,
        "size": 256
    },
    "setData": {
        "count": 1,
        "size": 32
    },
    "setDate": {
        "count": 3,
        "size": 248
    },
    "setDefaultEncoding": {
        "count": 3,
        "size": 264
    },
    "setECDHCurve": {
        "count": 3,
        "size": 256
    },
    "setEncoding": {
        "count": 1,
        "size": 40
    },
    "setEngine": {
        "count": 5,
        "size": 472
    },
    "setEnumerable": {
        "count": 1,
        "size": 40
    },
    "setEnv": {
        "count": 1,
        "size": 32
    },
    "setFloat32": {
        "count": 3,
        "size": 256
    },
    "setFloat64": {
        "count": 3,
        "size": 256
    },
    "setFreeListLength": {
        "count": 3,
        "size": 264
    },
    "setFullYear": {
        "count": 3,
        "size": 256
    },
    "setGet": {
        "count": 1,
        "size": 32
    },
    "setHeader": {
        "count": 1,
        "size": 40
    },
    "setHookCallback": {
        "count": 2,
        "size": 184
    },
    "setHours": {
        "count": 3,
        "size": 248
    },
    "setImmediate": {
        "count": 1,
        "size": 40
    },
    "setInt16": {
        "count": 3,
        "size": 248
    },
    "setInt32": {
        "count": 3,
        "size": 248
    },
    "setInt8": {
        "count": 3,
        "size": 248
    },
    "setInterval": {
        "count": 1,
        "size": 40
    },
    "setKeepAlive": {
        "count": 3,
        "size": 256
    },
    "setKey": {
        "count": 5,
        "size": 464
    },
    "setListener": {
        "count": 1,
        "size": 40
    },
    "setMaxListeners": {
        "count": 3,
        "size": 256
    },
    "setMaxSendFragment": {
        "count": 7,
        "size": 696
    },
    "setMilliseconds": {
        "count": 3,
        "size": 256
    },
    "setMinutes": {
        "count": 3,
        "size": 256
    },
    "setMonth": {
        "count": 5,
        "size": 464
    },
    "setMulticastLoopback": {
        "count": 3,
        "size": 264
    },
    "setMulticastTTL": {
        "count": 3,
        "size": 256
    },
    "setNPNProtocols": {
        "count": 5,
        "size": 472
    },
    "setNoDelay": {
        "count": 3,
        "size": 256
    },
    "setOCSPResponse": {
        "count": 5,
        "size": 472
    },
    "setOffsetToLocal": {
        "count": 3,
        "size": 256
    },
    "setOffsetToParsedOffset": {
        "count": 3,
        "size": 264
    },
    "setOffsetToUTC": {
        "count": 3,
        "size": 256
    },
    "setOptions": {
        "count": 5,
        "size": 472
    },
    "setPendingInstances": {
        "count": 1,
        "size": 48
    },
    "setPrivateKey": {
        "count": 5,
        "size": 472
    },
    "setPrototype": {
        "count": 1,
        "size": 40
    },
    "setPrototypeOf": {
        "count": 3,
        "size": 256
    },
    "setPublicKey": {
        "count": 5,
        "size": 472
    },
    "setRawMode": {
        "count": 3,
        "size": 256
    },
    "setSNICallback": {
        "count": 3,
        "size": 256
    },
    "setSeconds": {
        "count": 3,
        "size": 256
    },
    "setServername": {
        "count": 3,
        "size": 256
    },
    "setServers": {
        "count": 3,
        "size": 256
    },
    "setSession": {
        "count": 5,
        "size": 472
    },
    "setSessionIdContext": {
        "count": 3,
        "size": 264
    },
    "setSessionTimeout": {
        "count": 3,
        "size": 264
    },
    "setSet": {
        "count": 1,
        "size": 32
    },
    "setSimultaneousAccepts": {
        "count": 1,
        "size": 48
    },
    "setSize": {
        "count": 3,
        "size": 248
    },
    "setSocketKeepAlive": {
        "count": 1,
        "size": 48
    },
    "setTTL": {
        "count": 3,
        "size": 248
    },
    "setTag": {
        "count": 1,
        "size": 32
    },
    "setTicketKeys": {
        "count": 5,
        "size": 472
    },
    "setTime": {
        "count": 3,
        "size": 248
    },
    "setTimeout": {
        "count": 1,
        "size": 40
    },
    "setUTCDate": {
        "count": 3,
        "size": 256
    },
    "setUTCFullYear": {
        "count": 3,
        "size": 256
    },
    "setUTCHours": {
        "count": 3,
        "size": 256
    },
    "setUTCMilliseconds": {
        "count": 3,
        "size": 264
    },
    "setUTCMinutes": {
        "count": 3,
        "size": 256
    },
    "setUTCMonth": {
        "count": 3,
        "size": 256
    },
    "setUTCSeconds": {
        "count": 3,
        "size": 256
    },
    "setUint16": {
        "count": 3,
        "size": 256
    },
    "setUint32": {
        "count": 3,
        "size": 256
    },
    "setUint8": {
        "count": 3,
        "size": 248
    },
    "setValue": {
        "count": 1,
        "size": 32
    },
    "setVerifyMode": {
        "count": 3,
        "size": 256
    },
    "setWeekAll": {
        "count": 3,
        "size": 256
    },
    "setWritable": {
        "count": 1,
        "size": 40
    },
    "setYear": {
        "count": 3,
        "size": 248
    },
    "set_": {
        "count": 1,
        "size": 32
    },
    "set_key": {
        "count": 1,
        "size": 32
    },
    "setegid": {
        "count": 3,
        "size": 248
    },
    "seteuid": {
        "count": 3,
        "size": 248
    },
    "setgid": {
        "count": 3,
        "size": 248
    },
    "setgroups": {
        "count": 3,
        "size": 256
    },
    "setopts": {
        "count": 3,
        "size": 248
    },
    "sets": {
        "count": 1,
        "size": 32
    },
    "setter": {
        "count": 1,
        "size": 32
    },
    "settings": {
        "count": 1,
        "size": 32
    },
    "setuid": {
        "count": 3,
        "size": 248
    },
    "setup": {
        "count": 1,
        "size": 32
    },
    "setupBufferJS": {
        "count": 3,
        "size": 256
    },
    "setupChannel": {
        "count": 3,
        "size": 256
    },
    "setupChildLogger": {
        "count": 3,
        "size": 256
    },
    "setupControl": {
        "count": 3,
        "size": 256
    },
    "setupIgnores": {
        "count": 3,
        "size": 256
    },
    "setupMaster": {
        "count": 1,
        "size": 40
    },
    "setupSettingsNT": {
        "count": 3,
        "size": 256
    },
    "shelljs": {
        "count": 1,
        "size": 32
    },
    "shift": {
        "count": 5,
        "size": 464
    },
    "shimKeys": {
        "count": 3,
        "size": 248
    },
    "short": {
        "count": 3,
        "size": 248
    },
    "shorthand": {
        "count": 1,
        "size": 40
    },
    "showHidden": {
        "count": 1,
        "size": 40
    },
    "shuffle": {
        "count": 3,
        "size": 248
    },
    "shutdown": {
        "count": 11,
        "size": 1112
    },
    "shutdownSSL": {
        "count": 5,
        "size": 472
    },
    "shutdownTimeout": {
        "count": 1,
        "size": 40
    },
    "sign": {
        "count": 5,
        "size": 464
    },
    "signal": {
        "count": 1,
        "size": 32
    },
    "signalCode": {
        "count": 1,
        "size": 40
    },
    "signalWraps": {
        "count": 1,
        "size": 40
    },
    "signal_wrap": {
        "count": 1,
        "size": 40
    },
    "signame": {
        "count": 1,
        "size": 32
    },
    "signum": {
        "count": 1,
        "size": 32
    },
    "silent": {
        "count": 1,
        "size": 32
    },
    "simple": {
        "count": 1,
        "size": 32
    },
    "simplePath": {
        "count": 1,
        "size": 40
    },
    "simplePathPattern": {
        "count": 1,
        "size": 48
    },
    "simultaneousAccepts": {
        "count": 1,
        "size": 48
    },
    "sin": {
        "count": 3,
        "size": 248
    },
    "sinh": {
        "count": 3,
        "size": 248
    },
    "sink": {
        "count": 1,
        "size": 32
    },
    "skew": {
        "count": 1,
        "size": 32
    },
    "skipIndexes": {
        "count": 1,
        "size": 40
    },
    "skips": {
        "count": 1,
        "size": 32
    },
    "sl-log-transformer": {
        "count": 1,
        "size": 48
    },
    "sl-run": {
        "count": 1,
        "size": 32
    },
    "sl-runctl": {
        "count": 1,
        "size": 40
    },
    "slabBuffer": {
        "count": 1,
        "size": 40
    },
    "slashRegex": {
        "count": 1,
        "size": 40
    },
    "slashSplit": {
        "count": 1,
        "size": 40
    },
    "slashedProtocol": {
        "count": 1,
        "size": 40
    },
    "slashes": {
        "count": 1,
        "size": 32
    },
    "slashesDenoteHost": {
        "count": 1,
        "size": 48
    },
    "slc ": {
        "count": 1,
        "size": 32
    },
    "slice": {
        "count": 15,
        "size": 1544
    },
    "slide": {
        "count": 1,
        "size": 32
    },
    "slowIndexOf": {
        "count": 3,
        "size": 256
    },
    "slowToString": {
        "count": 3,
        "size": 256
    },
    "slr": {
        "count": 1,
        "size": 32
    },
    "slrc": {
        "count": 1,
        "size": 32
    },
    "small": {
        "count": 3,
        "size": 248
    },
    "snakeCase": {
        "count": 1,
        "size": 40
    },
    "sni_context": {
        "count": 1,
        "size": 40
    },
    "sock": {
        "count": 1,
        "size": 32
    },
    "socket": {
        "count": 1,
        "size": 32
    },
    "socket error: %s": {
        "count": 1,
        "size": 40
    },
    "socket.io": {
        "count": 1,
        "size": 40
    },
    "socketCloseListener": {
        "count": 3,
        "size": 264
    },
    "socketCloseNT": {
        "count": 3,
        "size": 256
    },
    "socketErrorListener": {
        "count": 3,
        "size": 264
    },
    "socketOnData": {
        "count": 3,
        "size": 256
    },
    "socketOnEnd": {
        "count": 3,
        "size": 256
    },
    "socketOnWrap": {
        "count": 3,
        "size": 256
    },
    "socketio": {
        "count": 1,
        "size": 32
    },
    "sockets": {
        "count": 1,
        "size": 32
    },
    "sockname": {
        "count": 1,
        "size": 32
    },
    "some": {
        "count": 7,
        "size": 680
    },
    "someLimit": {
        "count": 1,
        "size": 40
    },
    "soon.": {
        "count": 1,
        "size": 32
    },
    "sort": {
        "count": 7,
        "size": 680
    },
    "sortBy": {
        "count": 3,
        "size": 248
    },
    "sortByAll": {
        "count": 1,
        "size": 40
    },
    "sortByOrder": {
        "count": 3,
        "size": 256
    },
    "sortedIndex": {
        "count": 1,
        "size": 40
    },
    "sortedLastIndex": {
        "count": 1,
        "size": 40
    },
    "sortedUniq": {
        "count": 3,
        "size": 256
    },
    "source": {
        "count": 1,
        "size": 32
    },
    "sourceLine": {
        "count": 1,
        "size": 40
    },
    "sourceSlice": {
        "count": 1,
        "size": 40
    },
    "sourceText": {
        "count": 1,
        "size": 40
    },
    "sourceUrl": {
        "count": 1,
        "size": 40
    },
    "source_mapping_url": {
        "count": 1,
        "size": 48
    },
    "source_url": {
        "count": 1,
        "size": 40
    },
    "sources": {
        "count": 1,
        "size": 32
    },
    "spath": {
        "count": 1,
        "size": 32
    },
    "spawn": {
        "count": 5,
        "size": 464
    },
    "spawnSync": {
        "count": 3,
        "size": 256
    },
    "spawn_sync": {
        "count": 1,
        "size": 40
    },
    "spawnargs": {
        "count": 1,
        "size": 40
    },
    "spawnfile": {
        "count": 1,
        "size": 40
    },
    "special": {
        "count": 1,
        "size": 32
    },
    "specified parentLocale is not defined yet": {
        "count": 1,
        "size": 72
    },
    "specifying %s as array is deprecated": {
        "count": 1,
        "size": 64
    },
    "speed": {
        "count": 1,
        "size": 32
    },
    "splice": {
        "count": 3,
        "size": 248
    },
    "spliceOne": {
        "count": 5,
        "size": 472
    },
    "split": {
        "count": 3,
        "size": 248
    },
    "splitDeviceRe": {
        "count": 1,
        "size": 40
    },
    "splitPathRe": {
        "count": 1,
        "size": 40
    },
    "splitRe": {
        "count": 1,
        "size": 32
    },
    "splitRootRe": {
        "count": 1,
        "size": 40
    },
    "splitTailRe": {
        "count": 1,
        "size": 40
    },
    "splitter": {
        "count": 1,
        "size": 32
    },
    "splunk port missing": {
        "count": 1,
        "size": 48
    },
    "splunk:": {
        "count": 1,
        "size": 32
    },
    "spread": {
        "count": 3,
        "size": 248
    },
    "sqrt": {
        "count": 3,
        "size": 248
    },
    "sr": {
        "count": 1,
        "size": 32
    },
    "sr+": {
        "count": 1,
        "size": 32
    },
    "src": {
        "count": 1,
        "size": 32
    },
    "ss": {
        "count": 1,
        "size": 32
    },
    "st": {
        "count": 1,
        "size": 32
    },
    "stack": {
        "count": 1,
        "size": 32
    },
    "stackFormat": {
        "count": 1,
        "size": 40
    },
    "stackTraceLimit": {
        "count": 1,
        "size": 40
    },
    "stack_trace_symbol": {
        "count": 2,
        "size": 96
    },
    "stallout": {
        "count": 1,
        "size": 32
    },
    "stalls": {
        "count": 1,
        "size": 32
    },
    "star": {
        "count": 1,
        "size": 32
    },
    "start": {
        "count": 31,
        "size": 3232
    },
    "start %j cb? %s": {
        "count": 1,
        "size": 40
    },
    "start offset": {
        "count": 1,
        "size": 40
    },
    "start-command": {
        "count": 1,
        "size": 40
    },
    "start-cpu-profiling": {
        "count": 1,
        "size": 48
    },
    "start-tracking-objects": {
        "count": 1,
        "size": 48
    },
    "startCallbacks": {
        "count": 1,
        "size": 40
    },
    "startCase": {
        "count": 1,
        "size": 40
    },
    "startCmd": {
        "count": 1,
        "size": 32
    },
    "startCpuProfiling": {
        "count": 3,
        "size": 264
    },
    "startDebugger": {
        "count": 3,
        "size": 256
    },
    "startIndex": {
        "count": 1,
        "size": 40
    },
    "startListening": {
        "count": 5,
        "size": 472
    },
    "startMethod": {
        "count": 1,
        "size": 40
    },
    "startOf": {
        "count": 3,
        "size": 248
    },
    "startOne": {
        "count": 3,
        "size": 248
    },
    "startQueue": {
        "count": 3,
        "size": 256
    },
    "startRequest": {
        "count": 1,
        "size": 40
    },
    "startServer": {
        "count": 3,
        "size": 256
    },
    "startTime": {
        "count": 1,
        "size": 40
    },
    "startTrackingObjects": {
        "count": 3,
        "size": 264
    },
    "startWorker": {
        "count": 1,
        "size": 40
    },
    "started": {
        "count": 1,
        "size": 32
    },
    "starting": {
        "count": 1,
        "size": 32
    },
    "starting server: %s": {
        "count": 1,
        "size": 48
    },
    "startsWith": {
        "count": 5,
        "size": 472
    },
    "starttime": {
        "count": 1,
        "size": 40
    },
    "startup": {
        "count": 3,
        "size": 248
    },
    "startupTime": {
        "count": 1,
        "size": 40
    },
    "startup_time": {
        "count": 1,
        "size": 40
    },
    "stat": {
        "count": 3,
        "size": 248
    },
    "statSync": {
        "count": 1,
        "size": 32
    },
    "statWatchers": {
        "count": 1,
        "size": 40
    },
    "state": {
        "count": 3,
        "size": 248
    },
    "staticTagger": {
        "count": 3,
        "size": 256
    },
    "stats": {
        "count": 1,
        "size": 32
    },
    "statsd": {
        "count": 1,
        "size": 32
    },
    "statsd config: %j": {
        "count": 1,
        "size": 48
    },
    "statsd scope not supported": {
        "count": 1,
        "size": 56
    },
    "statsd.bad_lines_seen": {
        "count": 2,
        "size": 96
    },
    "statsd.packets_received": {
        "count": 2,
        "size": 96
    },
    "statsd:": {
        "count": 1,
        "size": 32
    },
    "statsd://:33209": {
        "count": 1,
        "size": 40
    },
    "statsdWorker": {
        "count": 1,
        "size": 40
    },
    "statsd_metrics": {
        "count": 1,
        "size": 40
    },
    "status": {
        "count": 3,
        "size": 248
    },
    "status-wd": {
        "count": 1,
        "size": 40
    },
    "status: %j": {
        "count": 1,
        "size": 40
    },
    "status:wd": {
        "count": 1,
        "size": 40
    },
    "statusCode": {
        "count": 1,
        "size": 40
    },
    "statusMessage": {
        "count": 1,
        "size": 40
    },
    "std": {
        "count": 1,
        "size": 32
    },
    "stdLogger": {
        "count": 1,
        "size": 40
    },
    "stddev": {
        "count": 1,
        "size": 32
    },
    "stderr": {
        "count": 1,
        "size": 32
    },
    "stdin": {
        "count": 1,
        "size": 32
    },
    "stdio": {
        "count": 1,
        "size": 32
    },
    "stdout": {
        "count": 1,
        "size": 32
    },
    "sticky": {
        "count": 1,
        "size": 32
    },
    "stop": {
        "count": 11,
        "size": 1112
    },
    "stop-cpu-profiling": {
        "count": 1,
        "size": 48
    },
    "stop-tracking-objects": {
        "count": 1,
        "size": 48
    },
    "stopCallbacks": {
        "count": 1,
        "size": 40
    },
    "stopCpuProfiling": {
        "count": 3,
        "size": 256
    },
    "stopDebugger": {
        "count": 3,
        "size": 256
    },
    "stopList": {
        "count": 1,
        "size": 32
    },
    "stopOne": {
        "count": 3,
        "size": 248
    },
    "stopTrackingObjects": {
        "count": 3,
        "size": 264
    },
    "stopWorker": {
        "count": 1,
        "size": 40
    },
    "storeBucketProps": {
        "count": 1,
        "size": 40
    },
    "storeBucketTypeProps": {
        "count": 1,
        "size": 48
    },
    "storeHeader": {
        "count": 3,
        "size": 256
    },
    "storeIndex": {
        "count": 1,
        "size": 40
    },
    "storeSchema": {
        "count": 1,
        "size": 40
    },
    "storeValue": {
        "count": 1,
        "size": 40
    },
    "str": {
        "count": 1,
        "size": 32
    },
    "stream": {
        "count": 4,
        "size": 280
    },
    "stream.end": {
        "count": 1,
        "size": 40
    },
    "stream.js": {
        "count": 2,
        "size": 168
    },
    "stream.pause": {
        "count": 1,
        "size": 40
    },
    "stream.push() after EOF": {
        "count": 1,
        "size": 48
    },
    "stream.queue": {
        "count": 1,
        "size": 40
    },
    "stream.unshift() after end event": {
        "count": 1,
        "size": 56
    },
    "stream.write": {
        "count": 1,
        "size": 40
    },
    "stream_wrap": {
        "count": 1,
        "size": 40
    },
    "streams": {
        "count": 1,
        "size": 32
    },
    "strerror": {
        "count": 3,
        "size": 248
    },
    "strict": {
        "count": 1,
        "size": 32
    },
    "strictEqual": {
        "count": 3,
        "size": 256
    },
    "strictRegex": {
        "count": 1,
        "size": 40
    },
    "strike": {
        "count": 3,
        "size": 248
    },
    "string": {
        "count": 1,
        "size": 32
    },
    "stringEscapes": {
        "count": 1,
        "size": 40
    },
    "stringFromCharCode": {
        "count": 1,
        "size": 48
    },
    "stringMode": {
        "count": 1,
        "size": 40
    },
    "stringProto": {
        "count": 1,
        "size": 40
    },
    "stringTag": {
        "count": 1,
        "size": 40
    },
    "stringToFlags": {
        "count": 5,
        "size": 472
    },
    "string_decoder": {
        "count": 2,
        "size": 80
    },
    "string_decoder.js": {
        "count": 1,
        "size": 128
    },
    "stringify": {
        "count": 3,
        "size": 256
    },
    "stringifyPrimitive": {
        "count": 1,
        "size": 48
    },
    "stripBOM": {
        "count": 5,
        "size": 464
    },
    "stripCircular": {
        "count": 3,
        "size": 256
    },
    "strong*": {
        "count": 1,
        "size": 32
    },
    "strong-agent": {
        "count": 1,
        "size": 40
    },
    "strong-cluster-control": {
        "count": 2,
        "size": 96
    },
    "strong-cluster-control:master": {
        "count": 1,
        "size": 56
    },
    "strong-cluster-control@2.2.3": {
        "count": 1,
        "size": 56
    },
    "strong-cluster-control@>=2.0.0 <3.0.0": {
        "count": 1,
        "size": 64
    },
    "strong-control-channel": {
        "count": 2,
        "size": 96
    },
    "strong-control-channel/cluster": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel/process": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel/server": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel/ws-channel": {
        "count": 1,
        "size": 64
    },
    "strong-control-channel:channel": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel:cluster:0": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel:notification": {
        "count": 1,
        "size": 64
    },
    "strong-control-channel:process:18924": {
        "count": 1,
        "size": 64
    },
    "strong-control-channel:request": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel:response": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel:server": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel@2.2.2": {
        "count": 1,
        "size": 56
    },
    "strong-control-channel@>=2.0.0 <3.0.0": {
        "count": 1,
        "size": 64
    },
    "strong-debugger": {
        "count": 2,
        "size": 80
    },
    "strong-debugger/package.json": {
        "count": 1,
        "size": 56
    },
    "strong-debugger@1.0.0": {
        "count": 1,
        "size": 48
    },
    "strong-debugger@>=1.0.0 <2.0.0": {
        "count": 1,
        "size": 56
    },
    "strong-express-metrics": {
        "count": 1,
        "size": 48
    },
    "strong-fork-syslog": {
        "count": 1,
        "size": 48
    },
    "strong-log-transformer": {
        "count": 2,
        "size": 96
    },
    "strong-log-transformer\n======================\n\nA stream filter for performing common log stream transformations like\ntimestamping and joining multi-line messages.\n\n**This is not a logger!** But it may be useful for rolling your own logger.\n\n## Usage\n\nInstall strong-log-transformer and add it to your dependencies list.\n```sh\nnpm install --save strong-log-transformer\n```\n\n### CLI\n\nWhen installed globally the `sl-log-transformer` CLI utility is exposed. It is\nprimarily used for testing, but it can also be used as an alternative to\nawk or sed for jobs such as timestamping every line of another process's\noutput. This can be useful for cron jobs, for example.\n\n```sh\n$ npm install -g strong-log-transformer\n$ sl-log-tranformer --help\nUsage: sl-log-transformer [options]\n\nStream transformer that prefixes lines with timestamps and other things.\n\nOPTIONS:\n   --format FORMAT        default: \"text\"\n   --tag TAG              default: \"\"\n   --mergeMultiline       default: off\n   --timeStamp            default: off\n```\n\n### L": {
        "count": 1,
        "size": 3384
    },
    "strong-log-transformer@1.0.5": {
        "count": 1,
        "size": 56
    },
    "strong-log-transformer@>=1.0.0 <2.0.0": {
        "count": 1,
        "size": 64
    },
    "strong-mq": {
        "count": 1,
        "size": 40
    },
    "strong-npm-ls": {
        "count": 1,
        "size": 40
    },
    "strong-oracle": {
        "count": 1,
        "size": 40
    },
    "strong-statsd": {
        "count": 1,
        "size": 40
    },
    "strong-statsd:ipc": {
        "count": 1,
        "size": 48
    },
    "strong-statsd:ipc:metric": {
        "count": 1,
        "size": 48
    },
    "strong-statsd:log": {
        "count": 1,
        "size": 48
    },
    "strong-statsd:server": {
        "count": 1,
        "size": 48
    },
    "strong-supervisor": {
        "count": 1,
        "size": 48
    },
    "strong-supervisor:adapter": {
        "count": 1,
        "size": 56
    },
    "strong-supervisor:config": {
        "count": 1,
        "size": 48
    },
    "strong-supervisor:metrics": {
        "count": 1,
        "size": 56
    },
    "strong-supervisor:runctl": {
        "count": 1,
        "size": 48
    },
    "strong-supervisor:start-command": {
        "count": 1,
        "size": 56
    },
    "strong-supervisor:targetctl": {
        "count": 1,
        "size": 56
    },
    "strong-supervisor:watcher": {
        "count": 1,
        "size": 56
    },
    "strong-supervisor:watcher:master:agent-trace": {
        "count": 1,
        "size": 72
    },
    "strong-supervisor:watcher:master:cpu-profile": {
        "count": 1,
        "size": 72
    },
    "strong-supervisor:watcher:master:status-wd": {
        "count": 1,
        "size": 72
    },
    "strong-trace": {
        "count": 1,
        "size": 40
    },
    "strong-url-defaults": {
        "count": 1,
        "size": 48
    },
    "strongDebugger": {
        "count": 1,
        "size": 40
    },
    "strongloop": {
        "count": 2,
        "size": 80
    },
    "strongloop-license": {
        "count": 1,
        "size": 48
    },
    "strongops": {
        "count": 2,
        "size": 80
    },
    "styleType": {
        "count": 1,
        "size": 40
    },
    "styles": {
        "count": 1,
        "size": 32
    },
    "stylize": {
        "count": 1,
        "size": 32
    },
    "stylizeNoColor": {
        "count": 3,
        "size": 256
    },
    "stylizeWithColor": {
        "count": 3,
        "size": 256
    },
    "sub": {
        "count": 3,
        "size": 248
    },
    "subarray": {
        "count": 19,
        "size": 1976
    },
    "subject": {
        "count": 1,
        "size": 32
    },
    "subjectaltname": {
        "count": 1,
        "size": 40
    },
    "substituteTimeAgo": {
        "count": 3,
        "size": 264
    },
    "substr": {
        "count": 3,
        "size": 248
    },
    "substring": {
        "count": 3,
        "size": 256
    },
    "subtract": {
        "count": 1,
        "size": 32
    },
    "suicide": {
        "count": 1,
        "size": 32
    },
    "sum": {
        "count": 3,
        "size": 248
    },
    "sumOfDiffs": {
        "count": 1,
        "size": 40
    },
    "sumSquares": {
        "count": 1,
        "size": 40
    },
    "sum_": {
        "count": 1,
        "size": 32
    },
    "sum_squares": {
        "count": 1,
        "size": 40
    },
    "sum_squares_": {
        "count": 1,
        "size": 40
    },
    "sup": {
        "count": 3,
        "size": 248
    },
    "superCtor": {
        "count": 1,
        "size": 40
    },
    "super_": {
        "count": 1,
        "size": 32
    },
    "supervisor": {
        "count": 3,
        "size": 120
    },
    "supervisor %d detached process %d, output log in '%s'": {
        "count": 1,
        "size": 80
    },
    "supervisor (%d) logging to '%s'": {
        "count": 1,
        "size": 56
    },
    "supervisor (%d) logging to syslog": {
        "count": 1,
        "size": 64
    },
    "supervisor and monitor for node.js applications": {
        "count": 1,
        "size": 72
    },
    "supervisor failed to create pid file: %s": {
        "count": 1,
        "size": 64
    },
    "supervisor failed to start: %s": {
        "count": 1,
        "size": 56
    },
    "supervisor listening on '%s'": {
        "count": 1,
        "size": 56
    },
    "supervisor reporting metrics to `%s`": {
        "count": 1,
        "size": 64
    },
    "supervisor resized to": {
        "count": 1,
        "size": 48
    },
    "supervisor size set to": {
        "count": 1,
        "size": 48
    },
    "supervisor started worker %d (pid %d)": {
        "count": 1,
        "size": 64
    },
    "supervisor starting (pid %d)": {
        "count": 1,
        "size": 56
    },
    "supervisor-control": {
        "count": 1,
        "size": 48
    },
    "supervisor.log": {
        "count": 1,
        "size": 40
    },
    "supervisorLog": {
        "count": 1,
        "size": 40
    },
    "supervisorLogName": {
        "count": 1,
        "size": 48
    },
    "supervisor_detached": {
        "count": 1,
        "size": 48
    },
    "supervisor_profile": {
        "count": 1,
        "size": 48
    },
    "support": {
        "count": 1,
        "size": 32
    },
    "supportedLocalesOf": {
        "count": 11,
        "size": 1128
    },
    "supports": {
        "count": 1,
        "size": 32
    },
    "suppressDeprecationWarnings": {
        "count": 1,
        "size": 56
    },
    "surrogateSize": {
        "count": 1,
        "size": 40
    },
    "swallowErrors": {
        "count": 1,
        "size": 40
    },
    "swap": {
        "count": 1,
        "size": 32
    },
    "symbol": {
        "count": 46,
        "size": 1472
    },
    "symbolHasInstance": {
        "count": 1,
        "size": 48
    },
    "symbolIsConcatSpreadable": {
        "count": 1,
        "size": 48
    },
    "symbolIsRegExp": {
        "count": 1,
        "size": 40
    },
    "symbolIterator": {
        "count": 1,
        "size": 40
    },
    "symbolToStringTag": {
        "count": 1,
        "size": 48
    },
    "symbolUnscopables": {
        "count": 1,
        "size": 48
    },
    "symlink": {
        "count": 3,
        "size": 248
    },
    "symlinkReplacer": {
        "count": 3,
        "size": 256
    },
    "symlinkSync": {
        "count": 1,
        "size": 40
    },
    "sync": {
        "count": 1,
        "size": 32
    },
    "sys": {
        "count": 1,
        "size": 32
    },
    "syscall": {
        "count": 1,
        "size": 32
    },
    "syslog": {
        "count": 1,
        "size": 32
    },
    "syslog not supported": {
        "count": 1,
        "size": 48
    },
    "syslog optional dep not present": {
        "count": 1,
        "size": 56
    },
    "syslog priority invalid": {
        "count": 1,
        "size": 48
    },
    "syslog:": {
        "count": 1,
        "size": 32
    },
    "syslogAvailable": {
        "count": 1,
        "size": 40
    },
    "system": {
        "count": 12033,
        "size": 288472
    },
    "system / AccessorPair": {
        "count": 150,
        "size": 3600
    },
    "system / AllocationSite": {
        "count": 989,
        "size": 55384
    },
    "system / CallHandlerInfo": {
        "count": 440,
        "size": 10560
    },
    "system / Cell": {
        "count": 1408,
        "size": 22528
    },
    "system / Context": {
        "count": 1217,
        "size": 97992
    },
    "system / ExecutableAccessorInfo": {
        "count": 68,
        "size": 3808
    },
    "system / Foreign": {
        "count": 582,
        "size": 9312
    },
    "system / FunctionTemplateInfo": {
        "count": 463,
        "size": 66672
    },
    "system / InterceptorInfo": {
        "count": 1,
        "size": 64
    },
    "system / JSArrayBufferData": {
        "count": 11,
        "size": 41528
    },
    "system / Map": {
        "count": 4813,
        "size": 423544
    },
    "system / Map (ConsOneByteString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ConsString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ExternalInternalizedString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ExternalInternalizedStringWithOneByteData)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ExternalOneByteInternalizedString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ExternalOneByteString)": {
        "count": 2,
        "size": 176
    },
    "system / Map (ExternalString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ExternalStringWithOneByteData)": {
        "count": 1,
        "size": 88
    },
    "system / Map (InternalizedString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (OneByteInternalizedString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (OneByteString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ShortExternalInternalizedString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ShortExternalInternalizedStringWithOneByteData)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ShortExternalOneByteInternalizedString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ShortExternalOneByteString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ShortExternalString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (ShortExternalStringWithOneByteData)": {
        "count": 1,
        "size": 88
    },
    "system / Map (SlicedOneByteString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (SlicedString)": {
        "count": 1,
        "size": 88
    },
    "system / Map (String)": {
        "count": 1,
        "size": 88
    },
    "system / NativeContext": {
        "count": 1,
        "size": 1112
    },
    "system / ObjectTemplateInfo": {
        "count": 79,
        "size": 4424
    },
    "system / Oddball": {
        "count": 10,
        "size": 320
    },
    "system / PolymorphicCodeCache": {
        "count": 1,
        "size": 16
    },
    "system / PropertyCell": {
        "count": 232,
        "size": 7424
    },
    "system / PrototypeInfo": {
        "count": 671,
        "size": 26840
    },
    "system / TypeFeedbackInfo": {
        "count": 1311,
        "size": 41952
    },
    "t": {
        "count": 1,
        "size": 32
    },
    "tMax": {
        "count": 1,
        "size": 32
    },
    "tMin": {
        "count": 1,
        "size": 32
    },
    "tag": {
        "count": 1,
        "size": 32
    },
    "tagger": {
        "count": 7,
        "size": 536
    },
    "tags": {
        "count": 1,
        "size": 32
    },
    "tail": {
        "count": 1,
        "size": 32
    },
    "take": {
        "count": 3,
        "size": 248
    },
    "takeName": {
        "count": 1,
        "size": 32
    },
    "takeRight": {
        "count": 4,
        "size": 296
    },
    "takeRightWhile": {
        "count": 3,
        "size": 256
    },
    "takeWhile": {
        "count": 3,
        "size": 256
    },
    "tan": {
        "count": 3,
        "size": 248
    },
    "tanh": {
        "count": 3,
        "size": 248
    },
    "tap": {
        "count": 3,
        "size": 248
    },
    "tap --bail --timeout 300 test/test-*.js": {
        "count": 1,
        "size": 64
    },
    "tap --bail test/test-*.js": {
        "count": 2,
        "size": 112
    },
    "tap --coverage --coverage-report=cobertura test/test-*": {
        "count": 1,
        "size": 80
    },
    "tap test/lab/*.test.js test/*.test.js": {
        "count": 1,
        "size": 64
    },
    "tar": {
        "count": 1,
        "size": 32
    },
    "target": {
        "count": 1,
        "size": 32
    },
    "target %s not found": {
        "count": 1,
        "size": 48
    },
    "target send failed: %s": {
        "count": 1,
        "size": 48
    },
    "target._send": {
        "count": 1,
        "size": 40
    },
    "target.send": {
        "count": 1,
        "size": 40
    },
    "target_arch": {
        "count": 1,
        "size": 40
    },
    "target_defaults": {
        "count": 1,
        "size": 40
    },
    "targetctl": {
        "count": 1,
        "size": 40
    },
    "tcp_wrap": {
        "count": 1,
        "size": 32
    },
    "template": {
        "count": 3,
        "size": 248
    },
    "templateCounter": {
        "count": 1,
        "size": 40
    },
    "templateSettings": {
        "count": 1,
        "size": 40
    },
    "terminate": {
        "count": 5,
        "size": 472
    },
    "terminateTimeout": {
        "count": 1,
        "size": 40
    },
    "termination_exception": {
        "count": 1,
        "size": 48
    },
    "terms": {
        "count": 1,
        "size": 32
    },
    "test": {
        "count": 5,
        "size": 312
    },
    "testSet": {
        "count": 3,
        "size": 248
    },
    "testkey": {
        "count": 1,
        "size": 32
    },
    "tests": {
        "count": 1,
        "size": 32
    },
    "text": {
        "count": 6,
        "size": 192
    },
    "textFormatter": {
        "count": 3,
        "size": 256
    },
    "textify": {
        "count": 7,
        "size": 536
    },
    "textifyTags": {
        "count": 7,
        "size": 544
    },
    "th": {
        "count": 1,
        "size": 32
    },
    "that": {
        "count": 1,
        "size": 32
    },
    "then": {
        "count": 3,
        "size": 248
    },
    "thingsToFix": {
        "count": 1,
        "size": 40
    },
    "this": {
        "count": 1,
        "size": 32
    },
    "this var": {
        "count": 1,
        "size": 32
    },
    "thisArg": {
        "count": 1,
        "size": 32
    },
    "thresholdBoundary": {
        "count": 1,
        "size": 48
    },
    "thresholds": {
        "count": 1,
        "size": 40
    },
    "threw": {
        "count": 1,
        "size": 32
    },
    "throttle": {
        "count": 3,
        "size": 248
    },
    "throttleDelay": {
        "count": 1,
        "size": 40
    },
    "throttlePeriod": {
        "count": 1,
        "size": 40
    },
    "through": {
        "count": 3,
        "size": 248
    },
    "throw": {
        "count": 3,
        "size": 248
    },
    "throwOptionsError": {
        "count": 5,
        "size": 480
    },
    "throws": {
        "count": 1,
        "size": 32
    },
    "thru": {
        "count": 3,
        "size": 248
    },
    "tickDone": {
        "count": 3,
        "size": 248
    },
    "tickInfo": {
        "count": 1,
        "size": 32
    },
    "tickOnSocket": {
        "count": 3,
        "size": 256
    },
    "tildeTrimReplace": {
        "count": 1,
        "size": 40
    },
    "time": {
        "count": 1,
        "size": 32
    },
    "timeEnd": {
        "count": 1,
        "size": 32
    },
    "timeStamp": {
        "count": 1,
        "size": 40
    },
    "timeStampSupervisorLogs": {
        "count": 1,
        "size": 48
    },
    "timeStampWorkerLogs": {
        "count": 1,
        "size": 48
    },
    "time_stamp": {
        "count": 1,
        "size": 40
    },
    "timeout": {
        "count": 1,
        "size": 32
    },
    "timer": {
        "count": 1,
        "size": 32
    },
    "timer_counters": {
        "count": 1,
        "size": 40
    },
    "timer_data": {
        "count": 1,
        "size": 40
    },
    "timer_key": {
        "count": 1,
        "size": 40
    },
    "timer_wrap": {
        "count": 1,
        "size": 40
    },
    "timers": {
        "count": 1,
        "size": 32
    },
    "timers.js": {
        "count": 2,
        "size": 168
    },
    "times": {
        "count": 3,
        "size": 248
    },
    "timesLimit": {
        "count": 1,
        "size": 40
    },
    "timesSeries": {
        "count": 1,
        "size": 40
    },
    "timestamp": {
        "count": 3,
        "size": 256
    },
    "timestamp_lag_namespace": {
        "count": 1,
        "size": 48
    },
    "tip": {
        "count": 1,
        "size": 32
    },
    "title": {
        "count": 1,
        "size": 32
    },
    "tls": {
        "count": 2,
        "size": 64
    },
    "tls-legacy": {
        "count": 1,
        "size": 40
    },
    "tls.js": {
        "count": 2,
        "size": 160
    },
    "tlsTicket": {
        "count": 1,
        "size": 40
    },
    "tls_npn": {
        "count": 1,
        "size": 32
    },
    "tls_ocsp": {
        "count": 1,
        "size": 32
    },
    "tls_sni": {
        "count": 1,
        "size": 32
    },
    "tls_wrap": {
        "count": 1,
        "size": 32
    },
    "tmpDir": {
        "count": 1,
        "size": 32
    },
    "tmpdir": {
        "count": 1,
        "size": 32
    },
    "to": {
        "count": 3,
        "size": 248
    },
    "toASCII": {
        "count": 3,
        "size": 248
    },
    "toArray": {
        "count": 5,
        "size": 464
    },
    "toBool": {
        "count": 3,
        "size": 248
    },
    "toBuf": {
        "count": 3,
        "size": 248
    },
    "toComparators": {
        "count": 3,
        "size": 256
    },
    "toDate": {
        "count": 3,
        "size": 248
    },
    "toDateString": {
        "count": 3,
        "size": 256
    },
    "toDateTimeOptions": {
        "count": 3,
        "size": 264
    },
    "toExponential": {
        "count": 3,
        "size": 256
    },
    "toFixed": {
        "count": 3,
        "size": 248
    },
    "toGMTString": {
        "count": 3,
        "size": 256
    },
    "toISOString": {
        "count": 3,
        "size": 256
    },
    "toInt": {
        "count": 3,
        "size": 248
    },
    "toIsoString": {
        "count": 1,
        "size": 40
    },
    "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)": {
        "count": 1,
        "size": 112
    },
    "toIterable": {
        "count": 3,
        "size": 256
    },
    "toJSON": {
        "count": 5,
        "size": 464
    },
    "toLDMLString": {
        "count": 3,
        "size": 256
    },
    "toLocaleDateString": {
        "count": 4,
        "size": 408
    },
    "toLocaleDateTime": {
        "count": 3,
        "size": 256
    },
    "toLocaleLowerCase": {
        "count": 3,
        "size": 264
    },
    "toLocaleTimeString": {
        "count": 4,
        "size": 408
    },
    "toLocaleUpperCase": {
        "count": 3,
        "size": 264
    },
    "toLowerCase": {
        "count": 3,
        "size": 256
    },
    "toNow": {
        "count": 3,
        "size": 248
    },
    "toNumber": {
        "count": 5,
        "size": 464
    },
    "toObject": {
        "count": 5,
        "size": 464
    },
    "toPath": {
        "count": 3,
        "size": 248
    },
    "toPipe": {
        "count": 1,
        "size": 32
    },
    "toPlainObject": {
        "count": 3,
        "size": 256
    },
    "toPrecision": {
        "count": 3,
        "size": 256
    },
    "toRealPath": {
        "count": 3,
        "size": 256
    },
    "toString failed": {
        "count": 1,
        "size": 40
    },
    "toTimeString": {
        "count": 3,
        "size": 256
    },
    "toTitleCaseWord": {
        "count": 3,
        "size": 256
    },
    "toUTCString": {
        "count": 3,
        "size": 256
    },
    "toUnicode": {
        "count": 3,
        "size": 256
    },
    "toUnixTimestamp": {
        "count": 5,
        "size": 472
    },
    "toUpperCase": {
        "count": 3,
        "size": 256
    },
    "toWorker": {
        "count": 3,
        "size": 248
    },
    "to_line": {
        "count": 1,
        "size": 32
    },
    "to_position": {
        "count": 1,
        "size": 40
    },
    "to_type__valueOf": {
        "count": 3,
        "size": 256
    },
    "tock": {
        "count": 1,
        "size": 32
    },
    "token": {
        "count": 1,
        "size": 32
    },
    "tokenize": {
        "count": 1,
        "size": 32
    },
    "tokens": {
        "count": 1,
        "size": 32
    },
    "tools/icu/icu-generic.gyp": {
        "count": 1,
        "size": 56
    },
    "top": {
        "count": 1,
        "size": 32
    },
    "topLevel": {
        "count": 1,
        "size": 32
    },
    "topiary": {
        "count": 1,
        "size": 32
    },
    "topiary.js": {
        "count": 1,
        "size": 40
    },
    "topic": {
        "count": 1,
        "size": 32
    },
    "total": {
        "count": 1,
        "size": 32
    },
    "totalmem": {
        "count": 1,
        "size": 32
    },
    "trace": {
        "count": 3,
        "size": 248
    },
    "trace-object": {
        "count": 1,
        "size": 40
    },
    "traceId": {
        "count": 1,
        "size": 32
    },
    "traceMethod": {
        "count": 3,
        "size": 256
    },
    "traceProbe": {
        "count": 1,
        "size": 40
    },
    "traceStart": {
        "count": 1,
        "size": 40
    },
    "traceStop": {
        "count": 1,
        "size": 40
    },
    "tracer": {
        "count": 3,
        "size": 248
    },
    "tracing": {
        "count": 1,
        "size": 32
    },
    "trailerExpression": {
        "count": 1,
        "size": 48
    },
    "trailingSlash": {
        "count": 1,
        "size": 40
    },
    "trailingSlashRe": {
        "count": 1,
        "size": 40
    },
    "transfer-encoding": {
        "count": 1,
        "size": 48
    },
    "transferEncodingExpression": {
        "count": 1,
        "size": 56
    },
    "transform": {
        "count": 3,
        "size": 256
    },
    "transformer": {
        "count": 1,
        "size": 40
    },
    "transforming": {
        "count": 1,
        "size": 40
    },
    "transforms": {
        "count": 1,
        "size": 40
    },
    "translatePeerCertificate": {
        "count": 3,
        "size": 264
    },
    "transport": {
        "count": 1,
        "size": 40
    },
    "tries": {
        "count": 1,
        "size": 32
    },
    "trim": {
        "count": 5,
        "size": 464
    },
    "trimArray": {
        "count": 3,
        "size": 256
    },
    "trimLeft": {
        "count": 5,
        "size": 464
    },
    "trimRight": {
        "count": 5,
        "size": 472
    },
    "trimmedLeftIndex": {
        "count": 3,
        "size": 256
    },
    "trimmedRightIndex": {
        "count": 3,
        "size": 264
    },
    "true": {
        "count": 2,
        "size": 64
    },
    "trunc": {
        "count": 5,
        "size": 464
    },
    "truncate": {
        "count": 3,
        "size": 248
    },
    "truncateSync": {
        "count": 1,
        "size": 40
    },
    "try": {
        "count": 1,
        "size": 32
    },
    "try-thread-sleep": {
        "count": 1,
        "size": 40
    },
    "tryExtensions": {
        "count": 3,
        "size": 256
    },
    "tryFile": {
        "count": 3,
        "size": 248
    },
    "tryPackage": {
        "count": 3,
        "size": 256
    },
    "ts": {
        "count": 1,
        "size": 32
    },
    "tsDelete": {
        "count": 1,
        "size": 32
    },
    "tsDescribe": {
        "count": 1,
        "size": 40
    },
    "tsGet": {
        "count": 1,
        "size": 32
    },
    "tsListKeys": {
        "count": 1,
        "size": 40
    },
    "tsQuery": {
        "count": 1,
        "size": 32
    },
    "tsStore": {
        "count": 1,
        "size": 32
    },
    "tty": {
        "count": 2,
        "size": 64
    },
    "tty.js": {
        "count": 2,
        "size": 160
    },
    "tty.setRawMode is deprecated. ": {
        "count": 1,
        "size": 56
    },
    "tty_wrap": {
        "count": 1,
        "size": 32
    },
    "tuple": {
        "count": 1,
        "size": 32
    },
    "twoStarDot": {
        "count": 1,
        "size": 40
    },
    "twoStarNoDot": {
        "count": 1,
        "size": 40
    },
    "type": {
        "count": 1,
        "size": 32
    },
    "typeToEventType": {
        "count": 1,
        "size": 40
    },
    "typeToMethods": {
        "count": 1,
        "size": 40
    },
    "typedArrayTags": {
        "count": 1,
        "size": 40
    },
    "typo": {
        "count": 1,
        "size": 32
    },
    "typoWarned": {
        "count": 1,
        "size": 40
    },
    "typos": {
        "count": 1,
        "size": 32
    },
    "tzRegex": {
        "count": 1,
        "size": 32
    },
    "u": {
        "count": 1,
        "size": 32
    },
    "u2028": {
        "count": 1,
        "size": 32
    },
    "u2029": {
        "count": 1,
        "size": 32
    },
    "uSplit": {
        "count": 1,
        "size": 32
    },
    "ucFirst": {
        "count": 3,
        "size": 248
    },
    "ucs-2": {
        "count": 1,
        "size": 32
    },
    "ucs2": {
        "count": 1,
        "size": 32
    },
    "ucs2Slice": {
        "count": 3,
        "size": 256
    },
    "ucs2Write": {
        "count": 3,
        "size": 256
    },
    "ucs2decode": {
        "count": 3,
        "size": 256
    },
    "ucs2encode": {
        "count": 3,
        "size": 256
    },
    "udp4": {
        "count": 1,
        "size": 32
    },
    "udp6": {
        "count": 1,
        "size": 32
    },
    "udp_wrap": {
        "count": 1,
        "size": 32
    },
    "udpkv": {
        "count": 1,
        "size": 32
    },
    "uid": {
        "count": 1,
        "size": 32
    },
    "uint16Tag": {
        "count": 1,
        "size": 40
    },
    "uint32Tag": {
        "count": 1,
        "size": 40
    },
    "uint8ClampedTag": {
        "count": 1,
        "size": 40
    },
    "uint8Tag": {
        "count": 1,
        "size": 32
    },
    "ultron": {
        "count": 1,
        "size": 32
    },
    "umask": {
        "count": 3,
        "size": 248
    },
    "unParsePerson": {
        "count": 3,
        "size": 256
    },
    "unconsume": {
        "count": 3,
        "size": 256
    },
    "uncork": {
        "count": 1,
        "size": 32
    },
    "undefined": {
        "count": 1,
        "size": 40
    },
    "underline": {
        "count": 1,
        "size": 40
    },
    "unenroll": {
        "count": 1,
        "size": 32
    },
    "unenroll: list empty": {
        "count": 1,
        "size": 48
    },
    "unescape": {
        "count": 5,
        "size": 464
    },
    "unescapeBraces": {
        "count": 3,
        "size": 256
    },
    "unescapeBuffer": {
        "count": 1,
        "size": 40
    },
    "unescapeFormat": {
        "count": 3,
        "size": 256
    },
    "unescapeHtmlChar": {
        "count": 3,
        "size": 256
    },
    "unhandled": {
        "count": 1,
        "size": 40
    },
    "unhandledRejection": {
        "count": 3,
        "size": 264
    },
    "unicode": {
        "count": 1,
        "size": 32
    },
    "uninitialized": {
        "count": 1,
        "size": 40
    },
    "uninitialized_symbol": {
        "count": 2,
        "size": 96
    },
    "union": {
        "count": 1,
        "size": 32
    },
    "uniq": {
        "count": 3,
        "size": 248
    },
    "unique": {
        "count": 1,
        "size": 32
    },
    "uniqueId": {
        "count": 3,
        "size": 248
    },
    "unit": {
        "count": 1,
        "size": 32
    },
    "units_month__handleStrictParse": {
        "count": 3,
        "size": 272
    },
    "unix": {
        "count": 3,
        "size": 248
    },
    "unix_dgram": {
        "count": 1,
        "size": 40
    },
    "unix_dgram sockets are not supported any more.": {
        "count": 1,
        "size": 72
    },
    "unlink": {
        "count": 5,
        "size": 464
    },
    "unlinkSync": {
        "count": 1,
        "size": 40
    },
    "unmarkExtraneous": {
        "count": 3,
        "size": 256
    },
    "unmask": {
        "count": 4,
        "size": 280
    },
    "unmemoize": {
        "count": 1,
        "size": 40
    },
    "unobserve": {
        "count": 5,
        "size": 472
    },
    "unpipe": {
        "count": 12,
        "size": 896
    },
    "unref": {
        "count": 20,
        "size": 2048
    },
    "unrefList": {
        "count": 1,
        "size": 40
    },
    "unrefList append to end": {
        "count": 1,
        "size": 48
    },
    "unrefList initialized": {
        "count": 1,
        "size": 48
    },
    "unrefTimeout": {
        "count": 3,
        "size": 256
    },
    "unrefTimer": {
        "count": 3,
        "size": 256
    },
    "unrefTimer initialized": {
        "count": 1,
        "size": 48
    },
    "unrefTimer scheduled": {
        "count": 1,
        "size": 48
    },
    "unrefdHandle": {
        "count": 3,
        "size": 256
    },
    "unsafeProtocol": {
        "count": 1,
        "size": 40
    },
    "unscopables": {
        "count": 1,
        "size": 40
    },
    "unshift": {
        "count": 3,
        "size": 248
    },
    "unsupported": {
        "count": 2,
        "size": 184
    },
    "unsupported data": {
        "count": 1,
        "size": 40
    },
    "until": {
        "count": 1,
        "size": 32
    },
    "unusedInput": {
        "count": 1,
        "size": 40
    },
    "unusedTokens": {
        "count": 1,
        "size": 40
    },
    "unwatchFile": {
        "count": 1,
        "size": 40
    },
    "unwise": {
        "count": 1,
        "size": 32
    },
    "unzip": {
        "count": 3,
        "size": 248
    },
    "unzipSync": {
        "count": 1,
        "size": 40
    },
    "unzipWith": {
        "count": 3,
        "size": 256
    },
    "update": {
        "count": 11,
        "size": 1112
    },
    "updateCounter": {
        "count": 1,
        "size": 40
    },
    "updateInProgress": {
        "count": 1,
        "size": 40
    },
    "updateLocale": {
        "count": 3,
        "size": 256
    },
    "updateMap": {
        "count": 1,
        "size": 40
    },
    "updateMetrics": {
        "count": 3,
        "size": 256
    },
    "updateOffset": {
        "count": 1,
        "size": 40
    },
    "updateSet": {
        "count": 1,
        "size": 40
    },
    "upper": {
        "count": 1,
        "size": 32
    },
    "upper_": {
        "count": 1,
        "size": 32
    },
    "uptime": {
        "count": 3,
        "size": 248
    },
    "url": {
        "count": 4,
        "size": 128
    },
    "url format unknown": {
        "count": 1,
        "size": 48
    },
    "url.js": {
        "count": 2,
        "size": 160
    },
    "urlFormat": {
        "count": 3,
        "size": 256
    },
    "urlParse": {
        "count": 3,
        "size": 248
    },
    "urlResolve": {
        "count": 3,
        "size": 256
    },
    "urlResolveObject": {
        "count": 3,
        "size": 256
    },
    "usage": {
        "count": 3,
        "size": 248
    },
    "usage: slr [options] [app [app-options...]]\n\nRun an app, allowing it to be profiled (using StrongOps) and supervised.\n\n`app` can be a node file to run or a package directory. The default value is\n\".\", the current working directory. Packages will be run by requiring the first\nthat is found of:\n  1. JS file mentioned in `scripts.start` of package.json\n    *** NOTE: the script is no run and arguments are not preserved, only the\n        path of the script is used, eg:\n          `node --nodearg script.js --scriptarg` => 'script.js'\n          `node bin/www` => `bin/www`\n        The parser is simple, so options that accept arguments `--flag value`\n        will cause problems.\n  2. server.js\n  3. app.js\n  4. result of require(app)\n    1. `main` property of app package.json\n    2. `app`.js\n    3. `app`/index.js\n\n\nOptions:\n  -h,--help          Print this message and exit.\n  -v,--version       Print runner version and exit.\n  -d,--detach        Detach master from terminal to run as a daemon (default is\n\t\t       to not d": {
        "count": 1,
        "size": 3376
    },
    "use": {
        "count": 5,
        "size": 464
    },
    "use moment.updateLocale(localeName, config) to change ": {
        "count": 1,
        "size": 80
    },
    "useColors": {
        "count": 3,
        "size": 256
    },
    "useHttp": {
        "count": 1,
        "size": 32
    },
    "used": {
        "count": 1,
        "size": 32
    },
    "user": {
        "count": 2,
        "size": 64
    },
    "userInvalidated": {
        "count": 1,
        "size": 40
    },
    "usingDomains": {
        "count": 1,
        "size": 40
    },
    "utc": {
        "count": 1,
        "size": 32
    },
    "utcDate": {
        "count": 3,
        "size": 248
    },
    "utcOffset": {
        "count": 1,
        "size": 40
    },
    "utf-16le": {
        "count": 1,
        "size": 32
    },
    "utf-8": {
        "count": 1,
        "size": 32
    },
    "utf16DetectIncompleteChar": {
        "count": 3,
        "size": 272
    },
    "utf16le": {
        "count": 1,
        "size": 32
    },
    "utf8": {
        "count": 3,
        "size": 96
    },
    "utf8Slice": {
        "count": 3,
        "size": 256
    },
    "utf8Write": {
        "count": 3,
        "size": 256
    },
    "util": {
        "count": 2,
        "size": 64
    },
    "util-extend": {
        "count": 1,
        "size": 40
    },
    "util.debug is deprecated. Use console.error instead.": {
        "count": 1,
        "size": 80
    },
    "util.error is deprecated. Use console.error instead.": {
        "count": 1,
        "size": 80
    },
    "util.exec is deprecated. Use child_process.exec instead.": {
        "count": 1,
        "size": 80
    },
    "util.inspect": {
        "count": 1,
        "size": 40
    },
    "util.js": {
        "count": 2,
        "size": 160
    },
    "util.p is deprecated. Use console.error instead.": {
        "count": 1,
        "size": 72
    },
    "util.print is deprecated. Use console.log instead.": {
        "count": 1,
        "size": 80
    },
    "util.pump is deprecated. Use readableStream.pipe instead.": {
        "count": 1,
        "size": 88
    },
    "util.puts is deprecated. Use console.log instead.": {
        "count": 1,
        "size": 80
    },
    "utils": {
        "count": 1,
        "size": 32
    },
    "utils_hooks__hooks": {
        "count": 3,
        "size": 264
    },
    "utimensat": {
        "count": 1,
        "size": 40
    },
    "utimes": {
        "count": 3,
        "size": 248
    },
    "utimesSync": {
        "count": 1,
        "size": 40
    },
    "uv": {
        "count": 1,
        "size": 32
    },
    "uv_parent_path": {
        "count": 1,
        "size": 40
    },
    "uv_signal_start": {
        "count": 1,
        "size": 40
    },
    "uv_use_dtrace": {
        "count": 1,
        "size": 40
    },
    "v": {
        "count": 1,
        "size": 32
    },
    "v%s (%s, %s)": {
        "count": 1,
        "size": 40
    },
    "v0.8": {
        "count": 1,
        "size": 32
    },
    "v4.2.1": {
        "count": 2,
        "size": 64
    },
    "v8": {
        "count": 1,
        "size": 32
    },
    "v8BreakIterator": {
        "count": 1,
        "size": 40
    },
    "v8Parse": {
        "count": 1,
        "size": 32
    },
    "v8_enable_gdbjit": {
        "count": 1,
        "size": 40
    },
    "v8_enable_i18n_support": {
        "count": 1,
        "size": 48
    },
    "v8_no_strict_aliasing": {
        "count": 1,
        "size": 48
    },
    "v8_optimized_debug": {
        "count": 1,
        "size": 48
    },
    "v8_random_seed": {
        "count": 1,
        "size": 40
    },
    "v8_use_snapshot": {
        "count": 1,
        "size": 40
    },
    "v8debug": {
        "count": 1,
        "size": 32
    },
    "v?": {
        "count": 1,
        "size": 32
    },
    "val": {
        "count": 1,
        "size": 32
    },
    "valid": {
        "count": 3,
        "size": 248
    },
    "validChunk": {
        "count": 3,
        "size": 256
    },
    "validParts": {
        "count": 1,
        "size": 40
    },
    "validRange": {
        "count": 3,
        "size": 256
    },
    "valid__createInvalid": {
        "count": 3,
        "size": 264
    },
    "valid__isValid": {
        "count": 3,
        "size": 256
    },
    "valid_from": {
        "count": 1,
        "size": 40
    },
    "valid_to": {
        "count": 1,
        "size": 32
    },
    "value": {
        "count": 3,
        "size": 248
    },
    "value_": {
        "count": 1,
        "size": 32
    },
    "values": {
        "count": 7,
        "size": 680
    },
    "valuesIn": {
        "count": 3,
        "size": 248
    },
    "variable": {
        "count": 1,
        "size": 32
    },
    "variables": {
        "count": 1,
        "size": 40
    },
    "vars": {
        "count": 1,
        "size": 32
    },
    "verify": {
        "count": 3,
        "size": 248
    },
    "verifyError": {
        "count": 5,
        "size": 472
    },
    "verifySpkac": {
        "count": 3,
        "size": 256
    },
    "version": {
        "count": 3,
        "size": 248
    },
    "versions": {
        "count": 1,
        "size": 32
    },
    "virtual": {
        "count": 1,
        "size": 32
    },
    "visibleKeys": {
        "count": 1,
        "size": 40
    },
    "vm": {
        "count": 2,
        "size": 64
    },
    "vm.js": {
        "count": 2,
        "size": 160
    },
    "w": {
        "count": 1,
        "size": 32
    },
    "w+": {
        "count": 1,
        "size": 32
    },
    "wait": {
        "count": 1,
        "size": 32
    },
    "want_separate_host_toolset": {
        "count": 1,
        "size": 56
    },
    "warn": {
        "count": 3,
        "size": 248
    },
    "warned": {
        "count": 1,
        "size": 32
    },
    "warning: require('.') resolved outside the package ": {
        "count": 1,
        "size": 80
    },
    "watch": {
        "count": 1,
        "size": 32
    },
    "watchFile": {
        "count": 1,
        "size": 40
    },
    "watchdog": {
        "count": 1,
        "size": 32
    },
    "watchdogActivationCount": {
        "count": 1,
        "size": 48
    },
    "watcher": {
        "count": 1,
        "size": 32
    },
    "watcher:emit": {
        "count": 1,
        "size": 40
    },
    "watcher:send": {
        "count": 1,
        "size": 40
    },
    "watcherStart": {
        "count": 3,
        "size": 256
    },
    "watchers:": {
        "count": 1,
        "size": 40
    },
    "watching worker %d": {
        "count": 1,
        "size": 48
    },
    "waterfall": {
        "count": 1,
        "size": 40
    },
    "weakMapTag": {
        "count": 1,
        "size": 40
    },
    "web": {
        "count": 1,
        "size": 32
    },
    "week": {
        "count": 1,
        "size": 32
    },
    "weekOfYear": {
        "count": 3,
        "size": 256
    },
    "weekYear": {
        "count": 1,
        "size": 32
    },
    "weekday": {
        "count": 1,
        "size": 32
    },
    "weekdays": {
        "count": 1,
        "size": 32
    },
    "weekdaysMin": {
        "count": 1,
        "size": 40
    },
    "weekdaysMinRegex": {
        "count": 3,
        "size": 256
    },
    "weekdaysParse": {
        "count": 1,
        "size": 40
    },
    "weekdaysRegex": {
        "count": 3,
        "size": 256
    },
    "weekdaysShort": {
        "count": 1,
        "size": 40
    },
    "weekdaysShortRegex": {
        "count": 3,
        "size": 264
    },
    "weeks": {
        "count": 3,
        "size": 248
    },
    "weeksInYear": {
        "count": 3,
        "size": 256
    },
    "weekyear": {
        "count": 1,
        "size": 32
    },
    "weekyears": {
        "count": 1,
        "size": 40
    },
    "weight": {
        "count": 1,
        "size": 32
    },
    "when": {
        "count": 1,
        "size": 32
    },
    "where": {
        "count": 3,
        "size": 248
    },
    "whilst": {
        "count": 1,
        "size": 32
    },
    "white": {
        "count": 1,
        "size": 32
    },
    "wid": {
        "count": 1,
        "size": 32
    },
    "wid too short: ": {
        "count": 1,
        "size": 40
    },
    "win32": {
        "count": 3,
        "size": 248
    },
    "win32.format": {
        "count": 1,
        "size": 40
    },
    "win32.join": {
        "count": 1,
        "size": 40
    },
    "win32.parse": {
        "count": 1,
        "size": 40
    },
    "win32SplitPath": {
        "count": 3,
        "size": 256
    },
    "win32StatPath": {
        "count": 3,
        "size": 256
    },
    "winSize": {
        "count": 1,
        "size": 32
    },
    "window": {
        "count": 1,
        "size": 32
    },
    "windowsVerbatimArguments": {
        "count": 1,
        "size": 48
    },
    "without": {
        "count": 1,
        "size": 32
    },
    "wo": {
        "count": 1,
        "size": 32
    },
    "words": {
        "count": 3,
        "size": 248
    },
    "worker": {
        "count": 1,
        "size": 32
    },
    "worker %d reported %j": {
        "count": 1,
        "size": 48
    },
    "worker %s online": {
        "count": 1,
        "size": 40
    },
    "worker count resized to %j": {
        "count": 1,
        "size": 56
    },
    "worker id ": {
        "count": 1,
        "size": 40
    },
    "worker set %s=%s": {
        "count": 1,
        "size": 40
    },
    "workerEnv": {
        "count": 1,
        "size": 40
    },
    "workerId": {
        "count": 1,
        "size": 32
    },
    "workerIds": {
        "count": 1,
        "size": 40
    },
    "workerInit": {
        "count": 2,
        "size": 184
    },
    "workerParams": {
        "count": 3,
        "size": 256
    },
    "workerPath": {
        "count": 1,
        "size": 40
    },
    "workerPid": {
        "count": 1,
        "size": 40
    },
    "workerProcess": {
        "count": 1,
        "size": 40
    },
    "workers": {
        "count": 1,
        "size": 32
    },
    "wrap": {
        "count": 5,
        "size": 464
    },
    "wrapCallback": {
        "count": 2,
        "size": 184
    },
    "wrapSync": {
        "count": 1,
        "size": 32
    },
    "wrapType": {
        "count": 1,
        "size": 32
    },
    "wrap_timers": {
        "count": 1,
        "size": 40
    },
    "wrapper": {
        "count": 16,
        "size": 1544
    },
    "wrapperChain": {
        "count": 3,
        "size": 256
    },
    "wrapperClone": {
        "count": 3,
        "size": 256
    },
    "wrapperCommit": {
        "count": 3,
        "size": 256
    },
    "wrapperConcat": {
        "count": 1,
        "size": 40
    },
    "wrapperPlant": {
        "count": 3,
        "size": 256
    },
    "wrapperReverse": {
        "count": 3,
        "size": 256
    },
    "wrapperToString": {
        "count": 3,
        "size": 256
    },
    "wrapperValue": {
        "count": 3,
        "size": 256
    },
    "wrappy": {
        "count": 9,
        "size": 896
    },
    "wrappy.js": {
        "count": 4,
        "size": 160
    },
    "writable": {
        "count": 1,
        "size": 32
    },
    "writableObjectMode": {
        "count": 1,
        "size": 48
    },
    "writableStateGetBuffer": {
        "count": 3,
        "size": 264
    },
    "writable_": {
        "count": 1,
        "size": 40
    },
    "write": {
        "count": 9,
        "size": 896
    },
    "write failure": {
        "count": 1,
        "size": 40
    },
    "writeAfterEnd": {
        "count": 3,
        "size": 256
    },
    "writeAfterEndNT": {
        "count": 3,
        "size": 256
    },
    "writeAfterFIN": {
        "count": 3,
        "size": 256
    },
    "writeAll": {
        "count": 5,
        "size": 464
    },
    "writeAsciiString": {
        "count": 11,
        "size": 1120
    },
    "writeBinaryString": {
        "count": 11,
        "size": 1128
    },
    "writeBuffer": {
        "count": 13,
        "size": 1336
    },
    "writeBuffers": {
        "count": 3,
        "size": 256
    },
    "writeContinue": {
        "count": 1,
        "size": 40
    },
    "writeDoubleBE": {
        "count": 5,
        "size": 472
    },
    "writeDoubleLE": {
        "count": 5,
        "size": 472
    },
    "writeFile": {
        "count": 3,
        "size": 256
    },
    "writeFileSync": {
        "count": 1,
        "size": 40
    },
    "writeFloatBE": {
        "count": 5,
        "size": 472
    },
    "writeFloatLE": {
        "count": 5,
        "size": 472
    },
    "writeHead": {
        "count": 1,
        "size": 40
    },
    "writeHeader": {
        "count": 1,
        "size": 40
    },
    "writeInt16BE": {
        "count": 1,
        "size": 40
    },
    "writeInt16LE": {
        "count": 1,
        "size": 40
    },
    "writeInt32BE": {
        "count": 1,
        "size": 40
    },
    "writeInt32LE": {
        "count": 1,
        "size": 40
    },
    "writeInt8": {
        "count": 1,
        "size": 40
    },
    "writeIntBE": {
        "count": 1,
        "size": 40
    },
    "writeIntLE": {
        "count": 1,
        "size": 40
    },
    "writeMethods": {
        "count": 1,
        "size": 40
    },
    "writeMsg": {
        "count": 1,
        "size": 32
    },
    "writeOrBuffer": {
        "count": 3,
        "size": 256
    },
    "writePending": {
        "count": 3,
        "size": 256
    },
    "writeQueueSize": {
        "count": 1,
        "size": 40
    },
    "writeSnapshot": {
        "count": 1,
        "size": 40
    },
    "writeString": {
        "count": 3,
        "size": 256
    },
    "writeSync": {
        "count": 3,
        "size": 256
    },
    "writeUInt16BE": {
        "count": 3,
        "size": 256
    },
    "writeUInt16LE": {
        "count": 1,
        "size": 40
    },
    "writeUInt32BE": {
        "count": 3,
        "size": 256
    },
    "writeUInt32LE": {
        "count": 1,
        "size": 40
    },
    "writeUInt8": {
        "count": 1,
        "size": 40
    },
    "writeUIntBE": {
        "count": 1,
        "size": 40
    },
    "writeUIntLE": {
        "count": 1,
        "size": 40
    },
    "writeUcs2String": {
        "count": 11,
        "size": 1120
    },
    "writeUtf8String": {
        "count": 11,
        "size": 1120
    },
    "writeWarned": {
        "count": 1,
        "size": 40
    },
    "writeable": {
        "count": 1,
        "size": 40
    },
    "writecb": {
        "count": 1,
        "size": 32
    },
    "writechunk": {
        "count": 1,
        "size": 40
    },
    "writeencoding": {
        "count": 1,
        "size": 40
    },
    "writelen": {
        "count": 1,
        "size": 32
    },
    "writer": {
        "count": 1,
        "size": 32
    },
    "writev": {
        "count": 11,
        "size": 1112
    },
    "writing": {
        "count": 1,
        "size": 32
    },
    "ws": {
        "count": 1,
        "size": 32
    },
    "wsChannel": {
        "count": 1,
        "size": 40
    },
    "wsUrl": {
        "count": 1,
        "size": 32
    },
    "ww": {
        "count": 1,
        "size": 32
    },
    "wx": {
        "count": 1,
        "size": 32
    },
    "wx+": {
        "count": 1,
        "size": 32
    },
    "x": {
        "count": 1,
        "size": 32
    },
    "x-forwarded-for": {
        "count": 1,
        "size": 40
    },
    "x11": {
        "count": 1,
        "size": 32
    },
    "x30": {
        "count": 1,
        "size": 32
    },
    "x31": {
        "count": 1,
        "size": 32
    },
    "x32": {
        "count": 1,
        "size": 32
    },
    "x33": {
        "count": 1,
        "size": 32
    },
    "x34": {
        "count": 1,
        "size": 32
    },
    "x35": {
        "count": 1,
        "size": 32
    },
    "x36": {
        "count": 1,
        "size": 32
    },
    "x37": {
        "count": 1,
        "size": 32
    },
    "x38": {
        "count": 1,
        "size": 32
    },
    "x39": {
        "count": 1,
        "size": 32
    },
    "x41": {
        "count": 1,
        "size": 32
    },
    "x42": {
        "count": 1,
        "size": 32
    },
    "x43": {
        "count": 1,
        "size": 32
    },
    "x44": {
        "count": 1,
        "size": 32
    },
    "x45": {
        "count": 1,
        "size": 32
    },
    "x46": {
        "count": 1,
        "size": 32
    },
    "x61": {
        "count": 1,
        "size": 32
    },
    "x62": {
        "count": 1,
        "size": 32
    },
    "x63": {
        "count": 1,
        "size": 32
    },
    "x64": {
        "count": 4,
        "size": 128
    },
    "x65": {
        "count": 1,
        "size": 32
    },
    "x66": {
        "count": 1,
        "size": 32
    },
    "x6e": {
        "count": 1,
        "size": 32
    },
    "x72": {
        "count": 1,
        "size": 32
    },
    "x74": {
        "count": 1,
        "size": 32
    },
    "x75": {
        "count": 1,
        "size": 32
    },
    "x76": {
        "count": 1,
        "size": 32
    },
    "x78": {
        "count": 1,
        "size": 32
    },
    "x86_64": {
        "count": 1,
        "size": 32
    },
    "xa": {
        "count": 1,
        "size": 32
    },
    "xa+": {
        "count": 1,
        "size": 32
    },
    "xfce-": {
        "count": 1,
        "size": 32
    },
    "xn--": {
        "count": 1,
        "size": 32
    },
    "xor": {
        "count": 3,
        "size": 248
    },
    "xw": {
        "count": 1,
        "size": 32
    },
    "xw+": {
        "count": 1,
        "size": 32
    },
    "y": {
        "count": 1,
        "size": 32
    },
    "year": {
        "count": 1,
        "size": 32
    },
    "years": {
        "count": 1,
        "size": 32
    },
    "years accessor is deprecated. Use year instead": {
        "count": 1,
        "size": 72
    },
    "yellow": {
        "count": 1,
        "size": 32
    },
    "yy": {
        "count": 1,
        "size": 32
    },
    "z": {
        "count": 1,
        "size": 32
    },
    "zeroFill": {
        "count": 3,
        "size": 248
    },
    "zip": {
        "count": 1,
        "size": 32
    },
    "zipObject": {
        "count": 3,
        "size": 256
    },
    "zipWith": {
        "count": 1,
        "size": 32
    },
    "zlib": {
        "count": 2,
        "size": 64
    },
    "zlib.js": {
        "count": 2,
        "size": 160
    },
    "zlibBuffer": {
        "count": 3,
        "size": 256
    },
    "zlibBufferSync": {
        "count": 3,
        "size": 256
    },
    "zone": {
        "count": 1,
        "size": 32
    },
    "zoneAbbr": {
        "count": 1,
        "size": 32
    },
    "zoneName": {
        "count": 1,
        "size": 32
    },
    "zz": {
        "count": 1,
        "size": 32
    },
    "{": {
        "count": 1,
        "size": 32
    },
    "{\"request\":\"..\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes\"]}": {
        "count": 1,
        "size": 208
    },
    "{\"request\":\"../\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib\"]}": {
        "count": 1,
        "size": 208
    },
    "{\"request\":\"../agent\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/watcher\"]}": {
        "count": 1,
        "size": 184
    },
    "{\"request\":\"../bin/sl-run.txt\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 184
    },
    "{\"request\":\"../build/Release/addon\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/heapdump/lib\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"../lib/agent\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/bin\"]}": {
        "count": 1,
        "size": 176
    },
    "{\"request\":\"../lib/aspect.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"../lib/config\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/bin\"]}": {
        "count": 1,
        "size": 176
    },
    "{\"request\":\"../lib/probe.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"../lib/request.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"../lib/tracer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/bin\"]}": {
        "count": 1,
        "size": 176
    },
    "{\"request\":\"../package.json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 184
    },
    "{\"request\":\"../package.json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib\"]}": {
        "count": 1,
        "size": 256
    },
    "{\"request\":\"../package.json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib\"]}": {
        "count": 1,
        "size": 256
    },
    "{\"request\":\"../tracer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/watcher\"]}": {
        "count": 1,
        "size": 184
    },
    "{\"request\":\"./BufferPool\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./BufferUtil\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./ErrorCodes\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./Extensions\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./PerMessageDeflate\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 296
    },
    "{\"request\":\"./Receiver\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./Receiver.hixie\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 288
    },
    "{\"request\":\"./Sender\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 272
    },
    "{\"request\":\"./Sender.hixie\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 288
    },
    "{\"request\":\"./Validation\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./WebSocket\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./adapter\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./agent\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./appmetrics\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics\"]}": {
        "count": 1,
        "size": 216
    },
    "{\"request\":\"./appmetrics-api.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics\"]}": {
        "count": 1,
        "size": 232
    },
    "{\"request\":\"./aspect.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib\"]}": {
        "count": 1,
        "size": 224
    },
    "{\"request\":\"./async-map\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib\"]}": {
        "count": 1,
        "size": 320
    },
    "{\"request\":\"./backend/context.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./backends/internal\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib\"]}": {
        "count": 1,
        "size": 248
    },
    "{\"request\":\"./backends/repeater\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib\"]}": {
        "count": 1,
        "size": 248
    },
    "{\"request\":\"./bind-actor\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib\"]}": {
        "count": 1,
        "size": 328
    },
    "{\"request\":\"./bind-actor.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib\"]}": {
        "count": 1,
        "size": 328
    },
    "{\"request\":\"./capabilities\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 184
    },
    "{\"request\":\"./chain\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/slide/lib\"]}": {
        "count": 1,
        "size": 312
    },
    "{\"request\":\"./channel\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./chdir\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./common.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob\"]}": {
        "count": 1,
        "size": 376
    },
    "{\"request\":\"./core_module_names\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib\"]}": {
        "count": 1,
        "size": 432
    },
    "{\"request\":\"./debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/debug\"]}": {
        "count": 1,
        "size": 200
    },
    "{\"request\":\"./debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./debugger\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 176
    },
    "{\"request\":\"./detach\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./expander\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 176
    },
    "{\"request\":\"./extract_description\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib\"]}": {
        "count": 1,
        "size": 440
    },
    "{\"request\":\"./fixer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib\"]}": {
        "count": 1,
        "size": 408
    },
    "{\"request\":\"./fs.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/graceful-fs\"]}": {
        "count": 1,
        "size": 320
    },
    "{\"request\":\"./fs.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs\"]}": {
        "count": 1,
        "size": 392
    },
    "{\"request\":\"./glob.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob\"]}": {
        "count": 1,
        "size": 368
    },
    "{\"request\":\"./helpers\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib\"]}": {
        "count": 1,
        "size": 224
    },
    "{\"request\":\"./legacy-streams.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs\"]}": {
        "count": 1,
        "size": 416
    },
    "{\"request\":\"./lib/Receiver\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./lib/Sender\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws\"]}": {
        "count": 1,
        "size": 272
    },
    "{\"request\":\"./lib/WebSocket\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws\"]}": {
        "count": 1,
        "size": 280
    },
    "{\"request\":\"./lib/WebSocketServer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws\"]}": {
        "count": 1,
        "size": 288
    },
    "{\"request\":\"./lib/aspect.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics\"]}": {
        "count": 1,
        "size": 224
    },
    "{\"request\":\"./lib/cli\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer\"]}": {
        "count": 1,
        "size": 232
    },
    "{\"request\":\"./lib/cluster\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./lib/log\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd\"]}": {
        "count": 1,
        "size": 216
    },
    "{\"request\":\"./lib/logger\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./lib/master\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./lib/process\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./lib/request.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics\"]}": {
        "count": 1,
        "size": 224
    },
    "{\"request\":\"./lib/serializer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics\"]}": {
        "count": 1,
        "size": 224
    },
    "{\"request\":\"./lib/server\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./lib/server\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd\"]}": {
        "count": 1,
        "size": 224
    },
    "{\"request\":\"./lib/servers/ipc\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd\"]}": {
        "count": 1,
        "size": 232
    },
    "{\"request\":\"./lib/ws-channel\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel\"]}": {
        "count": 1,
        "size": 248
    },
    "{\"request\":\"./log-writer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 176
    },
    "{\"request\":\"./logger\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./logger\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./make_warning\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib\"]}": {
        "count": 1,
        "size": 424
    },
    "{\"request\":\"./message\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./metrics\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./msg\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib\"]}": {
        "count": 1,
        "size": 232
    },
    "{\"request\":\"./options\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./package.json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control\"]}": {
        "count": 1,
        "size": 248
    },
    "{\"request\":\"./parser\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/newline-json\"]}": {
        "count": 1,
        "size": 288
    },
    "{\"request\":\"./pidfile\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./pipe\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./polyfills.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/graceful-fs\"]}": {
        "count": 1,
        "size": 336
    },
    "{\"request\":\"./polyfills.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/graceful-fs\"]}": {
        "count": 1,
        "size": 408
    },
    "{\"request\":\"./printf-replacer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 184
    },
    "{\"request\":\"./process_metrics\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./raw\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules/asap\"]}": {
        "count": 1,
        "size": 416
    },
    "{\"request\":\"./request.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib\"]}": {
        "count": 1,
        "size": 224
    },
    "{\"request\":\"./runctl\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./servers/ipc\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib\"]}": {
        "count": 1,
        "size": 232
    },
    "{\"request\":\"./set\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib\"]}": {
        "count": 1,
        "size": 216
    },
    "{\"request\":\"./start-command\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 184
    },
    "{\"request\":\"./stringifier\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/newline-json\"]}": {
        "count": 1,
        "size": 296
    },
    "{\"request\":\"./sync.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob\"]}": {
        "count": 1,
        "size": 368
    },
    "{\"request\":\"./targetctl\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 176
    },
    "{\"request\":\"./timer.js\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/lib\"]}": {
        "count": 1,
        "size": 224
    },
    "{\"request\":\"./typos\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib\"]}": {
        "count": 1,
        "size": 408
    },
    "{\"request\":\"./util\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"./warning_messages.json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib\"]}": {
        "count": 1,
        "size": 440
    },
    "{\"request\":\"./watcher\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 168
    },
    "{\"request\":\"./watcher/cpu-profile\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib\"]}": {
        "count": 1,
        "size": 192
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/bin/sl-run.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 176
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/lib/watcher/agent-trace.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 200
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/lib/watcher/cpu-profile.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 200
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/lib/watcher/express-records.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 208
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/lib/watcher/status-wd.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 192
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/lib/watcher/trace-object.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 200
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/axon-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 232
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/basho-riak-client-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 264
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/http-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 232
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/leveldown-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 248
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/loopback-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/memcached-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 248
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/mongo-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/mqlight-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/mqtt-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 232
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/mysql-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/oracle-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/oracledb-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/postgres-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/redis-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/socketio-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/strong-mq-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 248
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/strongoracle-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 248
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/trace-probe.js\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 240
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/build/Release/bufferutil.node\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 360
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/build/Release/validation.node\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 368
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/build/Release/debugger.node\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 256
    },
    "{\"request\":\"/home/sam/w/sn/strong-supervisor/test/module-app/package.json\",\"paths\":[\"\"]}": {
        "count": 1,
        "size": 200
    },
    "{\"request\":\"appmetrics\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 736
    },
    "{\"request\":\"appmetrics\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/probes/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/appmetrics/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 936
    },
    "{\"request\":\"appmetrics/package.json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 760
    },
    "{\"request\":\"asap\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1576
    },
    "{\"request\":\"async\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 728
    },
    "{\"request\":\"async\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 928
    },
    "{\"request\":\"balanced-match\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_mo": {
        "count": 1,
        "size": 2328
    },
    "{\"request\":\"bindings\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/bufferutil/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1240
    },
    "{\"request\":\"bindings\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules/utf-8-validate/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1248
    },
    "{\"request\":\"bindings\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 784
    },
    "{\"request\":\"brace-expansion\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1920
    },
    "{\"request\":\"bufferutil\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1208
    },
    "{\"request\":\"byline\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 968
    },
    "{\"request\":\"concat-map\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules/brace-expansion/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/minimatch/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_module": {
        "count": 1,
        "size": 2320
    },
    "{\"request\":\"debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 728
    },
    "{\"request\":\"debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 968
    },
    "{\"request\":\"debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 968
    },
    "{\"request\":\"debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-debugger/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 776
    },
    "{\"request\":\"debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 928
    },
    "{\"request\":\"debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/servers/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1104
    },
    "{\"request\":\"debug\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-statsd/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 768
    },
    "{\"request\":\"debuglog\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 984
    },
    "{\"request\":\"debuglog\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1264
    },
    "{\"request\":\"dezalgo\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1256
    },
    "{\"request\":\"dotenv\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 728
    },
    "{\"request\":\"duplexer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 968
    },
    "{\"request\":\"github-url-from-git\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1960
    },
    "{\"request\":\"github-url-from-username-repo\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1984
    },
    "{\"request\":\"glob\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1240
    },
    "{\"request\":\"graceful-fs\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 992
    },
    "{\"request\":\"graceful-fs\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1256
    },
    "{\"request\":\"graceful-fs\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1264
    },
    "{\"request\":\"heapdump\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 728
    },
    "{\"request\":\"inflight\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1552
    },
    "{\"request\":\"inherits\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1552
    },
    "{\"request\":\"jju\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/json-parse-helpfulerror/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1584
    },
    "{\"request\":\"json-parse-helpfulerror\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1280
    },
    "{\"request\":\"lodash\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 728
    },
    "{\"request\":\"lodash\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-cluster-control/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 968
    },
    "{\"request\":\"minimatch\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1560
    },
    "{\"request\":\"minimist\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 968
    },
    "{\"request\":\"moment\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 968
    },
    "{\"request\":\"ms\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/debug/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 752
    },
    "{\"request\":\"newline-json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 976
    },
    "{\"request\":\"normalize-package-data\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1280
    },
    "{\"request\":\"once\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1544
    },
    "{\"request\":\"once\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inflight/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1896
    },
    "{\"request\":\"once\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1256
    },
    "{\"request\":\"options\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1200
    },
    "{\"request\":\"path-is-absolute\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1568
    },
    "{\"request\":\"read-installed\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 792
    },
    "{\"request\":\"read-package-json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1000
    },
    "{\"request\":\"readdir-scoped-modules\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1008
    },
    "{\"request\":\"semver\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 976
    },
    "{\"request\":\"semver\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/normalize-package-data/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1936
    },
    "{\"request\":\"slide\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 976
    },
    "{\"request\":\"strong-cluster-control\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 760
    },
    "{\"request\":\"strong-control-channel/cluster\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 776
    },
    "{\"request\":\"strong-control-channel/process\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 776
    },
    "{\"request\":\"strong-control-channel/server\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 776
    },
    "{\"request\":\"strong-control-channel/ws-channel\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 784
    },
    "{\"request\":\"strong-debugger\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 744
    },
    "{\"request\":\"strong-debugger/package.json\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 768
    },
    "{\"request\":\"strong-log-transformer\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 760
    },
    "{\"request\":\"strong-npm-ls\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 744
    },
    "{\"request\":\"strong-statsd\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 744
    },
    "{\"request\":\"strong-url-defaults\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 752
    },
    "{\"request\":\"through\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-log-transformer/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 968
    },
    "{\"request\":\"topiary\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 776
    },
    "{\"request\":\"ultron\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1200
    },
    "{\"request\":\"utf-8-validate\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules/ws/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1216
    },
    "{\"request\":\"util-extend\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 992
    },
    "{\"request\":\"wrappy\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/inflight/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1896
    },
    "{\"request\":\"wrappy\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules/once/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules/glob/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/read-package-json/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1888
    },
    "{\"request\":\"wrappy\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/dezalgo/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1576
    },
    "{\"request\":\"wrappy\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules/once/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules/readdir-scoped-modules/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules/read-installed/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-npm-ls/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 1568
    },
    "{\"request\":\"ws\",\"paths\":[\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/lib/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules/strong-control-channel/node_modules\",\"/home/sam/w/sn/strong-supervisor/node_modules\",\"/home/sam/w/sn/node_modules\",\"/home/sam/w/node_modules\",\"/home/sam/node_modules\",\"/home/node_modules\",\"/node_modules\",\"/home/sam/.node_modules\",\"/home/sam/.node_libraries\",\"/home/sam/.nvm/versions/node/v4.2.1/lib/node\"]}": {
        "count": 1,
        "size": 960
    },
    "|": {
        "count": 1,
        "size": 32
    },
    "|x|X|\\*": {
        "count": 1,
        "size": 32
    },
    "}": {
        "count": 1,
        "size": 32
    },
    "~0.6.0": {
        "count": 1,
        "size": 32
    },
    "\u00c0": {
        "count": 1,
        "size": 32
    },
    "\u00c1": {
        "count": 1,
        "size": 32
    },
    "\u00c2": {
        "count": 1,
        "size": 32
    },
    "\u00c3": {
        "count": 1,
        "size": 32
    },
    "\u00c4": {
        "count": 1,
        "size": 32
    },
    "\u00c5": {
        "count": 1,
        "size": 32
    },
    "\u00c6": {
        "count": 1,
        "size": 32
    },
    "\u00c7": {
        "count": 1,
        "size": 32
    },
    "\u00c8": {
        "count": 1,
        "size": 32
    },
    "\u00c9": {
        "count": 1,
        "size": 32
    },
    "\u00ca": {
        "count": 1,
        "size": 32
    },
    "\u00cb": {
        "count": 1,
        "size": 32
    },
    "\u00cc": {
        "count": 1,
        "size": 32
    },
    "\u00cd": {
        "count": 1,
        "size": 32
    },
    "\u00ce": {
        "count": 1,
        "size": 32
    },
    "\u00cf": {
        "count": 1,
        "size": 32
    },
    "\u00d0": {
        "count": 1,
        "size": 32
    },
    "\u00d1": {
        "count": 1,
        "size": 32
    },
    "\u00d2": {
        "count": 1,
        "size": 32
    },
    "\u00d3": {
        "count": 1,
        "size": 32
    },
    "\u00d4": {
        "count": 1,
        "size": 32
    },
    "\u00d5": {
        "count": 1,
        "size": 32
    },
    "\u00d6": {
        "count": 1,
        "size": 32
    },
    "\u00d8": {
        "count": 1,
        "size": 32
    },
    "\u00d9": {
        "count": 1,
        "size": 32
    },
    "\u00da": {
        "count": 1,
        "size": 32
    },
    "\u00db": {
        "count": 1,
        "size": 32
    },
    "\u00dc": {
        "count": 1,
        "size": 32
    },
    "\u00dd": {
        "count": 1,
        "size": 32
    },
    "\u00de": {
        "count": 1,
        "size": 32
    },
    "\u00df": {
        "count": 1,
        "size": 32
    },
    "\u00e0": {
        "count": 1,
        "size": 32
    },
    "\u00e1": {
        "count": 1,
        "size": 32
    },
    "\u00e2": {
        "count": 1,
        "size": 32
    },
    "\u00e3": {
        "count": 1,
        "size": 32
    },
    "\u00e4": {
        "count": 1,
        "size": 32
    },
    "\u00e5": {
        "count": 1,
        "size": 32
    },
    "\u00e6": {
        "count": 1,
        "size": 32
    },
    "\u00e7": {
        "count": 1,
        "size": 32
    },
    "\u00e8": {
        "count": 1,
        "size": 32
    },
    "\u00e9": {
        "count": 1,
        "size": 32
    },
    "\u00ea": {
        "count": 1,
        "size": 32
    },
    "\u00eb": {
        "count": 1,
        "size": 32
    },
    "\u00ec": {
        "count": 1,
        "size": 32
    },
    "\u00ed": {
        "count": 1,
        "size": 32
    },
    "\u00ee": {
        "count": 1,
        "size": 32
    },
    "\u00ef": {
        "count": 1,
        "size": 32
    },
    "\u00f0": {
        "count": 1,
        "size": 32
    },
    "\u00f1": {
        "count": 1,
        "size": 32
    },
    "\u00f2": {
        "count": 1,
        "size": 32
    },
    "\u00f3": {
        "count": 1,
        "size": 32
    },
    "\u00f4": {
        "count": 1,
        "size": 32
    },
    "\u00f5": {
        "count": 1,
        "size": 32
    },
    "\u00f6": {
        "count": 1,
        "size": 32
    },
    "\u00f8": {
        "count": 1,
        "size": 32
    },
    "\u00f9": {
        "count": 1,
        "size": 32
    },
    "\u00fa": {
        "count": 1,
        "size": 32
    },
    "\u00fb": {
        "count": 1,
        "size": 32
    },
    "\u00fc": {
        "count": 1,
        "size": 32
    },
    "\u00fd": {
        "count": 1,
        "size": 32
    },
    "\u00fe": {
        "count": 1,
        "size": 32
    },
    "\u00ff": {
        "count": 1,
        "size": 32
    },
    "\u2028": {
        "count": 1,
        "size": 32
    },
    "\u2029": {
        "count": 1,
        "size": 32
    }
}
